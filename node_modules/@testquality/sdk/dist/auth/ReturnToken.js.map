{"version":3,"file":"ReturnToken.js","sourceRoot":"","sources":["../../src/auth/ReturnToken.ts"],"names":[],"mappings":";;;AA0EA,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,uEAAkB,CAAA;IAClB,2DAAY,CAAA;IACZ,2DAAY,CAAA;IACZ,qDAAS,CAAA;AACX,CAAC,EALW,cAAc,8BAAd,cAAc,QAKzB","sourcesContent":["/**\n * Copyright (C) 2021 BitModern, Inc - All Rights Reserved\n */\nimport { type Subscriptions } from '../gen/domain';\n\n// From testQuality App/Models/SubscriptionEntitlement\nexport interface SubscriptionEntitlement {\n  is_expired?: boolean;\n  subscription: Subscriptions;\n  subscription_ends_at?: string;\n  temporary: string[];\n  trial_ends_at?: string;\n  unavailable: string[];\n}\n\n// From AuthTokenController getToken\n// NOTE: if user is not verified and verification period is breached the api\n// returns a token with these two fields, though both share the same value\n// (accessToken->verification_ends_at), perhaps it should return an error.\nexport interface VerificationEndedToken {\n  verification_ended_at?: string;\n  verification_ends_at?: string;\n}\n\n// From testQuality App/Models/AccessToken\nexport interface AccessToken\n  extends SubscriptionEntitlement,\n    VerificationEndedToken {\n  access_token: string;\n  beta_mode?: boolean;\n  expires_in: number;\n  client_id?: number;\n  client_name?: string;\n  client_type?: number;\n  failures?: ReturnTokenFailure[];\n  github_open_source_subscription_invalid?: boolean;\n  refresh_token: string;\n  subscription_ended_at?: string;\n  token_type: string;\n  trial_ended_at?: string;\n  user_id?: number;\n  verification_ends_at?: string;\n}\n\nexport interface ReturnTokenFailure {\n  project_id?: number;\n  project_name?: string;\n  message: string;\n}\n\n// TODO @david\n//\n// There are 2 places where setToken is being called with an object that does\n// not follow AccessToken type\n// 1. sdk Auth.setPat -> sets { access_token }\n//   - this method *is not* currently used in web/sdk/cli\n// 2. CLI Command.reLogin -> sets { access_token, expires_at }\n//\n// This forces us to set all fixed properties defined in testQuality as optional\n// Perhaps we could have a separate type, ie. PersonalAccessToken\n// and have ReturnToken = AccessToken | PersonalAccessToken\n//\n// There is a third scenario whereby the api will return a token as\n// { verification_ended_at, verification_ends_at }\n// see VerificationEndedToken comment\n\nexport interface ReturnToken extends Partial<AccessToken> {\n  access_token: string; // mandatory in both token types\n  // From Unknown\n  expires_at?: string; // added in both SDK Auth.setToken / CLI Command.reLogin\n  message?: string;\n  url?: string;\n}\n\nexport enum ClientTypeEnum {\n  TestManagement = 1,\n  Internal = 2,\n  TestPlan = 3,\n  Trial = 4,\n}\n"]}