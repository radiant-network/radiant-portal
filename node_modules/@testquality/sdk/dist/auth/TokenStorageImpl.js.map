{"version":3,"file":"TokenStorageImpl.js","sourceRoot":"","sources":["../../src/auth/TokenStorageImpl.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,MAAa,gBAAgB;IAI3B,YAA6B,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;IAAG,CAAC;IAEzD,WAAW;;YACtB,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBACzD,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aAC9D;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;KAAA;IAEY,QAAQ;;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBACzC,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACxD;YACD,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;KAAA;IAEY,QAAQ,CACnB,KAAmB,EACnB,QAAkB;;YAElB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YACvD,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;iBAClD;qBAAM;oBACL,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;iBACtD;gBACD,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7D;YACD,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;KAAA;CACF;AApCD,4CAoCC","sourcesContent":["import { type TokenStorage } from '../TokenStorage';\nimport { type PersistentStorage } from '../PersistentStorage';\nimport { type ReturnToken } from './ReturnToken';\n\nexport class TokenStorageImpl implements TokenStorage {\n  private token?: ReturnToken;\n  private remember?: boolean;\n\n  constructor(private readonly persistentStorage?: PersistentStorage) {}\n\n  public async getRemember(): Promise<boolean | undefined> {\n    if (this.remember === undefined && this.persistentStorage) {\n      this.remember = await this.persistentStorage.get('remember');\n    }\n    return this.remember;\n  }\n\n  public async getToken(): Promise<ReturnToken | undefined> {\n    if (!this.token && this.persistentStorage) {\n      this.token = await this.persistentStorage.get('token');\n    }\n    return this.token;\n  }\n\n  public async setToken(\n    token?: ReturnToken,\n    remember?: boolean,\n  ): Promise<ReturnToken | undefined> {\n    this.token = token;\n    this.remember = remember ?? (await this.getRemember());\n    if (this.persistentStorage) {\n      if (this.remember) {\n        await this.persistentStorage.set('token', token);\n      } else {\n        await this.persistentStorage.set('token', undefined);\n      }\n      await this.persistentStorage.set('remember', this.remember);\n    }\n    return this.token;\n  }\n}\n"]}