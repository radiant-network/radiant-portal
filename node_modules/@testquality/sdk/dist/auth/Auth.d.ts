import { type AxiosResponse, type AxiosRequestConfig } from 'axios';
import { type ClientSdk } from '../ClientSdk';
import { type TokenStorage } from '../TokenStorage';
import { type ReturnToken } from './ReturnToken';
export declare enum AuthCallbackActions {
    Connected = 1,
    Refreshed = 2,
    Unauthorized = 3,
    SubscriptionExpired = 4,
    TrialExpired = 5,
    TokenUpdated = 6
}
export type AuthCallback = (action: AuthCallbackActions, token?: ReturnToken, me?: Auth) => Promise<void>;
export interface SignUpWithEmailData {
    email: string;
    password: string;
    recaptcha: string;
    type?: number;
}
export declare class Auth {
    private readonly tokenStorage;
    private readonly client;
    private authCallback?;
    static validateTokenPayload(token: any): void;
    static urlRequiresAuth(url?: string): boolean;
    private checkSubscriptionRequest?;
    private disableHandler;
    id: number;
    private refreshRequest?;
    private remember;
    constructor(tokenStorage: TokenStorage, client: ClientSdk, authCallback?: AuthCallback | undefined);
    setAuthCallback(authCallback?: AuthCallback): void;
    passwordRecovery(email: string): Promise<AxiosResponse<any, any>>;
    passwordReset(email: string, password: string, token: string): Promise<AxiosResponse<ReturnToken, any>>;
    login(username: string, password: string, remember?: boolean, share?: string, properties?: any): Promise<ReturnToken>;
    loginSSO(username: string, callbackUrl: string, share?: string): Promise<{
        redirect_url: string;
    }>;
    loginGithub(callbackUrl: string, verificationToken?: string, appVersion?: number, type?: number, share?: string): Promise<{
        redirect_url: string;
    }>;
    loginGoogle(callbackUrl: string, verificationToken?: string, type?: number, share?: string): Promise<{
        redirect_url: string;
    }>;
    loginAtlassian(callbackUrl: string, type?: number, share?: string): Promise<{
        redirect_url: string;
    }>;
    performLogin(token: ReturnToken): Promise<ReturnToken>;
    logout(): Promise<ReturnToken | undefined>;
    register(email: string, password: string, recaptcha: string): Promise<AxiosResponse<ReturnToken, any>>;
    registerSite(email: string, password: string, site: string, recaptcha: string, type?: number): Promise<AxiosResponse<any, any>>;
    signUpWithEmail(data: SignUpWithEmailData, config?: AxiosRequestConfig<SignUpWithEmailData>): Promise<ReturnToken>;
    refresh(refreshToken?: string): Promise<ReturnToken | undefined>;
    getAccessToken(): Promise<string | undefined>;
    private checkSubscription;
    refreshTokenIfSubscriptionStaled(): Promise<ReturnToken | undefined>;
    isLoggedIn(): Promise<boolean>;
    getRemember(): Promise<boolean | undefined>;
    getToken(): Promise<ReturnToken | undefined>;
    setToken(token?: ReturnToken, remember?: boolean): Promise<ReturnToken | undefined>;
    setPat(pat: string): Promise<this>;
    isExpired(token?: ReturnToken): boolean;
    isSubscriptionExpired(token?: ReturnToken): boolean;
    isTrialExpired(token?: ReturnToken): boolean;
    protected handleExpired(token?: ReturnToken): Promise<undefined>;
    protected addAuthorizationHeaderInterceptor(): void;
    protected addUnauthorizedInterceptor(): void;
    protected addInterceptors(): void;
}
//# sourceMappingURL=Auth.d.ts.map