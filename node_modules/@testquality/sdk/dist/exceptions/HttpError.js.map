{"version":3,"file":"HttpError.js","sourceRoot":"","sources":["../../src/exceptions/HttpError.ts"],"names":[],"mappings":";;;AASA,MAAa,SAAU,SAAQ,KAAK;IAQlC,YACE,OAAe,EACf,EAAW,EACX,KAAc,EACd,MAAe,EACf,IAAa,EACb,GAAY,EACZ,KAAe;QAEf,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,gDAAgD;QAChD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CACF;AA1BD,8BA0BC","sourcesContent":["export interface Trace {\n  function: string; // The current function name.\n  line: number; // The current line number.\n  file: string; // The current file name.\n  class: string; // The current class name.\n  type: string; // The current call type. If a method call, \"->\" is returned. If a static method call, \"::\" is returned. If a function call, nothing is returned.\n  args: any[]; // If inside a function, this lists the functions arguments. If inside an included file, this lists the included file name(s).\n}\n\nexport class HttpError extends Error {\n  public id?: string;\n  public title?: string;\n  public status?: number;\n  public code?: string;\n  public url?: string;\n  public trace?: Trace[];\n\n  constructor(\n    message: string,\n    id?: string,\n    title?: string,\n    status?: number,\n    code?: string,\n    url?: string,\n    trace?: Trace[],\n  ) {\n    super(message);\n    // super wipes out passed in data, so must reset\n    this.id = id;\n    this.title = title;\n    this.status = status;\n    this.code = code;\n    this.url = url;\n    this.trace = trace;\n  }\n}\n"]}