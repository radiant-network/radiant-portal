"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.showNotificationError = exports.getHttpResponse = exports.VALIDATION_FAILED_EXCEPTION = exports.USER_NOT_FOUND_EXCEPTION = exports.USER_NOT_AUTHORIZED_EXCEPTION = exports.USER_CREATE_EXCEPTION = exports.UPDATE_EXCEPTION = exports.RUN_CREATE_EXCEPTION = exports.RESOURCE_STORE_FAILED_EXCEPTION = exports.PRIMARY_KEY_VIOLATION_EXCEPTION = exports.PASSWORD_STRENGTH_EXCEPTION = exports.NO_TOKEN_EXCEPTION = exports.MAIL_CHIMP_EXCEPTION = exports.INVALID_TOKEN_EXCEPTION = exports.INTEGRATION_JIRA_EXCEPTION = exports.INTEGRATION_EXCEPTION = exports.INTEGRATION_AUTH_EXCEPTION = exports.GITHUB_PURCHASE_ALREADY_ALLOCATED_EXCEPTION = exports.CREATED_BY_INMUTABLE_EXCEPTION = exports.CLIENT_ID_INMUTABLE_EXCEPTION = exports.CHANGE_PASSWORD_FAILURE_EXCEPTION = exports.EXPIRED_USER_EXCEPTION = exports.EMAIL_VERIFICATION_ERROR = exports.VALIDATION_ERROR = exports.UNAUTHORIZED = exports.REFRESH_TOKEN_ERROR = exports.NO_REFRESH_TOKEN = exports.NO_ACCESS_TOKEN = exports.UNKNOWN_ERROR = void 0;
const HttpError_1 = require("./HttpError");
const ClientSdk_1 = require("../ClientSdk");
exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';
exports.NO_ACCESS_TOKEN = 'NO_ACCESS_TOKEN';
exports.NO_REFRESH_TOKEN = 'NO_REFRESH_TOKEN';
exports.REFRESH_TOKEN_ERROR = 'REFRESH_TOKEN_ERROR';
exports.UNAUTHORIZED = 'UNAUTHORIZED';
exports.VALIDATION_ERROR = 'VALIDATION_ERROR';
exports.EMAIL_VERIFICATION_ERROR = 'EMAIL_VERIFICATION_ERROR';
exports.EXPIRED_USER_EXCEPTION = 'EXPIRED_USER_EXCEPTION';
exports.CHANGE_PASSWORD_FAILURE_EXCEPTION = 'CHANGE_PASSWORD_FAILURE_EXCEPTION';
exports.CLIENT_ID_INMUTABLE_EXCEPTION = 'CLIENT_ID_INMUTABLE_EXCEPTION';
exports.CREATED_BY_INMUTABLE_EXCEPTION = 'CREATED_BY_INMUTABLE_EXCEPTION';
exports.GITHUB_PURCHASE_ALREADY_ALLOCATED_EXCEPTION = 'GITHUB_PURCHASE_ALREADY_ALLOCATED_EXCEPTION';
exports.INTEGRATION_AUTH_EXCEPTION = 'INTEGRATION_AUTH_EXCEPTION';
exports.INTEGRATION_EXCEPTION = 'INTEGRATION_EXCEPTION';
exports.INTEGRATION_JIRA_EXCEPTION = 'INTEGRATION_JIRA_EXCEPTION';
exports.INVALID_TOKEN_EXCEPTION = 'INVALID_TOKEN_EXCEPTION';
exports.MAIL_CHIMP_EXCEPTION = 'MAIL_CHIMP_EXCEPTION';
exports.NO_TOKEN_EXCEPTION = 'NO_TOKEN_EXCEPTION';
exports.PASSWORD_STRENGTH_EXCEPTION = 'PASSWORD_STRENGTH_EXCEPTION';
exports.PRIMARY_KEY_VIOLATION_EXCEPTION = 'PRIMARY_KEY_VIOLATION_EXCEPTION';
exports.RESOURCE_STORE_FAILED_EXCEPTION = 'RESOURCE_STORE_FAILED_EXCEPTION';
exports.RUN_CREATE_EXCEPTION = 'RUN_CREATE_EXCEPTION';
exports.UPDATE_EXCEPTION = 'UPDATE_EXCEPTION';
exports.USER_CREATE_EXCEPTION = 'USER_CREATE_EXCEPTION';
exports.USER_NOT_AUTHORIZED_EXCEPTION = 'USER_NOT_AUTHORIZED_EXCEPTION';
exports.USER_NOT_FOUND_EXCEPTION = 'USER_NOT_FOUND_EXCEPTION';
exports.VALIDATION_FAILED_EXCEPTION = 'VALIDATION_FAILED_EXCEPTION';
function getHttpResponse(response) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (response === undefined || response.status === -1) {
        if (response === undefined || response.data === null) {
            return new HttpError_1.HttpError('Oops, Could not obtain data from server due to network problem.', exports.UNKNOWN_ERROR, 'Network Error', 500, undefined, (_a = response === null || response === void 0 ? void 0 : response.config) === null || _a === void 0 ? void 0 : _a.url);
        }
    }
    else if (response.status === 400 && ((_b = response.data) === null || _b === void 0 ? void 0 : _b.validation_errors)) {
        return new HttpError_1.HttpError(getMessage(response), exports.VALIDATION_ERROR, response.data.validation_errors, response.status, response.data.code, (_c = response === null || response === void 0 ? void 0 : response.config) === null || _c === void 0 ? void 0 : _c.url, response.data.trace);
    }
    return new HttpError_1.HttpError(getMessage(response), (_d = response === null || response === void 0 ? void 0 : response.data) === null || _d === void 0 ? void 0 : _d.id, (_e = response === null || response === void 0 ? void 0 : response.data) === null || _e === void 0 ? void 0 : _e.title, response === null || response === void 0 ? void 0 : response.status, (_f = response === null || response === void 0 ? void 0 : response.data) === null || _f === void 0 ? void 0 : _f.code, (_g = response === null || response === void 0 ? void 0 : response.config) === null || _g === void 0 ? void 0 : _g.url, (_h = response === null || response === void 0 ? void 0 : response.data) === null || _h === void 0 ? void 0 : _h.trace);
}
exports.getHttpResponse = getHttpResponse;
function showNotificationError(newError, client = ClientSdk_1._client) {
    if (!client) {
        throw new Error('No global client has been set up');
    }
    client.errorHandler(newError);
    // can't return Promise.reject here as it will trigger unhandled rejection
    return newError;
}
exports.showNotificationError = showNotificationError;
function getMessage(error) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!error)
        return 'Trouble communicating with server, please try again later.';
    let message = '';
    if (error.exception && !error.data) {
        error.data = error.exception;
    }
    if (error.status === 404 && !((_a = error === null || error === void 0 ? void 0 : error.data) === null || _a === void 0 ? void 0 : _a.message)) {
        message = 'Resource Not Found.';
    }
    else if (error.status === -1 && error.data === null) {
        message = 'Oops, Could not obtain data from server due to network problem.';
    }
    else if (((_b = error.data) === null || _b === void 0 ? void 0 : _b.code) === '23505') {
        // duplicate
        error.data.title = 'Duplicate';
        message = 'Name already exists, try a different name.';
    }
    else if ((_d = (_c = error.data) === null || _c === void 0 ? void 0 : _c.validation_errors) === null || _d === void 0 ? void 0 : _d.email) {
        if (Array.isArray(error.data.validation_errors.email)) {
            message = error.data.validation_errors.email.join(', \n');
        }
        else {
            message = error.data.validation_errors.email;
        }
    }
    else if ((_e = error.data) === null || _e === void 0 ? void 0 : _e.message) {
        if (typeof error.data.message === 'string') {
            message = error.data.message;
        }
        else if (typeof error.data.message === 'object') {
            for (const key in error.data.message) {
                if (Object.prototype.hasOwnProperty.call(error.data.message, key)) {
                    if (Array.isArray(error.data.message[key])) {
                        message = error.data.message[key].join(', \n');
                    }
                    else {
                        message = error.data.message[key];
                    }
                }
            }
        }
        else {
            message = JSON.stringify(error.data.message);
        }
        if (error.data.errors) {
            message += Object.entries(error.data.errors)
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                .map(([, value]) => `\n${value}`)
                .join('');
        }
    }
    else if ((_f = error.data) === null || _f === void 0 ? void 0 : _f.error) {
        message = error.data.error;
    }
    else if ((_g = error.data) === null || _g === void 0 ? void 0 : _g.detail) {
        message = error.data.detail;
    }
    else if (error.statusText) {
        message = error.statusText;
    }
    else if (error.message) {
        message = error.message;
    }
    else if (error.status === 401) {
        message = 'Failed to authenticate.';
    }
    else {
        message = 'Something went wrong';
    }
    return message;
}
//# sourceMappingURL=handleHttpError.js.map