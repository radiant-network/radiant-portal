{"version":3,"file":"registerJira.js","sourceRoot":"","sources":["../../src/integration/registerJira.ts"],"names":[],"mappings":";;;AAAA,4CAA+D;AAC/D,4CAAuC;AAqBhC,MAAM,YAAY,GAAG,CAC1B,IAAkC,EAClC,WAAuD,EACxB,EAAE;;IACjC,MAAM,MAAM,GAA8C;QACxD,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,gBAAgB;QACzC,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;QAC3B,IAAI;KACL,CAAC;IAEF,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;QACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAuB,MAAM,CAAC;QAC1D,CAAC,CAAC,IAAA,qBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;AACR,CAAC,CAAC;AAjBW,QAAA,YAAY,gBAiBvB","sourcesContent":["import { getResponse, type QueryParams } from '../gen/actions';\nimport { _client } from '../ClientSdk';\nimport { type JiraServerInfo } from './JiraServerInfo';\n\nexport interface RegisterJiraPayload {\n  user: string;\n  accountId: string;\n  clientKey: string;\n  accessToken: string;\n  localBaseUrl: string;\n  serverInfo: JiraServerInfo;\n}\n\nexport interface RegisterJiraResponse {\n  access_token: string;\n  expires_at: string;\n  user_id: number;\n  client_id: number;\n  integration_id: number;\n  org: string;\n}\n\nexport const registerJira = (\n  data: Partial<RegisterJiraPayload>,\n  queryParams?: QueryParams<Partial<RegisterJiraPayload>>,\n): Promise<RegisterJiraResponse> => {\n  const config: QueryParams<Partial<RegisterJiraPayload>> = {\n    method: 'post',\n    url: queryParams?.url ?? '/register_jira',\n    params: queryParams?.params,\n    data,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<RegisterJiraResponse>(config)\n    : getResponse<RegisterJiraResponse, Partial<RegisterJiraPayload>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n"]}