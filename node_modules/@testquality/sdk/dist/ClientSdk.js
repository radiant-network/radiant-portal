"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalClient = exports.setGlobalClient = exports.ClientSdk = exports._client = void 0;
const axios_1 = __importDefault(require("axios"));
const debug_1 = __importDefault(require("debug"));
const common_1 = require("./common");
const auth_1 = require("./auth");
const debug = (0, debug_1.default)('tq:sdk:client');
class ClientSdk {
    constructor(options) {
        var _a, _b, _c, _d;
        this.id = Math.random();
        this.errorHandlerDefault = (newError) => {
            this.logger.error(newError.stack ? newError.stack : newError.message, newError.title, newError.status, newError.code, newError.trace);
        };
        this.errorHandler = this.errorHandlerDefault;
        debug('constructor', { id: this.id, versions: 1, options });
        const baseUrl = (_a = options.baseUrl) !== null && _a !== void 0 ? _a : 'https://api.testquality.com';
        this.logger = (_b = options.logger) !== null && _b !== void 0 ? _b : new common_1.EmptyLogger();
        this.api =
            (_c = options.api) !== null && _c !== void 0 ? _c : axios_1.default.create({
                baseURL: `${baseUrl}/api`,
                timeout: 1000000,
                headers: {
                    'Content-Type': 'application/json',
                    Accept: 'application/json',
                },
                transformResponse: [
                    function transformResponse(data, headers) {
                        if (headers['content-type'] === 'application/json') {
                            return JSON.parse(data, (_, value) => value === null ? undefined : value);
                        }
                        return data;
                    },
                ],
            });
        this.apiWorker = options.apiWorker;
        this.clientId = options.clientId;
        this.clientSecret = options.clientSecret;
        this.debug = !!options.debug;
        if (options.errorHandler) {
            this.errorHandler = options.errorHandler;
        }
        this.persistentStorage = options.persistentStorage;
        this.tokenStorage =
            (_d = options.tokenStorage) !== null && _d !== void 0 ? _d : new auth_1.TokenStorageImpl(options.persistentStorage);
        this.auth = new auth_1.Auth(this.tokenStorage, this, options.authCallback);
    }
    getAuth(
    /**
     * @deprecated authCallback is set in constructor
     */
    authCallback) {
        if (authCallback) {
            console.warn('Param authCallback has been deprecated since version 1.12.11');
        }
        return this.auth;
    }
    /**
     * @deprecated since version 1.12.11
     */
    setAuth() {
        console.warn('Method has been deprecated since version 1.12.11');
        return this.getAuth();
    }
    setErrorHandler(errorHandler) {
        this.errorHandler = errorHandler;
    }
    setAPIWorker(apiWorker) {
        debug('setAPIWorker');
        if (!this.apiWorker) {
            this.apiWorker = apiWorker;
        }
    }
}
exports.ClientSdk = ClientSdk;
function setGlobalClient(client) {
    exports._client = client;
}
exports.setGlobalClient = setGlobalClient;
function getGlobalClient() {
    if (!exports._client) {
        throw new Error('No global client has been set up');
    }
    return exports._client;
}
exports.getGlobalClient = getGlobalClient;
//# sourceMappingURL=ClientSdk.js.map