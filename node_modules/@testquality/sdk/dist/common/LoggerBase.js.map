{"version":3,"file":"LoggerBase.js","sourceRoot":"","sources":["../../src/common/LoggerBase.ts"],"names":[],"mappings":";;;AAEA;;;;;;;;;GASG;AACH,MAAsB,UAAU;IAGvB,MAAM,CAAC,gBAAgB,CAAC,QAAgB;QAC7C,IAAI,QAAQ,EAAE;YACZ,MAAM,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC/B,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC;YACtB,MAAM,QAAQ,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YAC7B,OAAO,QAAQ,CAAC;SACjB;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAID,YAAY,KAAc;QACxB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,gBAAgB,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,UAAU,CAAC,aAAa,CAAC,CAAC;IAC9E,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;QAC1C,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IACtC,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;QACzC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IACrC,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;QACzC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;QAC1C,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IACtC,CAAC;IAIS,WAAW;QACnB,OAAO,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3D,CAAC;;AAvCH,gCAwCC;AAvCe,wBAAa,GAAG,KAAK,CAAC","sourcesContent":["import { type LoggerInterface } from './LoggerInterface';\n\n/**\n * core.Log\n * ------------------------------------------------\n *\n * This is the main LoggerBase Object. You can create a scope logger\n * or directly use the static log methods.\n *\n * By Default it uses the debug-adapter, but you are able to change\n * this in the start up process in the core/index.ts file.\n */\nexport abstract class LoggerBase implements LoggerInterface {\n  public static DEFAULT_SCOPE = 'app';\n\n  public static parsePathToScope(filepath: string): string {\n    if (filepath) {\n      const sp = filepath.split('/');\n      const len = sp.length;\n      const filename = sp[len - 1];\n      return filename;\n    }\n    return filepath;\n  }\n\n  protected scope?: string;\n\n  constructor(scope?: string) {\n    this.scope = LoggerBase.parsePathToScope(scope ?? LoggerBase.DEFAULT_SCOPE);\n  }\n\n  public debug(message: string, ...args: any[]): void {\n    this.log('debug', message, ...args);\n  }\n\n  public info(message: string, ...args: any[]): void {\n    this.log('info', message, ...args);\n  }\n\n  public warn(message: string, ...args: any[]): void {\n    this.log('warn', message, ...args);\n  }\n\n  public error(message: string, ...args: any[]): void {\n    this.log('error', message, ...args);\n  }\n\n  protected abstract log(level: string, message: string, ...meta: any[]): void;\n\n  protected formatScope(): string {\n    return this.scope !== undefined ? `[${this.scope}]` : '';\n  }\n}\n"]}