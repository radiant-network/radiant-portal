{"version":3,"file":"BatchService.js","sourceRoot":"","sources":["../../../src/services/http/BatchService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (C) 2020 BitModern, Inc - All Rights Reserved\n */\n/* eslint-disable import/no-cycle */\n\nimport * as querystring from 'querystring';\nimport { type AxiosError, type AxiosResponse, type Method } from 'axios';\nimport {\n  type QueryParams,\n  type QueryParamsWithList,\n  hasListProperty,\n} from '../../gen/actions/QueryParams';\nimport { getHttpResponse } from '../../exceptions/handleHttpError';\nimport { _client } from '../../ClientSdk';\n\nexport interface BatchRequest {\n  method: Method;\n  endpoint: string;\n  body?: any;\n}\n\nexport interface BatchResponse {\n  method: string;\n  endpoint: string;\n  status?: number;\n  statusText?: string;\n  exception?: any;\n  data: any;\n  processed?: boolean;\n  config?: { url?: string };\n}\nexport interface BatchResponses {\n  responses: BatchResponse[][];\n}\n\ninterface BatchRequestContainer {\n  request: BatchRequest;\n  resolve: (value?: any) => void;\n  reject: (reason?: any) => void;\n}\n\nexport class BatchService {\n  private readonly batchContainers: BatchRequestContainer[] = [];\n\n  public addBatch<T>(request: QueryParams | QueryParamsWithList) {\n    return new Promise<T>((resolve, reject) => {\n      const paramsString = request.params\n        ? `?${querystring.stringify(request.params)}`\n        : '';\n      const batchRequestContainer: BatchRequestContainer = {\n        request: {\n          method: request.method\n            ? (request.method.toUpperCase() as Method)\n            : 'GET',\n          endpoint: `/api${request.url}${paramsString}`,\n          body: hasListProperty(request) ? request.list : request.data,\n        },\n        resolve,\n        reject,\n      };\n      this.batchContainers.push(batchRequestContainer);\n    });\n  }\n\n  public executeBatch(client = _client): Promise<BatchResponses> {\n    if (!client) {\n      throw new Error('No global client has been set up');\n    }\n\n    const requests = this.batchContainers.map((c) => c.request);\n    if (requests.length === 0) {\n      return Promise.resolve({ responses: [] });\n    }\n\n    return new Promise<BatchResponses>((resolve, reject) => {\n      let post;\n      if (client.apiWorker) {\n        post = client.apiWorker.postBatch(requests);\n      } else {\n        post = client.api.post<BatchResponses>('/batch', { requests });\n      }\n      post.then(\n        (response) => {\n          this.handleBatchResponse(response, resolve, reject);\n        },\n        (error) => {\n          this.failAll(error);\n          reject(error);\n        },\n      );\n    });\n  }\n\n  private handleBatchResponse(\n    response: AxiosResponse<BatchResponses>,\n    resolve: (value: BatchResponses | PromiseLike<BatchResponses>) => void,\n    reject: (reason?: any) => void,\n  ) {\n    if (!response?.data?.responses) {\n      const error = new Error('Batch has no data');\n      this.failAll(error);\n      reject(error);\n      return;\n    }\n\n    const responses = response.data.responses[0];\n    this.batchContainers.forEach((batchContainer) => {\n      const res = responses.find(\n        (r) =>\n          r.method === batchContainer.request.method &&\n          r.endpoint === batchContainer.request.endpoint &&\n          !r.processed,\n      );\n\n      if (res) {\n        res.processed = true;\n        if (res.status === 200 || res.status === 201) {\n          batchContainer.resolve(res.data);\n        } else {\n          res.config = {\n            url: `${batchContainer.request.method}: ${batchContainer.request.endpoint}`,\n          };\n          batchContainer.reject(\n            getHttpResponse(res as unknown as AxiosResponse),\n          );\n        }\n      } else {\n        batchContainer.reject({\n          status: 500,\n          statusText:\n            `Endpoint mismatch, req: ${batchContainer.request.method}` +\n            `: ${batchContainer.request.endpoint}`,\n        });\n      }\n    });\n    resolve(response.data);\n  }\n\n  private failAll(error: AxiosError | Error) {\n    this.batchContainers.forEach((c) => {\n      if ('response' in error) {\n        c.reject(error.response);\n      } else {\n        c.reject(error);\n      }\n    });\n  }\n}\n"]}