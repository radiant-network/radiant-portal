"use strict";
/**
 * Copyright (C) 2020 BitModern, Inc - All Rights Reserved
 */
/* eslint-disable import/no-cycle */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchService = void 0;
const querystring = __importStar(require("querystring"));
const QueryParams_1 = require("../../gen/actions/QueryParams");
const handleHttpError_1 = require("../../exceptions/handleHttpError");
const ClientSdk_1 = require("../../ClientSdk");
class BatchService {
    constructor() {
        this.batchContainers = [];
    }
    addBatch(request) {
        return new Promise((resolve, reject) => {
            const paramsString = request.params
                ? `?${querystring.stringify(request.params)}`
                : '';
            const batchRequestContainer = {
                request: {
                    method: request.method
                        ? request.method.toUpperCase()
                        : 'GET',
                    endpoint: `/api${request.url}${paramsString}`,
                    body: (0, QueryParams_1.hasListProperty)(request) ? request.list : request.data,
                },
                resolve,
                reject,
            };
            this.batchContainers.push(batchRequestContainer);
        });
    }
    executeBatch(client = ClientSdk_1._client) {
        if (!client) {
            throw new Error('No global client has been set up');
        }
        const requests = this.batchContainers.map((c) => c.request);
        if (requests.length === 0) {
            return Promise.resolve({ responses: [] });
        }
        return new Promise((resolve, reject) => {
            let post;
            if (client.apiWorker) {
                post = client.apiWorker.postBatch(requests);
            }
            else {
                post = client.api.post('/batch', { requests });
            }
            post.then((response) => {
                this.handleBatchResponse(response, resolve, reject);
            }, (error) => {
                this.failAll(error);
                reject(error);
            });
        });
    }
    handleBatchResponse(response, resolve, reject) {
        var _a;
        if (!((_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.responses)) {
            const error = new Error('Batch has no data');
            this.failAll(error);
            reject(error);
            return;
        }
        const responses = response.data.responses[0];
        this.batchContainers.forEach((batchContainer) => {
            const res = responses.find((r) => r.method === batchContainer.request.method &&
                r.endpoint === batchContainer.request.endpoint &&
                !r.processed);
            if (res) {
                res.processed = true;
                if (res.status === 200 || res.status === 201) {
                    batchContainer.resolve(res.data);
                }
                else {
                    res.config = {
                        url: `${batchContainer.request.method}: ${batchContainer.request.endpoint}`,
                    };
                    batchContainer.reject((0, handleHttpError_1.getHttpResponse)(res));
                }
            }
            else {
                batchContainer.reject({
                    status: 500,
                    statusText: `Endpoint mismatch, req: ${batchContainer.request.method}` +
                        `: ${batchContainer.request.endpoint}`,
                });
            }
        });
        resolve(response.data);
    }
    failAll(error) {
        this.batchContainers.forEach((c) => {
            if ('response' in error) {
                c.reject(error.response);
            }
            else {
                c.reject(error);
            }
        });
    }
}
exports.BatchService = BatchService;
//# sourceMappingURL=BatchService.js.map