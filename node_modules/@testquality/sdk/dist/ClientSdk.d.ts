import { type AxiosInstance } from 'axios';
import { type PersistentStorage } from './PersistentStorage';
import { type APIWorkerInterface, type LoggerInterface } from './common';
import { type Options } from './Options';
import { Auth, type AuthCallback } from './auth';
import { type HttpError } from './exceptions';
import { type TokenStorage } from './TokenStorage';
export declare let _client: ClientSdk | undefined;
export declare class ClientSdk {
    private readonly auth;
    logger: LoggerInterface;
    api: AxiosInstance;
    clientId: string;
    clientSecret: string;
    debug: boolean;
    tokenStorage: TokenStorage;
    persistentStorage?: PersistentStorage;
    apiWorker?: APIWorkerInterface;
    id: number;
    errorHandlerDefault: (newError: HttpError) => void;
    errorHandler: (newError: HttpError) => void;
    constructor(options: Options);
    getAuth(
    /**
     * @deprecated authCallback is set in constructor
     */
    authCallback?: AuthCallback): Auth;
    /**
     * @deprecated since version 1.12.11
     */
    setAuth(): Auth;
    setErrorHandler(errorHandler: (newError: HttpError) => void): void;
    setAPIWorker(apiWorker: APIWorkerInterface): void;
}
export declare function setGlobalClient(client?: ClientSdk): void;
export declare function getGlobalClient(): ClientSdk;
//# sourceMappingURL=ClientSdk.d.ts.map