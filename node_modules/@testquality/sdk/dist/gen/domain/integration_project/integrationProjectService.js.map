{"version":3,"file":"integrationProjectService.js","sourceRoot":"","sources":["../../../../src/gen/domain/integration_project/integrationProjectService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (C) 2021 BitModern, Inc - All Rights Reserved\n */\n\nimport { _client } from '../../../ClientSdk';\nimport { getResponse } from '../../actions/getResponse';\nimport { chunkArray } from '../../actions/chunkArray';\nimport type {\n  QueryParams,\n  QueryParamsWithList,\n} from '../../actions/QueryParams';\nimport type { MessageResponse } from '../../actions/MessageResponse';\nimport type { ResourceList } from '../../models/ResourceList';\nimport type { IntegrationProject } from './IntegrationProject';\nimport type { IntegrationProjectApi } from './IntegrationProjectApi';\n\nexport const integrationProjectDetach = (\n  data: Partial<IntegrationProject>,\n  queryParams?: QueryParams<Partial<IntegrationProject>>,\n): Promise<MessageResponse> => {\n  if (data.id === undefined) {\n    return Promise.reject(new Error('Must supply id'));\n  }\n  const config: QueryParams<Partial<IntegrationProject>> = {\n    method: 'delete',\n    url: `/integration_project/${data.id}`,\n    params: queryParams?.params,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<MessageResponse>(config)\n    : getResponse<MessageResponse, Partial<IntegrationProject>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const integrationProjectDeleteMany = (\n  data: (Partial<IntegrationProject> & { id: number })[],\n  queryParams?: QueryParamsWithList<\n    Partial<IntegrationProject & { id: number }>\n  >,\n): Promise<{ count: number }[]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<\n        Partial<IntegrationProject> & { id: number }\n      > = {\n        method: 'post',\n        url: `/integration_project/delete`,\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<{ count: number }>(config)\n        : getResponse<\n            { count: number },\n            Partial<IntegrationProject> & { id: number }\n          >(queryParams?.api ?? _client?.api, config);\n    }),\n  );\n};\n\nexport const integrationProjectUpdateOne = (\n  id: number,\n  data: Partial<IntegrationProject>,\n  queryParams?: QueryParams<Partial<IntegrationProject>>,\n): Promise<IntegrationProject> => {\n  const config: QueryParams<Partial<IntegrationProject>> = {\n    method: 'put',\n    url: `/integration_project/${id}`,\n    params: queryParams?.params,\n    data,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<IntegrationProject>(config)\n    : getResponse<IntegrationProject, Partial<IntegrationProject>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const integrationProjectUpdateMany = (\n  data: (Partial<IntegrationProject> & { id: number })[],\n  queryParams?: QueryParamsWithList<\n    Partial<IntegrationProject> & { id: number }\n  >,\n): Promise<IntegrationProject[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<\n        Partial<IntegrationProject> & { id: number }\n      > = {\n        method: 'post',\n        url: queryParams?.url ?? `/integration_project`,\n        params: queryParams?.params,\n        list: chunk,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<IntegrationProject[]>(config)\n        : getResponse<\n            IntegrationProject[],\n            Partial<IntegrationProject> & { id: number }\n          >(queryParams?.api ?? _client?.api, config);\n    }),\n  );\n};\n\nexport const integrationProjectCreateOne = (\n  data: Partial<IntegrationProject>,\n  queryParams?: QueryParams<Partial<IntegrationProject>>,\n): Promise<IntegrationProject> => {\n  const config: QueryParams<Partial<IntegrationProject>> = {\n    method: 'post',\n    url: queryParams?.url ?? `/integration_project`,\n    params: queryParams?.params,\n    data,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<IntegrationProject>(config)\n    : getResponse<IntegrationProject, Partial<IntegrationProject>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const integrationProjectCreateMany = (\n  data: Partial<IntegrationProject>[],\n  queryParams?: QueryParamsWithList<Partial<IntegrationProject>>,\n): Promise<IntegrationProject[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<IntegrationProject>> = {\n        method: 'post',\n        url: queryParams?.url ?? `/integration_project`,\n        params: queryParams?.params,\n        list: chunk,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<IntegrationProject[]>(config)\n        : getResponse<IntegrationProject[], Partial<IntegrationProject>>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n\nexport const integrationProjectGetMany = (\n  queryParams?: QueryParams<Partial<IntegrationProject>>,\n): Promise<ResourceList<IntegrationProjectApi>> => {\n  const config: QueryParams<Partial<IntegrationProject>> = {\n    method: 'get',\n    url: queryParams?.url ?? `/integration_project`,\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<ResourceList<IntegrationProjectApi>>(config)\n    : getResponse<\n        ResourceList<IntegrationProjectApi>,\n        Partial<IntegrationProject>\n      >(queryParams?.api ?? _client?.api, config);\n};\n\nexport const integrationProjectGetOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<IntegrationProject>>,\n): Promise<IntegrationProjectApi> => {\n  const config: QueryParams<Partial<IntegrationProject>> = {\n    method: 'get',\n    url: `${queryParams?.url ?? `/integration_project/${id}`}`,\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<IntegrationProjectApi>(config)\n    : getResponse<IntegrationProjectApi, Partial<IntegrationProject>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n"]}