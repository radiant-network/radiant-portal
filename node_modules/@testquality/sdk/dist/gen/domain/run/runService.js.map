{"version":3,"file":"runService.js","sourceRoot":"","sources":["../../../../src/gen/domain/run/runService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (C) 2021 BitModern, Inc - All Rights Reserved\n */\n\nimport { _client } from '../../../ClientSdk';\nimport { getResponse } from '../../actions/getResponse';\nimport { chunkArray } from '../../actions/chunkArray';\nimport type {\n  QueryParams,\n  QueryParamsWithList,\n} from '../../actions/QueryParams';\nimport type { MessageResponse } from '../../actions/MessageResponse';\nimport type { ResourceList } from '../../models/ResourceList';\nimport { RunRoute } from '../../routes/Routes';\nimport type { Run } from './Run';\nimport type { RunApi } from './RunApi';\n\nexport const runGetMany = (\n  queryParams?: QueryParams<Partial<Run>>,\n): Promise<ResourceList<RunApi>> => {\n  const config: QueryParams<Partial<Run>> = {\n    method: 'get',\n    url: queryParams?.url ?? RunRoute(),\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<ResourceList<RunApi>>(config)\n    : getResponse<ResourceList<RunApi>, Partial<Run>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const runGetOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<Run>>,\n): Promise<RunApi> => {\n  const config: QueryParams<Partial<Run>> = {\n    method: 'get',\n    url: `${queryParams?.url ?? RunRoute()}/${id}`,\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<RunApi>(config)\n    : getResponse<RunApi, Partial<Run>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const runDeleteOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<Run>>,\n): Promise<MessageResponse> => {\n  const config: QueryParams<Partial<Run>> = {\n    method: 'delete',\n    url: `${queryParams?.url ?? RunRoute()}/${id}`,\n    params: queryParams?.params,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<MessageResponse>(config)\n    : getResponse<MessageResponse, Partial<Run>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const runDeleteMany = (\n  data: (Partial<Run> & { id: number })[],\n  queryParams?: QueryParamsWithList<Partial<Run> & { id: number }>,\n): Promise<{ count: number }[]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<Run> & { id: number }> = {\n        method: 'post',\n        url: queryParams?.url ?? RunRoute() + '/delete',\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<{ count: number }>(config)\n        : getResponse<{ count: number }, Partial<Run> & { id: number }>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n\nexport const runUpdateOne = (\n  id: number,\n  data: Partial<Run>,\n  queryParams?: QueryParams<Partial<Run>>,\n): Promise<Run> => {\n  const config: QueryParams<Partial<Run>> = {\n    method: 'put',\n    url: `${queryParams?.url ?? RunRoute()}/${id}`,\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<Run>(config)\n    : getResponse<Run, Partial<Run>>(queryParams?.api ?? _client?.api, config);\n};\n\nexport const runUpdateMany = (\n  data: (Partial<Run> & { id: number })[],\n  queryParams?: QueryParamsWithList<Partial<Run> & { id: number }>,\n): Promise<Run[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<Run> & { id: number }> = {\n        method: 'post',\n        url: queryParams?.url ?? RunRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<Run[]>(config)\n        : getResponse<Run[], Partial<Run> & { id: number }>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n\nexport const runCreateOne = (\n  data: Partial<Run>,\n  queryParams?: QueryParams<Partial<Run>>,\n): Promise<Run> => {\n  const config: QueryParams<Partial<Run>> = {\n    method: 'post',\n    url: queryParams?.url ?? RunRoute(),\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<Run>(config)\n    : getResponse<Run, Partial<Run>>(queryParams?.api ?? _client?.api, config);\n};\n\nexport const runCreateMany = (\n  data: Partial<Run>[],\n  queryParams?: QueryParamsWithList<Partial<Run>>,\n): Promise<Run[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<Run>> = {\n        method: 'post',\n        url: queryParams?.url ?? RunRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<Run[]>(config)\n        : getResponse<Run[], Partial<Run>>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n"]}