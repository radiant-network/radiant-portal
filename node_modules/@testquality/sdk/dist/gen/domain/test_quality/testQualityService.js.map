{"version":3,"file":"testQualityService.js","sourceRoot":"","sources":["../../../../src/gen/domain/test_quality/testQualityService.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAEH,kDAA6C;AAC7C,2DAAwD;AACxD,yDAAsD;AAOtD,gDAAuD;AAIhD,MAAM,kBAAkB,GAAG,CAChC,WAA+C,EACR,EAAE;;IACzC,MAAM,MAAM,GAAsC;QAChD,MAAM,EAAE,KAAK;QACb,GAAG,EAAE,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,IAAA,yBAAgB,GAAE;QAC3C,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;QAC3B,WAAW,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,WAAW;QACrC,OAAO,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;KAC9B,CAAC;IAEF,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;QACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAA+B,MAAM,CAAC;QAClE,CAAC,CAAC,IAAA,yBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;AACR,CAAC,CAAC;AAjBW,QAAA,kBAAkB,sBAiB7B;AAEK,MAAM,iBAAiB,GAAG,CAC/B,EAAU,EACV,WAA+C,EACtB,EAAE;;IAC3B,MAAM,MAAM,GAAsC;QAChD,MAAM,EAAE,KAAK;QACb,GAAG,EAAE,GAAG,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,IAAA,yBAAgB,GAAE,IAAI,EAAE,EAAE;QACtD,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;QAC3B,WAAW,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,WAAW;QACrC,OAAO,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;KAC9B,CAAC;IAEF,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;QACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAiB,MAAM,CAAC;QACpD,CAAC,CAAC,IAAA,yBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;AACR,CAAC,CAAC;AAlBW,QAAA,iBAAiB,qBAkB5B;AAEK,MAAM,oBAAoB,GAAG,CAClC,EAAU,EACV,WAA+C,EACrB,EAAE;;IAC5B,MAAM,MAAM,GAAsC;QAChD,MAAM,EAAE,QAAQ;QAChB,GAAG,EAAE,GAAG,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,IAAA,yBAAgB,GAAE,IAAI,EAAE,EAAE;QACtD,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;QAC3B,OAAO,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;KAC9B,CAAC;IAEF,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;QACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAkB,MAAM,CAAC;QACrD,CAAC,CAAC,IAAA,yBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;AACR,CAAC,CAAC;AAjBW,QAAA,oBAAoB,wBAiB/B;AAEK,MAAM,qBAAqB,GAAG,CACnC,IAA+C,EAC/C,WAAwE,EAC1C,EAAE;IAChC,MAAM,MAAM,GAAG,IAAA,uBAAU,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtC,OAAO,OAAO,CAAC,GAAG,CAChB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;;QACnB,MAAM,MAAM,GACV;YACE,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,IAAA,yBAAgB,GAAE,GAAG,SAAS;YACvD,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;YAC3B,IAAI,EAAE,KAAK;YACX,OAAO,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;SAC9B,CAAC;QAEJ,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;YACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAoB,MAAM,CAAC;YACvD,CAAC,CAAC,IAAA,yBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;IACR,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAxBW,QAAA,qBAAqB,yBAwBhC;AAEK,MAAM,oBAAoB,GAAG,CAClC,EAAU,EACV,IAA0B,EAC1B,WAA+C,EACzB,EAAE;;IACxB,MAAM,MAAM,GAAsC;QAChD,MAAM,EAAE,KAAK;QACb,GAAG,EAAE,GAAG,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,IAAA,yBAAgB,GAAE,IAAI,EAAE,EAAE;QACtD,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;QAC3B,IAAI;QACJ,OAAO,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;KAC9B,CAAC;IAEF,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;QACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAc,MAAM,CAAC;QACjD,CAAC,CAAC,IAAA,yBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;AACR,CAAC,CAAC;AAnBW,QAAA,oBAAoB,wBAmB/B;AAEK,MAAM,qBAAqB,GAAG,CACnC,IAA+C,EAC/C,WAAwE,EAC9C,EAAE;IAC5B,MAAM,MAAM,GAAG,IAAA,uBAAU,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtC,OAAO,OAAO,CAAC,GAAG,CAChB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;;QACnB,MAAM,MAAM,GACV;YACE,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,IAAA,yBAAgB,GAAE;YAC3C,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;YAC3B,IAAI,EAAE,KAAK;YACX,OAAO,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;SAC9B,CAAC;QAEJ,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;YACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAgB,MAAM,CAAC;YACnD,CAAC,CAAC,IAAA,yBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;IACR,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAxBW,QAAA,qBAAqB,yBAwBhC;AAEK,MAAM,oBAAoB,GAAG,CAClC,IAA0B,EAC1B,WAA+C,EACzB,EAAE;;IACxB,MAAM,MAAM,GAAsC;QAChD,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,IAAA,yBAAgB,GAAE;QAC3C,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;QAC3B,IAAI;QACJ,OAAO,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;KAC9B,CAAC;IAEF,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;QACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAc,MAAM,CAAC;QACjD,CAAC,CAAC,IAAA,yBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;AACR,CAAC,CAAC;AAlBW,QAAA,oBAAoB,wBAkB/B;AAEK,MAAM,qBAAqB,GAAG,CACnC,IAA4B,EAC5B,WAAuD,EAC7B,EAAE;IAC5B,MAAM,MAAM,GAAG,IAAA,uBAAU,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtC,OAAO,OAAO,CAAC,GAAG,CAChB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;;QACnB,MAAM,MAAM,GAA8C;YACxD,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,IAAA,yBAAgB,GAAE;YAC3C,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM;YAC3B,IAAI,EAAE,KAAK;YACX,OAAO,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;SAC9B,CAAC;QAEF,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;YACvB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAgB,MAAM,CAAC;YACnD,CAAC,CAAC,IAAA,yBAAW,EACT,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,mCAAI,mBAAO,aAAP,mBAAO,uBAAP,mBAAO,CAAE,GAAG,EAChC,MAAM,CACP,CAAC;IACR,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAvBW,QAAA,qBAAqB,yBAuBhC","sourcesContent":["/**\n * Copyright (C) 2021 BitModern, Inc - All Rights Reserved\n */\n\nimport { _client } from '../../../ClientSdk';\nimport { getResponse } from '../../actions/getResponse';\nimport { chunkArray } from '../../actions/chunkArray';\nimport type {\n  QueryParams,\n  QueryParamsWithList,\n} from '../../actions/QueryParams';\nimport type { MessageResponse } from '../../actions/MessageResponse';\nimport type { ResourceList } from '../../models/ResourceList';\nimport { TestQualityRoute } from '../../routes/Routes';\nimport type { TestQuality } from './TestQuality';\nimport type { TestQualityApi } from './TestQualityApi';\n\nexport const testQualityGetMany = (\n  queryParams?: QueryParams<Partial<TestQuality>>,\n): Promise<ResourceList<TestQualityApi>> => {\n  const config: QueryParams<Partial<TestQuality>> = {\n    method: 'get',\n    url: queryParams?.url ?? TestQualityRoute(),\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<ResourceList<TestQualityApi>>(config)\n    : getResponse<ResourceList<TestQualityApi>, Partial<TestQuality>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityGetOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<TestQuality>>,\n): Promise<TestQualityApi> => {\n  const config: QueryParams<Partial<TestQuality>> = {\n    method: 'get',\n    url: `${queryParams?.url ?? TestQualityRoute()}/${id}`,\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<TestQualityApi>(config)\n    : getResponse<TestQualityApi, Partial<TestQuality>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityDeleteOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<TestQuality>>,\n): Promise<MessageResponse> => {\n  const config: QueryParams<Partial<TestQuality>> = {\n    method: 'delete',\n    url: `${queryParams?.url ?? TestQualityRoute()}/${id}`,\n    params: queryParams?.params,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<MessageResponse>(config)\n    : getResponse<MessageResponse, Partial<TestQuality>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityDeleteMany = (\n  data: (Partial<TestQuality> & { id: number })[],\n  queryParams?: QueryParamsWithList<Partial<TestQuality> & { id: number }>,\n): Promise<{ count: number }[]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<TestQuality> & { id: number }> =\n        {\n          method: 'post',\n          url: queryParams?.url ?? TestQualityRoute() + '/delete',\n          params: queryParams?.params,\n          list: chunk,\n          headers: queryParams?.headers,\n        };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<{ count: number }>(config)\n        : getResponse<{ count: number }, Partial<TestQuality> & { id: number }>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n\nexport const testQualityUpdateOne = (\n  id: number,\n  data: Partial<TestQuality>,\n  queryParams?: QueryParams<Partial<TestQuality>>,\n): Promise<TestQuality> => {\n  const config: QueryParams<Partial<TestQuality>> = {\n    method: 'put',\n    url: `${queryParams?.url ?? TestQualityRoute()}/${id}`,\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<TestQuality>(config)\n    : getResponse<TestQuality, Partial<TestQuality>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityUpdateMany = (\n  data: (Partial<TestQuality> & { id: number })[],\n  queryParams?: QueryParamsWithList<Partial<TestQuality> & { id: number }>,\n): Promise<TestQuality[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<TestQuality> & { id: number }> =\n        {\n          method: 'post',\n          url: queryParams?.url ?? TestQualityRoute(),\n          params: queryParams?.params,\n          list: chunk,\n          headers: queryParams?.headers,\n        };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<TestQuality[]>(config)\n        : getResponse<TestQuality[], Partial<TestQuality> & { id: number }>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n\nexport const testQualityCreateOne = (\n  data: Partial<TestQuality>,\n  queryParams?: QueryParams<Partial<TestQuality>>,\n): Promise<TestQuality> => {\n  const config: QueryParams<Partial<TestQuality>> = {\n    method: 'post',\n    url: queryParams?.url ?? TestQualityRoute(),\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<TestQuality>(config)\n    : getResponse<TestQuality, Partial<TestQuality>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityCreateMany = (\n  data: Partial<TestQuality>[],\n  queryParams?: QueryParamsWithList<Partial<TestQuality>>,\n): Promise<TestQuality[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<TestQuality>> = {\n        method: 'post',\n        url: queryParams?.url ?? TestQualityRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<TestQuality[]>(config)\n        : getResponse<TestQuality[], Partial<TestQuality>>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n"]}