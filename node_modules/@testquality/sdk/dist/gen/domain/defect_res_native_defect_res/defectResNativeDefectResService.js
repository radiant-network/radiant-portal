"use strict";
/**
 * Copyright (C) 2021 BitModern, Inc - All Rights Reserved
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defectResNativeDefectResGetOne = exports.defectResNativeDefectResGetMany = exports.defectResNativeDefectResCreateMany = exports.defectResNativeDefectResCreateOne = exports.defectResNativeDefectResUpdateMany = exports.defectResNativeDefectResUpdateOne = exports.defectResNativeDefectResDeleteMany = exports.defectResNativeDefectResDetach = void 0;
const ClientSdk_1 = require("../../../ClientSdk");
const getResponse_1 = require("../../actions/getResponse");
const chunkArray_1 = require("../../actions/chunkArray");
const defectResNativeDefectResDetach = (data, queryParams) => {
    var _a;
    if (data.id === undefined) {
        return Promise.reject(new Error('Must supply id'));
    }
    const config = {
        method: 'delete',
        url: `/defect_res_native_defect_res/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
    };
    return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch)
        ? queryParams.batch.addBatch(config)
        : (0, getResponse_1.getResponse)((_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a !== void 0 ? _a : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config);
};
exports.defectResNativeDefectResDetach = defectResNativeDefectResDetach;
const defectResNativeDefectResDeleteMany = (data, queryParams) => {
    const chunks = (0, chunkArray_1.chunkArray)(data, 1000);
    return Promise.all(chunks.map((chunk) => {
        var _a;
        const config = {
            method: 'post',
            url: `/defect_res_native_defect_res/delete`,
            params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
            list: chunk,
            headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers,
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch)
            ? queryParams.batch.addBatch(config)
            : (0, getResponse_1.getResponse)((_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a !== void 0 ? _a : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config);
    }));
};
exports.defectResNativeDefectResDeleteMany = defectResNativeDefectResDeleteMany;
const defectResNativeDefectResUpdateOne = (id, data, queryParams) => {
    var _a;
    const config = {
        method: 'put',
        url: `/defect_res_native_defect_res/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
    };
    return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch)
        ? queryParams.batch.addBatch(config)
        : (0, getResponse_1.getResponse)((_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a !== void 0 ? _a : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config);
};
exports.defectResNativeDefectResUpdateOne = defectResNativeDefectResUpdateOne;
const defectResNativeDefectResUpdateMany = (data, queryParams) => {
    const chunks = (0, chunkArray_1.chunkArray)(data, 1000);
    return Promise.all(chunks.map((chunk) => {
        var _a, _b;
        const config = {
            method: 'post',
            url: (_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a !== void 0 ? _a : `/defect_res_native_defect_res`,
            params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
            list: chunk,
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch)
            ? queryParams.batch.addBatch(config)
            : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config);
    }));
};
exports.defectResNativeDefectResUpdateMany = defectResNativeDefectResUpdateMany;
const defectResNativeDefectResCreateOne = (data, queryParams) => {
    var _a, _b;
    const config = {
        method: 'post',
        url: (_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a !== void 0 ? _a : `/defect_res_native_defect_res`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
    };
    return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch)
        ? queryParams.batch.addBatch(config)
        : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config);
};
exports.defectResNativeDefectResCreateOne = defectResNativeDefectResCreateOne;
const defectResNativeDefectResCreateMany = (data, queryParams) => {
    const chunks = (0, chunkArray_1.chunkArray)(data, 1000);
    return Promise.all(chunks.map((chunk) => {
        var _a, _b;
        const config = {
            method: 'post',
            url: (_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a !== void 0 ? _a : `/defect_res_native_defect_res`,
            params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
            list: chunk,
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch)
            ? queryParams.batch.addBatch(config)
            : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config);
    }));
};
exports.defectResNativeDefectResCreateMany = defectResNativeDefectResCreateMany;
const defectResNativeDefectResGetMany = (queryParams) => {
    var _a, _b;
    const config = {
        method: 'get',
        url: (_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a !== void 0 ? _a : `/defect_res_native_defect_res`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
    };
    return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch)
        ? queryParams.batch.addBatch(config)
        : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config);
};
exports.defectResNativeDefectResGetMany = defectResNativeDefectResGetMany;
const defectResNativeDefectResGetOne = (id, queryParams) => {
    var _a, _b;
    const config = {
        method: 'get',
        url: `${(_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a !== void 0 ? _a : `/defect_res_native_defect_res/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
    };
    return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch)
        ? queryParams.batch.addBatch(config)
        : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config);
};
exports.defectResNativeDefectResGetOne = defectResNativeDefectResGetOne;
//# sourceMappingURL=defectResNativeDefectResService.js.map