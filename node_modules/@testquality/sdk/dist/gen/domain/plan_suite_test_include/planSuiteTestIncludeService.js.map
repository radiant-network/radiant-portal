{"version":3,"file":"planSuiteTestIncludeService.js","sourceRoot":"","sources":["../../../../src/gen/domain/plan_suite_test_include/planSuiteTestIncludeService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (C) 2021 BitModern, Inc - All Rights Reserved\n */\n\nimport { _client } from '../../../ClientSdk';\nimport { getResponse } from '../../actions/getResponse';\nimport { chunkArray } from '../../actions/chunkArray';\nimport type {\n  QueryParams,\n  QueryParamsWithList,\n} from '../../actions/QueryParams';\nimport type { MessageResponse } from '../../actions/MessageResponse';\nimport type { ResourceList } from '../../models/ResourceList';\nimport { PlanSuiteTestIncludeRoute } from '../../routes/Routes';\nimport type { PlanSuiteTestInclude } from './PlanSuiteTestInclude';\nimport type { PlanSuiteTestIncludeApi } from './PlanSuiteTestIncludeApi';\n\nexport const planSuiteTestIncludeGetMany = (\n  queryParams?: QueryParams<Partial<PlanSuiteTestInclude>>,\n): Promise<ResourceList<PlanSuiteTestIncludeApi>> => {\n  const config: QueryParams<Partial<PlanSuiteTestInclude>> = {\n    method: 'get',\n    url: queryParams?.url ?? PlanSuiteTestIncludeRoute(),\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<ResourceList<PlanSuiteTestIncludeApi>>(config)\n    : getResponse<\n        ResourceList<PlanSuiteTestIncludeApi>,\n        Partial<PlanSuiteTestInclude>\n      >(queryParams?.api ?? _client?.api, config);\n};\n\nexport const planSuiteTestIncludeGetOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<PlanSuiteTestInclude>>,\n): Promise<PlanSuiteTestIncludeApi> => {\n  const config: QueryParams<Partial<PlanSuiteTestInclude>> = {\n    method: 'get',\n    url: `${queryParams?.url ?? PlanSuiteTestIncludeRoute()}/${id}`,\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<PlanSuiteTestIncludeApi>(config)\n    : getResponse<PlanSuiteTestIncludeApi, Partial<PlanSuiteTestInclude>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const planSuiteTestIncludeDeleteOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<PlanSuiteTestInclude>>,\n): Promise<MessageResponse> => {\n  const config: QueryParams<Partial<PlanSuiteTestInclude>> = {\n    method: 'delete',\n    url: `${queryParams?.url ?? PlanSuiteTestIncludeRoute()}/${id}`,\n    params: queryParams?.params,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<MessageResponse>(config)\n    : getResponse<MessageResponse, Partial<PlanSuiteTestInclude>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const planSuiteTestIncludeDeleteMany = (\n  data: (Partial<PlanSuiteTestInclude> & { id: number })[],\n  queryParams?: QueryParamsWithList<\n    Partial<PlanSuiteTestInclude> & { id: number }\n  >,\n): Promise<{ count: number }[]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<\n        Partial<PlanSuiteTestInclude> & { id: number }\n      > = {\n        method: 'post',\n        url: queryParams?.url ?? PlanSuiteTestIncludeRoute() + '/delete',\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<{ count: number }>(config)\n        : getResponse<\n            { count: number },\n            Partial<PlanSuiteTestInclude> & { id: number }\n          >(queryParams?.api ?? _client?.api, config);\n    }),\n  );\n};\n\nexport const planSuiteTestIncludeUpdateOne = (\n  id: number,\n  data: Partial<PlanSuiteTestInclude>,\n  queryParams?: QueryParams<Partial<PlanSuiteTestInclude>>,\n): Promise<PlanSuiteTestInclude> => {\n  const config: QueryParams<Partial<PlanSuiteTestInclude>> = {\n    method: 'put',\n    url: `${queryParams?.url ?? PlanSuiteTestIncludeRoute()}/${id}`,\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<PlanSuiteTestInclude>(config)\n    : getResponse<PlanSuiteTestInclude, Partial<PlanSuiteTestInclude>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const planSuiteTestIncludeUpdateMany = (\n  data: (Partial<PlanSuiteTestInclude> & { id: number })[],\n  queryParams?: QueryParamsWithList<\n    Partial<PlanSuiteTestInclude> & { id: number }\n  >,\n): Promise<PlanSuiteTestInclude[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<\n        Partial<PlanSuiteTestInclude> & { id: number }\n      > = {\n        method: 'post',\n        url: queryParams?.url ?? PlanSuiteTestIncludeRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<PlanSuiteTestInclude[]>(config)\n        : getResponse<\n            PlanSuiteTestInclude[],\n            Partial<PlanSuiteTestInclude> & { id: number }\n          >(queryParams?.api ?? _client?.api, config);\n    }),\n  );\n};\n\nexport const planSuiteTestIncludeCreateOne = (\n  data: Partial<PlanSuiteTestInclude>,\n  queryParams?: QueryParams<Partial<PlanSuiteTestInclude>>,\n): Promise<PlanSuiteTestInclude> => {\n  const config: QueryParams<Partial<PlanSuiteTestInclude>> = {\n    method: 'post',\n    url: queryParams?.url ?? PlanSuiteTestIncludeRoute(),\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<PlanSuiteTestInclude>(config)\n    : getResponse<PlanSuiteTestInclude, Partial<PlanSuiteTestInclude>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const planSuiteTestIncludeCreateMany = (\n  data: Partial<PlanSuiteTestInclude>[],\n  queryParams?: QueryParamsWithList<Partial<PlanSuiteTestInclude>>,\n): Promise<PlanSuiteTestInclude[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<PlanSuiteTestInclude>> = {\n        method: 'post',\n        url: queryParams?.url ?? PlanSuiteTestIncludeRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<PlanSuiteTestInclude[]>(config)\n        : getResponse<PlanSuiteTestInclude[], Partial<PlanSuiteTestInclude>>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n"]}