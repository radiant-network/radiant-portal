{"version":3,"file":"testQualityTypeService.js","sourceRoot":"","sources":["../../../../src/gen/domain/test_quality_type/testQualityTypeService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (C) 2021 BitModern, Inc - All Rights Reserved\n */\n\nimport { _client } from '../../../ClientSdk';\nimport { getResponse } from '../../actions/getResponse';\nimport { chunkArray } from '../../actions/chunkArray';\nimport type {\n  QueryParams,\n  QueryParamsWithList,\n} from '../../actions/QueryParams';\nimport type { MessageResponse } from '../../actions/MessageResponse';\nimport type { ResourceList } from '../../models/ResourceList';\nimport { TestQualityTypeRoute } from '../../routes/Routes';\nimport type { TestQualityType } from './TestQualityType';\nimport type { TestQualityTypeApi } from './TestQualityTypeApi';\n\nexport const testQualityTypeGetMany = (\n  queryParams?: QueryParams<Partial<TestQualityType>>,\n): Promise<ResourceList<TestQualityTypeApi>> => {\n  const config: QueryParams<Partial<TestQualityType>> = {\n    method: 'get',\n    url: queryParams?.url ?? TestQualityTypeRoute(),\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<ResourceList<TestQualityTypeApi>>(config)\n    : getResponse<ResourceList<TestQualityTypeApi>, Partial<TestQualityType>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityTypeGetOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<TestQualityType>>,\n): Promise<TestQualityTypeApi> => {\n  const config: QueryParams<Partial<TestQualityType>> = {\n    method: 'get',\n    url: `${queryParams?.url ?? TestQualityTypeRoute()}/${id}`,\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<TestQualityTypeApi>(config)\n    : getResponse<TestQualityTypeApi, Partial<TestQualityType>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityTypeDeleteOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<TestQualityType>>,\n): Promise<MessageResponse> => {\n  const config: QueryParams<Partial<TestQualityType>> = {\n    method: 'delete',\n    url: `${queryParams?.url ?? TestQualityTypeRoute()}/${id}`,\n    params: queryParams?.params,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<MessageResponse>(config)\n    : getResponse<MessageResponse, Partial<TestQualityType>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityTypeDeleteMany = (\n  data: (Partial<TestQualityType> & { id: number })[],\n  queryParams?: QueryParamsWithList<Partial<TestQualityType> & { id: number }>,\n): Promise<{ count: number }[]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<\n        Partial<TestQualityType> & { id: number }\n      > = {\n        method: 'post',\n        url: queryParams?.url ?? TestQualityTypeRoute() + '/delete',\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<{ count: number }>(config)\n        : getResponse<\n            { count: number },\n            Partial<TestQualityType> & { id: number }\n          >(queryParams?.api ?? _client?.api, config);\n    }),\n  );\n};\n\nexport const testQualityTypeUpdateOne = (\n  id: number,\n  data: Partial<TestQualityType>,\n  queryParams?: QueryParams<Partial<TestQualityType>>,\n): Promise<TestQualityType> => {\n  const config: QueryParams<Partial<TestQualityType>> = {\n    method: 'put',\n    url: `${queryParams?.url ?? TestQualityTypeRoute()}/${id}`,\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<TestQualityType>(config)\n    : getResponse<TestQualityType, Partial<TestQualityType>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityTypeUpdateMany = (\n  data: (Partial<TestQualityType> & { id: number })[],\n  queryParams?: QueryParamsWithList<Partial<TestQualityType> & { id: number }>,\n): Promise<TestQualityType[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<\n        Partial<TestQualityType> & { id: number }\n      > = {\n        method: 'post',\n        url: queryParams?.url ?? TestQualityTypeRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<TestQualityType[]>(config)\n        : getResponse<\n            TestQualityType[],\n            Partial<TestQualityType> & { id: number }\n          >(queryParams?.api ?? _client?.api, config);\n    }),\n  );\n};\n\nexport const testQualityTypeCreateOne = (\n  data: Partial<TestQualityType>,\n  queryParams?: QueryParams<Partial<TestQualityType>>,\n): Promise<TestQualityType> => {\n  const config: QueryParams<Partial<TestQualityType>> = {\n    method: 'post',\n    url: queryParams?.url ?? TestQualityTypeRoute(),\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<TestQualityType>(config)\n    : getResponse<TestQualityType, Partial<TestQualityType>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const testQualityTypeCreateMany = (\n  data: Partial<TestQualityType>[],\n  queryParams?: QueryParamsWithList<Partial<TestQualityType>>,\n): Promise<TestQualityType[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<TestQualityType>> = {\n        method: 'post',\n        url: queryParams?.url ?? TestQualityTypeRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<TestQualityType[]>(config)\n        : getResponse<TestQualityType[], Partial<TestQualityType>>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n"]}