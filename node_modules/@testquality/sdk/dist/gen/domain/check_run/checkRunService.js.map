{"version":3,"file":"checkRunService.js","sourceRoot":"","sources":["../../../../src/gen/domain/check_run/checkRunService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (C) 2021 BitModern, Inc - All Rights Reserved\n */\n\nimport { _client } from '../../../ClientSdk';\nimport { getResponse } from '../../actions/getResponse';\nimport { chunkArray } from '../../actions/chunkArray';\nimport type {\n  QueryParams,\n  QueryParamsWithList,\n} from '../../actions/QueryParams';\nimport type { MessageResponse } from '../../actions/MessageResponse';\nimport type { ResourceList } from '../../models/ResourceList';\nimport { CheckRunRoute } from '../../routes/Routes';\nimport type { CheckRun } from './CheckRun';\nimport type { CheckRunApi } from './CheckRunApi';\n\nexport const checkRunGetMany = (\n  queryParams?: QueryParams<Partial<CheckRun>>,\n): Promise<ResourceList<CheckRunApi>> => {\n  const config: QueryParams<Partial<CheckRun>> = {\n    method: 'get',\n    url: queryParams?.url ?? CheckRunRoute(),\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<ResourceList<CheckRunApi>>(config)\n    : getResponse<ResourceList<CheckRunApi>, Partial<CheckRun>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const checkRunGetOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<CheckRun>>,\n): Promise<CheckRunApi> => {\n  const config: QueryParams<Partial<CheckRun>> = {\n    method: 'get',\n    url: `${queryParams?.url ?? CheckRunRoute()}/${id}`,\n    params: queryParams?.params,\n    cancelToken: queryParams?.cancelToken,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<CheckRunApi>(config)\n    : getResponse<CheckRunApi, Partial<CheckRun>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const checkRunDeleteOne = (\n  id: number,\n  queryParams?: QueryParams<Partial<CheckRun>>,\n): Promise<MessageResponse> => {\n  const config: QueryParams<Partial<CheckRun>> = {\n    method: 'delete',\n    url: `${queryParams?.url ?? CheckRunRoute()}/${id}`,\n    params: queryParams?.params,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<MessageResponse>(config)\n    : getResponse<MessageResponse, Partial<CheckRun>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const checkRunDeleteMany = (\n  data: (Partial<CheckRun> & { id: number })[],\n  queryParams?: QueryParamsWithList<Partial<CheckRun> & { id: number }>,\n): Promise<{ count: number }[]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<CheckRun> & { id: number }> = {\n        method: 'post',\n        url: queryParams?.url ?? CheckRunRoute() + '/delete',\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<{ count: number }>(config)\n        : getResponse<{ count: number }, Partial<CheckRun> & { id: number }>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n\nexport const checkRunUpdateOne = (\n  id: number,\n  data: Partial<CheckRun>,\n  queryParams?: QueryParams<Partial<CheckRun>>,\n): Promise<CheckRun> => {\n  const config: QueryParams<Partial<CheckRun>> = {\n    method: 'put',\n    url: `${queryParams?.url ?? CheckRunRoute()}/${id}`,\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<CheckRun>(config)\n    : getResponse<CheckRun, Partial<CheckRun>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const checkRunUpdateMany = (\n  data: (Partial<CheckRun> & { id: number })[],\n  queryParams?: QueryParamsWithList<Partial<CheckRun> & { id: number }>,\n): Promise<CheckRun[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<CheckRun> & { id: number }> = {\n        method: 'post',\n        url: queryParams?.url ?? CheckRunRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<CheckRun[]>(config)\n        : getResponse<CheckRun[], Partial<CheckRun> & { id: number }>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n\nexport const checkRunCreateOne = (\n  data: Partial<CheckRun>,\n  queryParams?: QueryParams<Partial<CheckRun>>,\n): Promise<CheckRun> => {\n  const config: QueryParams<Partial<CheckRun>> = {\n    method: 'post',\n    url: queryParams?.url ?? CheckRunRoute(),\n    params: queryParams?.params,\n    data,\n    headers: queryParams?.headers,\n  };\n\n  return queryParams?.batch\n    ? queryParams.batch.addBatch<CheckRun>(config)\n    : getResponse<CheckRun, Partial<CheckRun>>(\n        queryParams?.api ?? _client?.api,\n        config,\n      );\n};\n\nexport const checkRunCreateMany = (\n  data: Partial<CheckRun>[],\n  queryParams?: QueryParamsWithList<Partial<CheckRun>>,\n): Promise<CheckRun[][]> => {\n  const chunks = chunkArray(data, 1000);\n  return Promise.all(\n    chunks.map((chunk) => {\n      const config: QueryParamsWithList<Partial<CheckRun>> = {\n        method: 'post',\n        url: queryParams?.url ?? CheckRunRoute(),\n        params: queryParams?.params,\n        list: chunk,\n        headers: queryParams?.headers,\n      };\n\n      return queryParams?.batch\n        ? queryParams.batch.addBatch<CheckRun[]>(config)\n        : getResponse<CheckRun[], Partial<CheckRun>>(\n            queryParams?.api ?? _client?.api,\n            config,\n          );\n    }),\n  );\n};\n"]}