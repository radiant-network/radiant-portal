#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// node_modules/dotenv/lib/main.js
var require_main = __commonJS({
  "node_modules/dotenv/lib/main.js"(exports2, module2) {
    var fs6 = require("fs");
    var path4 = require("path");
    var os = require("os");
    function log(message) {
      console.log(`[dotenv][DEBUG] ${message}`);
    }
    var NEWLINE = "\n";
    var RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/;
    var RE_NEWLINES = /\\n/g;
    var NEWLINES_MATCH = /\r\n|\n|\r/;
    function parse(src, options) {
      const debug4 = Boolean(options && options.debug);
      const obj = {};
      src.toString().split(NEWLINES_MATCH).forEach(function(line, idx) {
        const keyValueArr = line.match(RE_INI_KEY_VAL);
        if (keyValueArr != null) {
          const key = keyValueArr[1];
          let val = keyValueArr[2] || "";
          const end = val.length - 1;
          const isDoubleQuoted = val[0] === '"' && val[end] === '"';
          const isSingleQuoted = val[0] === "'" && val[end] === "'";
          if (isSingleQuoted || isDoubleQuoted) {
            val = val.substring(1, end);
            if (isDoubleQuoted) {
              val = val.replace(RE_NEWLINES, NEWLINE);
            }
          } else {
            val = val.trim();
          }
          obj[key] = val;
        } else if (debug4) {
          log(`did not match key and value when parsing line ${idx + 1}: ${line}`);
        }
      });
      return obj;
    }
    function resolveHome(envPath) {
      return envPath[0] === "~" ? path4.join(os.homedir(), envPath.slice(1)) : envPath;
    }
    function config2(options) {
      let dotenvPath = path4.resolve(process.cwd(), ".env");
      let encoding = "utf8";
      let debug4 = false;
      if (options) {
        if (options.path != null) {
          dotenvPath = resolveHome(options.path);
        }
        if (options.encoding != null) {
          encoding = options.encoding;
        }
        if (options.debug != null) {
          debug4 = true;
        }
      }
      try {
        const parsed = parse(fs6.readFileSync(dotenvPath, { encoding }), { debug: debug4 });
        Object.keys(parsed).forEach(function(key) {
          if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
            process.env[key] = parsed[key];
          } else if (debug4) {
            log(`"${key}" is already defined in \`process.env\` and will not be overwritten`);
          }
        });
        return { parsed };
      } catch (e) {
        return { error: e };
      }
    }
    module2.exports.config = config2;
    module2.exports.parse = parse;
  }
});

// node_modules/property-expr/index.js
var require_property_expr = __commonJS({
  "node_modules/property-expr/index.js"(exports2, module2) {
    "use strict";
    function Cache(maxSize) {
      this._maxSize = maxSize;
      this.clear();
    }
    Cache.prototype.clear = function() {
      this._size = 0;
      this._values = /* @__PURE__ */ Object.create(null);
    };
    Cache.prototype.get = function(key) {
      return this._values[key];
    };
    Cache.prototype.set = function(key, value) {
      this._size >= this._maxSize && this.clear();
      if (!(key in this._values))
        this._size++;
      return this._values[key] = value;
    };
    var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g;
    var DIGIT_REGEX = /^\d+$/;
    var LEAD_DIGIT_REGEX = /^\d/;
    var SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g;
    var CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/;
    var MAX_CACHE_SIZE = 512;
    var pathCache = new Cache(MAX_CACHE_SIZE);
    var setCache = new Cache(MAX_CACHE_SIZE);
    var getCache = new Cache(MAX_CACHE_SIZE);
    module2.exports = {
      Cache,
      split,
      normalizePath,
      setter: function(path4) {
        var parts = normalizePath(path4);
        return setCache.get(path4) || setCache.set(path4, function setter(obj, value) {
          var index = 0;
          var len = parts.length;
          var data = obj;
          while (index < len - 1) {
            var part = parts[index];
            if (part === "__proto__" || part === "constructor" || part === "prototype") {
              return obj;
            }
            data = data[parts[index++]];
          }
          data[parts[index]] = value;
        });
      },
      getter: function(path4, safe) {
        var parts = normalizePath(path4);
        return getCache.get(path4) || getCache.set(path4, function getter(data) {
          var index = 0, len = parts.length;
          while (index < len) {
            if (data != null || !safe)
              data = data[parts[index++]];
            else
              return;
          }
          return data;
        });
      },
      join: function(segments) {
        return segments.reduce(function(path4, part) {
          return path4 + (isQuoted(part) || DIGIT_REGEX.test(part) ? "[" + part + "]" : (path4 ? "." : "") + part);
        }, "");
      },
      forEach: function(path4, cb, thisArg) {
        forEach(Array.isArray(path4) ? path4 : split(path4), cb, thisArg);
      }
    };
    function normalizePath(path4) {
      return pathCache.get(path4) || pathCache.set(
        path4,
        split(path4).map(function(part) {
          return part.replace(CLEAN_QUOTES_REGEX, "$2");
        })
      );
    }
    function split(path4) {
      return path4.match(SPLIT_REGEX) || [""];
    }
    function forEach(parts, iter, thisArg) {
      var len = parts.length, part, idx, isArray, isBracket;
      for (idx = 0; idx < len; idx++) {
        part = parts[idx];
        if (part) {
          if (shouldBeQuoted(part)) {
            part = '"' + part + '"';
          }
          isBracket = isQuoted(part);
          isArray = !isBracket && /^\d+$/.test(part);
          iter.call(thisArg, part, isBracket, isArray, idx, parts);
        }
      }
    }
    function isQuoted(str) {
      return typeof str === "string" && str && ["'", '"'].indexOf(str.charAt(0)) !== -1;
    }
    function hasLeadingNumber(part) {
      return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
    }
    function hasSpecialChars(part) {
      return SPEC_CHAR_REGEX.test(part);
    }
    function shouldBeQuoted(part) {
      return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
    }
  }
});

// node_modules/tiny-case/index.js
var require_tiny_case = __commonJS({
  "node_modules/tiny-case/index.js"(exports2, module2) {
    var reWords = /[A-Z\xc0-\xd6\xd8-\xde]?[a-z\xdf-\xf6\xf8-\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde]|$)|(?:[A-Z\xc0-\xd6\xd8-\xde]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde](?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])|$)|[A-Z\xc0-\xd6\xd8-\xde]?(?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\xc0-\xd6\xd8-\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\d*(?:1ST|2ND|3RD|(?![123])\dTH)(?=\b|[a-z_])|\d*(?:1st|2nd|3rd|(?![123])\dth)(?=\b|[A-Z_])|\d+|(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?(?:\u200d(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?)*/g;
    var words = (str) => str.match(reWords) || [];
    var upperFirst = (str) => str[0].toUpperCase() + str.slice(1);
    var join2 = (str, d) => words(str).join(d).toLowerCase();
    var camelCase = (str) => words(str).reduce(
      (acc, next) => `${acc}${!acc ? next.toLowerCase() : next[0].toUpperCase() + next.slice(1).toLowerCase()}`,
      ""
    );
    var pascalCase = (str) => upperFirst(camelCase(str));
    var snakeCase = (str) => join2(str, "_");
    var kebabCase = (str) => join2(str, "-");
    var sentenceCase = (str) => upperFirst(join2(str, " "));
    var titleCase = (str) => words(str).map(upperFirst).join(" ");
    module2.exports = {
      words,
      upperFirst,
      camelCase,
      pascalCase,
      snakeCase,
      kebabCase,
      sentenceCase,
      titleCase
    };
  }
});

// node_modules/toposort/index.js
var require_toposort = __commonJS({
  "node_modules/toposort/index.js"(exports2, module2) {
    module2.exports = function(edges) {
      return toposort(uniqueNodes(edges), edges);
    };
    module2.exports.array = toposort;
    function toposort(nodes, edges) {
      var cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
      edges.forEach(function(edge) {
        if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
          throw new Error("Unknown node. There is an unknown node in the supplied edges.");
        }
      });
      while (i--) {
        if (!visited[i])
          visit(nodes[i], i, /* @__PURE__ */ new Set());
      }
      return sorted;
      function visit(node, i2, predecessors) {
        if (predecessors.has(node)) {
          var nodeRep;
          try {
            nodeRep = ", node was:" + JSON.stringify(node);
          } catch (e) {
            nodeRep = "";
          }
          throw new Error("Cyclic dependency" + nodeRep);
        }
        if (!nodesHash.has(node)) {
          throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node));
        }
        if (visited[i2])
          return;
        visited[i2] = true;
        var outgoing = outgoingEdges.get(node) || /* @__PURE__ */ new Set();
        outgoing = Array.from(outgoing);
        if (i2 = outgoing.length) {
          predecessors.add(node);
          do {
            var child = outgoing[--i2];
            visit(child, nodesHash.get(child), predecessors);
          } while (i2);
          predecessors.delete(node);
        }
        sorted[--cursor] = node;
      }
    }
    function uniqueNodes(arr) {
      var res = /* @__PURE__ */ new Set();
      for (var i = 0, len = arr.length; i < len; i++) {
        var edge = arr[i];
        res.add(edge[0]);
        res.add(edge[1]);
      }
      return Array.from(res);
    }
    function makeOutgoingEdges(arr) {
      var edges = /* @__PURE__ */ new Map();
      for (var i = 0, len = arr.length; i < len; i++) {
        var edge = arr[i];
        if (!edges.has(edge[0]))
          edges.set(edge[0], /* @__PURE__ */ new Set());
        if (!edges.has(edge[1]))
          edges.set(edge[1], /* @__PURE__ */ new Set());
        edges.get(edge[0]).add(edge[1]);
      }
      return edges;
    }
    function makeNodesHash(arr) {
      var res = /* @__PURE__ */ new Map();
      for (var i = 0, len = arr.length; i < len; i++) {
        res.set(arr[i], i);
      }
      return res;
    }
  }
});

// node_modules/yup/index.js
var require_yup = __commonJS({
  "node_modules/yup/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var propertyExpr = require_property_expr();
    var tinyCase = require_tiny_case();
    var toposort = require_toposort();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var toposort__default = /* @__PURE__ */ _interopDefaultLegacy(toposort);
    var toString = Object.prototype.toString;
    var errorToString = Error.prototype.toString;
    var regExpToString = RegExp.prototype.toString;
    var symbolToString = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
    var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
    function printNumber(val) {
      if (val != +val)
        return "NaN";
      const isNegativeZero = val === 0 && 1 / val < 0;
      return isNegativeZero ? "-0" : "" + val;
    }
    function printSimpleValue(val, quoteStrings = false) {
      if (val == null || val === true || val === false)
        return "" + val;
      const typeOf = typeof val;
      if (typeOf === "number")
        return printNumber(val);
      if (typeOf === "string")
        return quoteStrings ? `"${val}"` : val;
      if (typeOf === "function")
        return "[Function " + (val.name || "anonymous") + "]";
      if (typeOf === "symbol")
        return symbolToString.call(val).replace(SYMBOL_REGEXP, "Symbol($1)");
      const tag = toString.call(val).slice(8, -1);
      if (tag === "Date")
        return isNaN(val.getTime()) ? "" + val : val.toISOString(val);
      if (tag === "Error" || val instanceof Error)
        return "[" + errorToString.call(val) + "]";
      if (tag === "RegExp")
        return regExpToString.call(val);
      return null;
    }
    function printValue(value, quoteStrings) {
      let result = printSimpleValue(value, quoteStrings);
      if (result !== null)
        return result;
      return JSON.stringify(value, function(key, value2) {
        let result2 = printSimpleValue(this[key], quoteStrings);
        if (result2 !== null)
          return result2;
        return value2;
      }, 2);
    }
    function toArray(value) {
      return value == null ? [] : [].concat(value);
    }
    var _Symbol$toStringTag;
    var _Symbol$hasInstance;
    var _Symbol$toStringTag2;
    var strReg = /\$\{\s*(\w+)\s*\}/g;
    _Symbol$toStringTag = Symbol.toStringTag;
    var ValidationErrorNoStack = class {
      constructor(errorOrErrors, value, field, type) {
        this.name = void 0;
        this.message = void 0;
        this.value = void 0;
        this.path = void 0;
        this.type = void 0;
        this.params = void 0;
        this.errors = void 0;
        this.inner = void 0;
        this[_Symbol$toStringTag] = "Error";
        this.name = "ValidationError";
        this.value = value;
        this.path = field;
        this.type = type;
        this.errors = [];
        this.inner = [];
        toArray(errorOrErrors).forEach((err) => {
          if (ValidationError.isError(err)) {
            this.errors.push(...err.errors);
            const innerErrors = err.inner.length ? err.inner : [err];
            this.inner.push(...innerErrors);
          } else {
            this.errors.push(err);
          }
        });
        this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
      }
    };
    _Symbol$hasInstance = Symbol.hasInstance;
    _Symbol$toStringTag2 = Symbol.toStringTag;
    var ValidationError = class _ValidationError extends Error {
      static formatError(message, params) {
        const path4 = params.label || params.path || "this";
        params = Object.assign({}, params, {
          path: path4,
          originalPath: params.path
        });
        if (typeof message === "string")
          return message.replace(strReg, (_, key) => printValue(params[key]));
        if (typeof message === "function")
          return message(params);
        return message;
      }
      static isError(err) {
        return err && err.name === "ValidationError";
      }
      constructor(errorOrErrors, value, field, type, disableStack) {
        const errorNoStack = new ValidationErrorNoStack(errorOrErrors, value, field, type);
        if (disableStack) {
          return errorNoStack;
        }
        super();
        this.value = void 0;
        this.path = void 0;
        this.type = void 0;
        this.params = void 0;
        this.errors = [];
        this.inner = [];
        this[_Symbol$toStringTag2] = "Error";
        this.name = errorNoStack.name;
        this.message = errorNoStack.message;
        this.type = errorNoStack.type;
        this.value = errorNoStack.value;
        this.path = errorNoStack.path;
        this.errors = errorNoStack.errors;
        this.inner = errorNoStack.inner;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _ValidationError);
        }
      }
      static [_Symbol$hasInstance](inst) {
        return ValidationErrorNoStack[Symbol.hasInstance](inst) || super[Symbol.hasInstance](inst);
      }
    };
    var mixed = {
      default: "${path} is invalid",
      required: "${path} is a required field",
      defined: "${path} must be defined",
      notNull: "${path} cannot be null",
      oneOf: "${path} must be one of the following values: ${values}",
      notOneOf: "${path} must not be one of the following values: ${values}",
      notType: ({
        path: path4,
        type,
        value,
        originalValue
      }) => {
        const castMsg = originalValue != null && originalValue !== value ? ` (cast from the value \`${printValue(originalValue, true)}\`).` : ".";
        return type !== "mixed" ? `${path4} must be a \`${type}\` type, but the final value was: \`${printValue(value, true)}\`` + castMsg : `${path4} must match the configured type. The validated value was: \`${printValue(value, true)}\`` + castMsg;
      }
    };
    var string2 = {
      length: "${path} must be exactly ${length} characters",
      min: "${path} must be at least ${min} characters",
      max: "${path} must be at most ${max} characters",
      matches: '${path} must match the following: "${regex}"',
      email: "${path} must be a valid email",
      url: "${path} must be a valid URL",
      uuid: "${path} must be a valid UUID",
      datetime: "${path} must be a valid ISO date-time",
      datetime_precision: "${path} must be a valid ISO date-time with a sub-second precision of exactly ${precision} digits",
      datetime_offset: '${path} must be a valid ISO date-time with UTC "Z" timezone',
      trim: "${path} must be a trimmed string",
      lowercase: "${path} must be a lowercase string",
      uppercase: "${path} must be a upper case string"
    };
    var number = {
      min: "${path} must be greater than or equal to ${min}",
      max: "${path} must be less than or equal to ${max}",
      lessThan: "${path} must be less than ${less}",
      moreThan: "${path} must be greater than ${more}",
      positive: "${path} must be a positive number",
      negative: "${path} must be a negative number",
      integer: "${path} must be an integer"
    };
    var date = {
      min: "${path} field must be later than ${min}",
      max: "${path} field must be at earlier than ${max}"
    };
    var boolean2 = {
      isValue: "${path} field must be ${value}"
    };
    var object2 = {
      noUnknown: "${path} field has unspecified keys: ${unknown}",
      exact: "${path} object contains unknown properties: ${properties}"
    };
    var array = {
      min: "${path} field must have at least ${min} items",
      max: "${path} field must have less than or equal to ${max} items",
      length: "${path} must have ${length} items"
    };
    var tuple = {
      notType: (params) => {
        const {
          path: path4,
          value,
          spec
        } = params;
        const typeLen = spec.types.length;
        if (Array.isArray(value)) {
          if (value.length < typeLen)
            return `${path4} tuple value has too few items, expected a length of ${typeLen} but got ${value.length} for value: \`${printValue(value, true)}\``;
          if (value.length > typeLen)
            return `${path4} tuple value has too many items, expected a length of ${typeLen} but got ${value.length} for value: \`${printValue(value, true)}\``;
        }
        return ValidationError.formatError(mixed.notType, params);
      }
    };
    var locale = Object.assign(/* @__PURE__ */ Object.create(null), {
      mixed,
      string: string2,
      number,
      date,
      object: object2,
      array,
      boolean: boolean2,
      tuple
    });
    var isSchema = (obj) => obj && obj.__isYupSchema__;
    var Condition = class _Condition {
      static fromOptions(refs, config2) {
        if (!config2.then && !config2.otherwise)
          throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
        let {
          is,
          then,
          otherwise
        } = config2;
        let check = typeof is === "function" ? is : (...values) => values.every((value) => value === is);
        return new _Condition(refs, (values, schema2) => {
          var _branch;
          let branch = check(...values) ? then : otherwise;
          return (_branch = branch == null ? void 0 : branch(schema2)) != null ? _branch : schema2;
        });
      }
      constructor(refs, builder) {
        this.fn = void 0;
        this.refs = refs;
        this.refs = refs;
        this.fn = builder;
      }
      resolve(base, options) {
        let values = this.refs.map((ref) => (
          // TODO: ? operator here?
          ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context)
        ));
        let schema2 = this.fn(values, base, options);
        if (schema2 === void 0 || // @ts-ignore this can be base
        schema2 === base) {
          return base;
        }
        if (!isSchema(schema2))
          throw new TypeError("conditions must return a schema object");
        return schema2.resolve(options);
      }
    };
    var prefixes = {
      context: "$",
      value: "."
    };
    function create$9(key, options) {
      return new Reference(key, options);
    }
    var Reference = class {
      constructor(key, options = {}) {
        this.key = void 0;
        this.isContext = void 0;
        this.isValue = void 0;
        this.isSibling = void 0;
        this.path = void 0;
        this.getter = void 0;
        this.map = void 0;
        if (typeof key !== "string")
          throw new TypeError("ref must be a string, got: " + key);
        this.key = key.trim();
        if (key === "")
          throw new TypeError("ref must be a non-empty string");
        this.isContext = this.key[0] === prefixes.context;
        this.isValue = this.key[0] === prefixes.value;
        this.isSibling = !this.isContext && !this.isValue;
        let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : "";
        this.path = this.key.slice(prefix.length);
        this.getter = this.path && propertyExpr.getter(this.path, true);
        this.map = options.map;
      }
      getValue(value, parent, context) {
        let result = this.isContext ? context : this.isValue ? value : parent;
        if (this.getter)
          result = this.getter(result || {});
        if (this.map)
          result = this.map(result);
        return result;
      }
      /**
       *
       * @param {*} value
       * @param {Object} options
       * @param {Object=} options.context
       * @param {Object=} options.parent
       */
      cast(value, options) {
        return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
      }
      resolve() {
        return this;
      }
      describe() {
        return {
          type: "ref",
          key: this.key
        };
      }
      toString() {
        return `Ref(${this.key})`;
      }
      static isRef(value) {
        return value && value.__isYupRef;
      }
    };
    Reference.prototype.__isYupRef = true;
    var isAbsent = (value) => value == null;
    function createValidation(config2) {
      function validate({
        value,
        path: path4 = "",
        options,
        originalValue,
        schema: schema2
      }, panic, next) {
        const {
          name,
          test,
          params,
          message,
          skipAbsent
        } = config2;
        let {
          parent,
          context,
          abortEarly = schema2.spec.abortEarly,
          disableStackTrace = schema2.spec.disableStackTrace
        } = options;
        function resolve3(item) {
          return Reference.isRef(item) ? item.getValue(value, parent, context) : item;
        }
        function createError(overrides = {}) {
          const nextParams = Object.assign({
            value,
            originalValue,
            label: schema2.spec.label,
            path: overrides.path || path4,
            spec: schema2.spec,
            disableStackTrace: overrides.disableStackTrace || disableStackTrace
          }, params, overrides.params);
          for (const key of Object.keys(nextParams))
            nextParams[key] = resolve3(nextParams[key]);
          const error = new ValidationError(ValidationError.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name, nextParams.disableStackTrace);
          error.params = nextParams;
          return error;
        }
        const invalid = abortEarly ? panic : next;
        let ctx = {
          path: path4,
          parent,
          type: name,
          from: options.from,
          createError,
          resolve: resolve3,
          options,
          originalValue,
          schema: schema2
        };
        const handleResult = (validOrError) => {
          if (ValidationError.isError(validOrError))
            invalid(validOrError);
          else if (!validOrError)
            invalid(createError());
          else
            next(null);
        };
        const handleError = (err) => {
          if (ValidationError.isError(err))
            invalid(err);
          else
            panic(err);
        };
        const shouldSkip = skipAbsent && isAbsent(value);
        if (shouldSkip) {
          return handleResult(true);
        }
        let result;
        try {
          var _result;
          result = test.call(ctx, value, ctx);
          if (typeof ((_result = result) == null ? void 0 : _result.then) === "function") {
            if (options.sync) {
              throw new Error(`Validation test of type: "${ctx.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`);
            }
            return Promise.resolve(result).then(handleResult, handleError);
          }
        } catch (err) {
          handleError(err);
          return;
        }
        handleResult(result);
      }
      validate.OPTIONS = config2;
      return validate;
    }
    function getIn(schema2, path4, value, context = value) {
      let parent, lastPart, lastPartDebug;
      if (!path4)
        return {
          parent,
          parentPath: path4,
          schema: schema2
        };
      propertyExpr.forEach(path4, (_part, isBracket, isArray) => {
        let part = isBracket ? _part.slice(1, _part.length - 1) : _part;
        schema2 = schema2.resolve({
          context,
          parent,
          value
        });
        let isTuple = schema2.type === "tuple";
        let idx = isArray ? parseInt(part, 10) : 0;
        if (schema2.innerType || isTuple) {
          if (isTuple && !isArray)
            throw new Error(`Yup.reach cannot implicitly index into a tuple type. the path part "${lastPartDebug}" must contain an index to the tuple element, e.g. "${lastPartDebug}[0]"`);
          if (value && idx >= value.length) {
            throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path4}. because there is no value at that index. `);
          }
          parent = value;
          value = value && value[idx];
          schema2 = isTuple ? schema2.spec.types[idx] : schema2.innerType;
        }
        if (!isArray) {
          if (!schema2.fields || !schema2.fields[part])
            throw new Error(`The schema does not contain the path: ${path4}. (failed at: ${lastPartDebug} which is a type: "${schema2.type}")`);
          parent = value;
          value = value && value[part];
          schema2 = schema2.fields[part];
        }
        lastPart = part;
        lastPartDebug = isBracket ? "[" + _part + "]" : "." + _part;
      });
      return {
        schema: schema2,
        parent,
        parentPath: lastPart
      };
    }
    function reach(obj, path4, value, context) {
      return getIn(obj, path4, value, context).schema;
    }
    var ReferenceSet = class _ReferenceSet extends Set {
      describe() {
        const description = [];
        for (const item of this.values()) {
          description.push(Reference.isRef(item) ? item.describe() : item);
        }
        return description;
      }
      resolveAll(resolve3) {
        let result = [];
        for (const item of this.values()) {
          result.push(resolve3(item));
        }
        return result;
      }
      clone() {
        return new _ReferenceSet(this.values());
      }
      merge(newItems, removeItems) {
        const next = this.clone();
        newItems.forEach((value) => next.add(value));
        removeItems.forEach((value) => next.delete(value));
        return next;
      }
    };
    function clone(src, seen = /* @__PURE__ */ new Map()) {
      if (isSchema(src) || !src || typeof src !== "object")
        return src;
      if (seen.has(src))
        return seen.get(src);
      let copy;
      if (src instanceof Date) {
        copy = new Date(src.getTime());
        seen.set(src, copy);
      } else if (src instanceof RegExp) {
        copy = new RegExp(src);
        seen.set(src, copy);
      } else if (Array.isArray(src)) {
        copy = new Array(src.length);
        seen.set(src, copy);
        for (let i = 0; i < src.length; i++)
          copy[i] = clone(src[i], seen);
      } else if (src instanceof Map) {
        copy = /* @__PURE__ */ new Map();
        seen.set(src, copy);
        for (const [k, v] of src.entries())
          copy.set(k, clone(v, seen));
      } else if (src instanceof Set) {
        copy = /* @__PURE__ */ new Set();
        seen.set(src, copy);
        for (const v of src)
          copy.add(clone(v, seen));
      } else if (src instanceof Object) {
        copy = {};
        seen.set(src, copy);
        for (const [k, v] of Object.entries(src))
          copy[k] = clone(v, seen);
      } else {
        throw Error(`Unable to clone ${src}`);
      }
      return copy;
    }
    var Schema = class {
      constructor(options) {
        this.type = void 0;
        this.deps = [];
        this.tests = void 0;
        this.transforms = void 0;
        this.conditions = [];
        this._mutate = void 0;
        this.internalTests = {};
        this._whitelist = new ReferenceSet();
        this._blacklist = new ReferenceSet();
        this.exclusiveTests = /* @__PURE__ */ Object.create(null);
        this._typeCheck = void 0;
        this.spec = void 0;
        this.tests = [];
        this.transforms = [];
        this.withMutation(() => {
          this.typeError(mixed.notType);
        });
        this.type = options.type;
        this._typeCheck = options.check;
        this.spec = Object.assign({
          strip: false,
          strict: false,
          abortEarly: true,
          recursive: true,
          disableStackTrace: false,
          nullable: false,
          optional: true,
          coerce: true
        }, options == null ? void 0 : options.spec);
        this.withMutation((s) => {
          s.nonNullable();
        });
      }
      // TODO: remove
      get _type() {
        return this.type;
      }
      clone(spec) {
        if (this._mutate) {
          if (spec)
            Object.assign(this.spec, spec);
          return this;
        }
        const next = Object.create(Object.getPrototypeOf(this));
        next.type = this.type;
        next._typeCheck = this._typeCheck;
        next._whitelist = this._whitelist.clone();
        next._blacklist = this._blacklist.clone();
        next.internalTests = Object.assign({}, this.internalTests);
        next.exclusiveTests = Object.assign({}, this.exclusiveTests);
        next.deps = [...this.deps];
        next.conditions = [...this.conditions];
        next.tests = [...this.tests];
        next.transforms = [...this.transforms];
        next.spec = clone(Object.assign({}, this.spec, spec));
        return next;
      }
      label(label) {
        let next = this.clone();
        next.spec.label = label;
        return next;
      }
      meta(...args) {
        if (args.length === 0)
          return this.spec.meta;
        let next = this.clone();
        next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
        return next;
      }
      withMutation(fn) {
        let before = this._mutate;
        this._mutate = true;
        let result = fn(this);
        this._mutate = before;
        return result;
      }
      concat(schema2) {
        if (!schema2 || schema2 === this)
          return this;
        if (schema2.type !== this.type && this.type !== "mixed")
          throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema2.type}`);
        let base = this;
        let combined = schema2.clone();
        const mergedSpec = Object.assign({}, base.spec, combined.spec);
        combined.spec = mergedSpec;
        combined.internalTests = Object.assign({}, base.internalTests, combined.internalTests);
        combined._whitelist = base._whitelist.merge(schema2._whitelist, schema2._blacklist);
        combined._blacklist = base._blacklist.merge(schema2._blacklist, schema2._whitelist);
        combined.tests = base.tests;
        combined.exclusiveTests = base.exclusiveTests;
        combined.withMutation((next) => {
          schema2.tests.forEach((fn) => {
            next.test(fn.OPTIONS);
          });
        });
        combined.transforms = [...base.transforms, ...combined.transforms];
        return combined;
      }
      isType(v) {
        if (v == null) {
          if (this.spec.nullable && v === null)
            return true;
          if (this.spec.optional && v === void 0)
            return true;
          return false;
        }
        return this._typeCheck(v);
      }
      resolve(options) {
        let schema2 = this;
        if (schema2.conditions.length) {
          let conditions = schema2.conditions;
          schema2 = schema2.clone();
          schema2.conditions = [];
          schema2 = conditions.reduce((prevSchema, condition) => condition.resolve(prevSchema, options), schema2);
          schema2 = schema2.resolve(options);
        }
        return schema2;
      }
      resolveOptions(options) {
        var _options$strict, _options$abortEarly, _options$recursive, _options$disableStack;
        return Object.assign({}, options, {
          from: options.from || [],
          strict: (_options$strict = options.strict) != null ? _options$strict : this.spec.strict,
          abortEarly: (_options$abortEarly = options.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly,
          recursive: (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive,
          disableStackTrace: (_options$disableStack = options.disableStackTrace) != null ? _options$disableStack : this.spec.disableStackTrace
        });
      }
      /**
       * Run the configured transform pipeline over an input value.
       */
      cast(value, options = {}) {
        let resolvedSchema = this.resolve(Object.assign({
          value
        }, options));
        let allowOptionality = options.assert === "ignore-optionality";
        let result = resolvedSchema._cast(value, options);
        if (options.assert !== false && !resolvedSchema.isType(result)) {
          if (allowOptionality && isAbsent(result)) {
            return result;
          }
          let formattedValue = printValue(value);
          let formattedResult = printValue(result);
          throw new TypeError(`The value of ${options.path || "field"} could not be cast to a value that satisfies the schema type: "${resolvedSchema.type}". 

attempted value: ${formattedValue} 
` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ""));
        }
        return result;
      }
      _cast(rawValue, options) {
        let value = rawValue === void 0 ? rawValue : this.transforms.reduce((prevValue, fn) => fn.call(this, prevValue, rawValue, this), rawValue);
        if (value === void 0) {
          value = this.getDefault(options);
        }
        return value;
      }
      _validate(_value, options = {}, panic, next) {
        let {
          path: path4,
          originalValue = _value,
          strict = this.spec.strict
        } = options;
        let value = _value;
        if (!strict) {
          value = this._cast(value, Object.assign({
            assert: false
          }, options));
        }
        let initialTests = [];
        for (let test of Object.values(this.internalTests)) {
          if (test)
            initialTests.push(test);
        }
        this.runTests({
          path: path4,
          value,
          originalValue,
          options,
          tests: initialTests
        }, panic, (initialErrors) => {
          if (initialErrors.length) {
            return next(initialErrors, value);
          }
          this.runTests({
            path: path4,
            value,
            originalValue,
            options,
            tests: this.tests
          }, panic, next);
        });
      }
      /**
       * Executes a set of validations, either schema, produced Tests or a nested
       * schema validate result.
       */
      runTests(runOptions, panic, next) {
        let fired = false;
        let {
          tests,
          value,
          originalValue,
          path: path4,
          options
        } = runOptions;
        let panicOnce = (arg) => {
          if (fired)
            return;
          fired = true;
          panic(arg, value);
        };
        let nextOnce = (arg) => {
          if (fired)
            return;
          fired = true;
          next(arg, value);
        };
        let count = tests.length;
        let nestedErrors = [];
        if (!count)
          return nextOnce([]);
        let args = {
          value,
          originalValue,
          path: path4,
          options,
          schema: this
        };
        for (let i = 0; i < tests.length; i++) {
          const test = tests[i];
          test(args, panicOnce, function finishTestRun(err) {
            if (err) {
              Array.isArray(err) ? nestedErrors.push(...err) : nestedErrors.push(err);
            }
            if (--count <= 0) {
              nextOnce(nestedErrors);
            }
          });
        }
      }
      asNestedTest({
        key,
        index,
        parent,
        parentPath,
        originalParent,
        options
      }) {
        const k = key != null ? key : index;
        if (k == null) {
          throw TypeError("Must include `key` or `index` for nested validations");
        }
        const isIndex = typeof k === "number";
        let value = parent[k];
        const testOptions = Object.assign({}, options, {
          // Nested validations fields are always strict:
          //    1. parent isn't strict so the casting will also have cast inner values
          //    2. parent is strict in which case the nested values weren't cast either
          strict: true,
          parent,
          value,
          originalValue: originalParent[k],
          // FIXME: tests depend on `index` being passed around deeply,
          //   we should not let the options.key/index bleed through
          key: void 0,
          // index: undefined,
          [isIndex ? "index" : "key"]: k,
          path: isIndex || k.includes(".") ? `${parentPath || ""}[${isIndex ? k : `"${k}"`}]` : (parentPath ? `${parentPath}.` : "") + key
        });
        return (_, panic, next) => this.resolve(testOptions)._validate(value, testOptions, panic, next);
      }
      validate(value, options) {
        var _options$disableStack2;
        let schema2 = this.resolve(Object.assign({}, options, {
          value
        }));
        let disableStackTrace = (_options$disableStack2 = options == null ? void 0 : options.disableStackTrace) != null ? _options$disableStack2 : schema2.spec.disableStackTrace;
        return new Promise((resolve3, reject) => schema2._validate(value, options, (error, parsed) => {
          if (ValidationError.isError(error))
            error.value = parsed;
          reject(error);
        }, (errors, validated) => {
          if (errors.length)
            reject(new ValidationError(errors, validated, void 0, void 0, disableStackTrace));
          else
            resolve3(validated);
        }));
      }
      validateSync(value, options) {
        var _options$disableStack3;
        let schema2 = this.resolve(Object.assign({}, options, {
          value
        }));
        let result;
        let disableStackTrace = (_options$disableStack3 = options == null ? void 0 : options.disableStackTrace) != null ? _options$disableStack3 : schema2.spec.disableStackTrace;
        schema2._validate(value, Object.assign({}, options, {
          sync: true
        }), (error, parsed) => {
          if (ValidationError.isError(error))
            error.value = parsed;
          throw error;
        }, (errors, validated) => {
          if (errors.length)
            throw new ValidationError(errors, value, void 0, void 0, disableStackTrace);
          result = validated;
        });
        return result;
      }
      isValid(value, options) {
        return this.validate(value, options).then(() => true, (err) => {
          if (ValidationError.isError(err))
            return false;
          throw err;
        });
      }
      isValidSync(value, options) {
        try {
          this.validateSync(value, options);
          return true;
        } catch (err) {
          if (ValidationError.isError(err))
            return false;
          throw err;
        }
      }
      _getDefault(options) {
        let defaultValue = this.spec.default;
        if (defaultValue == null) {
          return defaultValue;
        }
        return typeof defaultValue === "function" ? defaultValue.call(this, options) : clone(defaultValue);
      }
      getDefault(options) {
        let schema2 = this.resolve(options || {});
        return schema2._getDefault(options);
      }
      default(def) {
        if (arguments.length === 0) {
          return this._getDefault();
        }
        let next = this.clone({
          default: def
        });
        return next;
      }
      strict(isStrict = true) {
        return this.clone({
          strict: isStrict
        });
      }
      nullability(nullable, message) {
        const next = this.clone({
          nullable
        });
        next.internalTests.nullable = createValidation({
          message,
          name: "nullable",
          test(value) {
            return value === null ? this.schema.spec.nullable : true;
          }
        });
        return next;
      }
      optionality(optional, message) {
        const next = this.clone({
          optional
        });
        next.internalTests.optionality = createValidation({
          message,
          name: "optionality",
          test(value) {
            return value === void 0 ? this.schema.spec.optional : true;
          }
        });
        return next;
      }
      optional() {
        return this.optionality(true);
      }
      defined(message = mixed.defined) {
        return this.optionality(false, message);
      }
      nullable() {
        return this.nullability(true);
      }
      nonNullable(message = mixed.notNull) {
        return this.nullability(false, message);
      }
      required(message = mixed.required) {
        return this.clone().withMutation((next) => next.nonNullable(message).defined(message));
      }
      notRequired() {
        return this.clone().withMutation((next) => next.nullable().optional());
      }
      transform(fn) {
        let next = this.clone();
        next.transforms.push(fn);
        return next;
      }
      /**
       * Adds a test function to the schema's queue of tests.
       * tests can be exclusive or non-exclusive.
       *
       * - exclusive tests, will replace any existing tests of the same name.
       * - non-exclusive: can be stacked
       *
       * If a non-exclusive test is added to a schema with an exclusive test of the same name
       * the exclusive test is removed and further tests of the same name will be stacked.
       *
       * If an exclusive test is added to a schema with non-exclusive tests of the same name
       * the previous tests are removed and further tests of the same name will replace each other.
       */
      test(...args) {
        let opts;
        if (args.length === 1) {
          if (typeof args[0] === "function") {
            opts = {
              test: args[0]
            };
          } else {
            opts = args[0];
          }
        } else if (args.length === 2) {
          opts = {
            name: args[0],
            test: args[1]
          };
        } else {
          opts = {
            name: args[0],
            message: args[1],
            test: args[2]
          };
        }
        if (opts.message === void 0)
          opts.message = mixed.default;
        if (typeof opts.test !== "function")
          throw new TypeError("`test` is a required parameters");
        let next = this.clone();
        let validate = createValidation(opts);
        let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
        if (opts.exclusive) {
          if (!opts.name)
            throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
        }
        if (opts.name)
          next.exclusiveTests[opts.name] = !!opts.exclusive;
        next.tests = next.tests.filter((fn) => {
          if (fn.OPTIONS.name === opts.name) {
            if (isExclusive)
              return false;
            if (fn.OPTIONS.test === validate.OPTIONS.test)
              return false;
          }
          return true;
        });
        next.tests.push(validate);
        return next;
      }
      when(keys, options) {
        if (!Array.isArray(keys) && typeof keys !== "string") {
          options = keys;
          keys = ".";
        }
        let next = this.clone();
        let deps = toArray(keys).map((key) => new Reference(key));
        deps.forEach((dep) => {
          if (dep.isSibling)
            next.deps.push(dep.key);
        });
        next.conditions.push(typeof options === "function" ? new Condition(deps, options) : Condition.fromOptions(deps, options));
        return next;
      }
      typeError(message) {
        let next = this.clone();
        next.internalTests.typeError = createValidation({
          message,
          name: "typeError",
          skipAbsent: true,
          test(value) {
            if (!this.schema._typeCheck(value))
              return this.createError({
                params: {
                  type: this.schema.type
                }
              });
            return true;
          }
        });
        return next;
      }
      oneOf(enums, message = mixed.oneOf) {
        let next = this.clone();
        enums.forEach((val) => {
          next._whitelist.add(val);
          next._blacklist.delete(val);
        });
        next.internalTests.whiteList = createValidation({
          message,
          name: "oneOf",
          skipAbsent: true,
          test(value) {
            let valids = this.schema._whitelist;
            let resolved = valids.resolveAll(this.resolve);
            return resolved.includes(value) ? true : this.createError({
              params: {
                values: Array.from(valids).join(", "),
                resolved
              }
            });
          }
        });
        return next;
      }
      notOneOf(enums, message = mixed.notOneOf) {
        let next = this.clone();
        enums.forEach((val) => {
          next._blacklist.add(val);
          next._whitelist.delete(val);
        });
        next.internalTests.blacklist = createValidation({
          message,
          name: "notOneOf",
          test(value) {
            let invalids = this.schema._blacklist;
            let resolved = invalids.resolveAll(this.resolve);
            if (resolved.includes(value))
              return this.createError({
                params: {
                  values: Array.from(invalids).join(", "),
                  resolved
                }
              });
            return true;
          }
        });
        return next;
      }
      strip(strip = true) {
        let next = this.clone();
        next.spec.strip = strip;
        return next;
      }
      /**
       * Return a serialized description of the schema including validations, flags, types etc.
       *
       * @param options Provide any needed context for resolving runtime schema alterations (lazy, when conditions, etc).
       */
      describe(options) {
        const next = (options ? this.resolve(options) : this).clone();
        const {
          label,
          meta,
          optional,
          nullable
        } = next.spec;
        const description = {
          meta,
          label,
          optional,
          nullable,
          default: next.getDefault(options),
          type: next.type,
          oneOf: next._whitelist.describe(),
          notOneOf: next._blacklist.describe(),
          tests: next.tests.map((fn) => ({
            name: fn.OPTIONS.name,
            params: fn.OPTIONS.params
          })).filter((n, idx, list) => list.findIndex((c) => c.name === n.name) === idx)
        };
        return description;
      }
    };
    Schema.prototype.__isYupSchema__ = true;
    for (const method of ["validate", "validateSync"])
      Schema.prototype[`${method}At`] = function(path4, value, options = {}) {
        const {
          parent,
          parentPath,
          schema: schema2
        } = getIn(this, path4, value, options.context);
        return schema2[method](parent && parent[parentPath], Object.assign({}, options, {
          parent,
          path: path4
        }));
      };
    for (const alias of ["equals", "is"])
      Schema.prototype[alias] = Schema.prototype.oneOf;
    for (const alias of ["not", "nope"])
      Schema.prototype[alias] = Schema.prototype.notOneOf;
    var returnsTrue = () => true;
    function create$8(spec) {
      return new MixedSchema(spec);
    }
    var MixedSchema = class extends Schema {
      constructor(spec) {
        super(typeof spec === "function" ? {
          type: "mixed",
          check: spec
        } : Object.assign({
          type: "mixed",
          check: returnsTrue
        }, spec));
      }
    };
    create$8.prototype = MixedSchema.prototype;
    function create$7() {
      return new BooleanSchema();
    }
    var BooleanSchema = class extends Schema {
      constructor() {
        super({
          type: "boolean",
          check(v) {
            if (v instanceof Boolean)
              v = v.valueOf();
            return typeof v === "boolean";
          }
        });
        this.withMutation(() => {
          this.transform((value, _raw, ctx) => {
            if (ctx.spec.coerce && !ctx.isType(value)) {
              if (/^(true|1)$/i.test(String(value)))
                return true;
              if (/^(false|0)$/i.test(String(value)))
                return false;
            }
            return value;
          });
        });
      }
      isTrue(message = boolean2.isValue) {
        return this.test({
          message,
          name: "is-value",
          exclusive: true,
          params: {
            value: "true"
          },
          test(value) {
            return isAbsent(value) || value === true;
          }
        });
      }
      isFalse(message = boolean2.isValue) {
        return this.test({
          message,
          name: "is-value",
          exclusive: true,
          params: {
            value: "false"
          },
          test(value) {
            return isAbsent(value) || value === false;
          }
        });
      }
      default(def) {
        return super.default(def);
      }
      defined(msg) {
        return super.defined(msg);
      }
      optional() {
        return super.optional();
      }
      required(msg) {
        return super.required(msg);
      }
      notRequired() {
        return super.notRequired();
      }
      nullable() {
        return super.nullable();
      }
      nonNullable(msg) {
        return super.nonNullable(msg);
      }
      strip(v) {
        return super.strip(v);
      }
    };
    create$7.prototype = BooleanSchema.prototype;
    var isoReg = /^(\d{4}|[+-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,.](\d{1,}))?)?(?:(Z)|([+-])(\d{2})(?::?(\d{2}))?)?)?$/;
    function parseIsoDate(date2) {
      const struct = parseDateStruct(date2);
      if (!struct)
        return Date.parse ? Date.parse(date2) : Number.NaN;
      if (struct.z === void 0 && struct.plusMinus === void 0) {
        return new Date(struct.year, struct.month, struct.day, struct.hour, struct.minute, struct.second, struct.millisecond).valueOf();
      }
      let totalMinutesOffset = 0;
      if (struct.z !== "Z" && struct.plusMinus !== void 0) {
        totalMinutesOffset = struct.hourOffset * 60 + struct.minuteOffset;
        if (struct.plusMinus === "+")
          totalMinutesOffset = 0 - totalMinutesOffset;
      }
      return Date.UTC(struct.year, struct.month, struct.day, struct.hour, struct.minute + totalMinutesOffset, struct.second, struct.millisecond);
    }
    function parseDateStruct(date2) {
      var _regexResult$7$length, _regexResult$;
      const regexResult = isoReg.exec(date2);
      if (!regexResult)
        return null;
      return {
        year: toNumber(regexResult[1]),
        month: toNumber(regexResult[2], 1) - 1,
        day: toNumber(regexResult[3], 1),
        hour: toNumber(regexResult[4]),
        minute: toNumber(regexResult[5]),
        second: toNumber(regexResult[6]),
        millisecond: regexResult[7] ? (
          // allow arbitrary sub-second precision beyond milliseconds
          toNumber(regexResult[7].substring(0, 3))
        ) : 0,
        precision: (_regexResult$7$length = (_regexResult$ = regexResult[7]) == null ? void 0 : _regexResult$.length) != null ? _regexResult$7$length : void 0,
        z: regexResult[8] || void 0,
        plusMinus: regexResult[9] || void 0,
        hourOffset: toNumber(regexResult[10]),
        minuteOffset: toNumber(regexResult[11])
      };
    }
    function toNumber(str, defaultValue = 0) {
      return Number(str) || defaultValue;
    }
    var rEmail = (
      // eslint-disable-next-line
      /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
    );
    var rUrl = (
      // eslint-disable-next-line
      /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
    );
    var rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    var yearMonthDay = "^\\d{4}-\\d{2}-\\d{2}";
    var hourMinuteSecond = "\\d{2}:\\d{2}:\\d{2}";
    var zOrOffset = "(([+-]\\d{2}(:?\\d{2})?)|Z)";
    var rIsoDateTime = new RegExp(`${yearMonthDay}T${hourMinuteSecond}(\\.\\d+)?${zOrOffset}$`);
    var isTrimmed = (value) => isAbsent(value) || value === value.trim();
    var objStringTag = {}.toString();
    function create$6() {
      return new StringSchema();
    }
    var StringSchema = class extends Schema {
      constructor() {
        super({
          type: "string",
          check(value) {
            if (value instanceof String)
              value = value.valueOf();
            return typeof value === "string";
          }
        });
        this.withMutation(() => {
          this.transform((value, _raw, ctx) => {
            if (!ctx.spec.coerce || ctx.isType(value))
              return value;
            if (Array.isArray(value))
              return value;
            const strValue = value != null && value.toString ? value.toString() : value;
            if (strValue === objStringTag)
              return value;
            return strValue;
          });
        });
      }
      required(message) {
        return super.required(message).withMutation((schema2) => schema2.test({
          message: message || mixed.required,
          name: "required",
          skipAbsent: true,
          test: (value) => !!value.length
        }));
      }
      notRequired() {
        return super.notRequired().withMutation((schema2) => {
          schema2.tests = schema2.tests.filter((t) => t.OPTIONS.name !== "required");
          return schema2;
        });
      }
      length(length, message = string2.length) {
        return this.test({
          message,
          name: "length",
          exclusive: true,
          params: {
            length
          },
          skipAbsent: true,
          test(value) {
            return value.length === this.resolve(length);
          }
        });
      }
      min(min, message = string2.min) {
        return this.test({
          message,
          name: "min",
          exclusive: true,
          params: {
            min
          },
          skipAbsent: true,
          test(value) {
            return value.length >= this.resolve(min);
          }
        });
      }
      max(max, message = string2.max) {
        return this.test({
          name: "max",
          exclusive: true,
          message,
          params: {
            max
          },
          skipAbsent: true,
          test(value) {
            return value.length <= this.resolve(max);
          }
        });
      }
      matches(regex, options) {
        let excludeEmptyString = false;
        let message;
        let name;
        if (options) {
          if (typeof options === "object") {
            ({
              excludeEmptyString = false,
              message,
              name
            } = options);
          } else {
            message = options;
          }
        }
        return this.test({
          name: name || "matches",
          message: message || string2.matches,
          params: {
            regex
          },
          skipAbsent: true,
          test: (value) => value === "" && excludeEmptyString || value.search(regex) !== -1
        });
      }
      email(message = string2.email) {
        return this.matches(rEmail, {
          name: "email",
          message,
          excludeEmptyString: true
        });
      }
      url(message = string2.url) {
        return this.matches(rUrl, {
          name: "url",
          message,
          excludeEmptyString: true
        });
      }
      uuid(message = string2.uuid) {
        return this.matches(rUUID, {
          name: "uuid",
          message,
          excludeEmptyString: false
        });
      }
      datetime(options) {
        let message = "";
        let allowOffset;
        let precision;
        if (options) {
          if (typeof options === "object") {
            ({
              message = "",
              allowOffset = false,
              precision = void 0
            } = options);
          } else {
            message = options;
          }
        }
        return this.matches(rIsoDateTime, {
          name: "datetime",
          message: message || string2.datetime,
          excludeEmptyString: true
        }).test({
          name: "datetime_offset",
          message: message || string2.datetime_offset,
          params: {
            allowOffset
          },
          skipAbsent: true,
          test: (value) => {
            if (!value || allowOffset)
              return true;
            const struct = parseDateStruct(value);
            if (!struct)
              return false;
            return !!struct.z;
          }
        }).test({
          name: "datetime_precision",
          message: message || string2.datetime_precision,
          params: {
            precision
          },
          skipAbsent: true,
          test: (value) => {
            if (!value || precision == void 0)
              return true;
            const struct = parseDateStruct(value);
            if (!struct)
              return false;
            return struct.precision === precision;
          }
        });
      }
      //-- transforms --
      ensure() {
        return this.default("").transform((val) => val === null ? "" : val);
      }
      trim(message = string2.trim) {
        return this.transform((val) => val != null ? val.trim() : val).test({
          message,
          name: "trim",
          test: isTrimmed
        });
      }
      lowercase(message = string2.lowercase) {
        return this.transform((value) => !isAbsent(value) ? value.toLowerCase() : value).test({
          message,
          name: "string_case",
          exclusive: true,
          skipAbsent: true,
          test: (value) => isAbsent(value) || value === value.toLowerCase()
        });
      }
      uppercase(message = string2.uppercase) {
        return this.transform((value) => !isAbsent(value) ? value.toUpperCase() : value).test({
          message,
          name: "string_case",
          exclusive: true,
          skipAbsent: true,
          test: (value) => isAbsent(value) || value === value.toUpperCase()
        });
      }
    };
    create$6.prototype = StringSchema.prototype;
    var isNaN$1 = (value) => value != +value;
    function create$5() {
      return new NumberSchema();
    }
    var NumberSchema = class extends Schema {
      constructor() {
        super({
          type: "number",
          check(value) {
            if (value instanceof Number)
              value = value.valueOf();
            return typeof value === "number" && !isNaN$1(value);
          }
        });
        this.withMutation(() => {
          this.transform((value, _raw, ctx) => {
            if (!ctx.spec.coerce)
              return value;
            let parsed = value;
            if (typeof parsed === "string") {
              parsed = parsed.replace(/\s/g, "");
              if (parsed === "")
                return NaN;
              parsed = +parsed;
            }
            if (ctx.isType(parsed) || parsed === null)
              return parsed;
            return parseFloat(parsed);
          });
        });
      }
      min(min, message = number.min) {
        return this.test({
          message,
          name: "min",
          exclusive: true,
          params: {
            min
          },
          skipAbsent: true,
          test(value) {
            return value >= this.resolve(min);
          }
        });
      }
      max(max, message = number.max) {
        return this.test({
          message,
          name: "max",
          exclusive: true,
          params: {
            max
          },
          skipAbsent: true,
          test(value) {
            return value <= this.resolve(max);
          }
        });
      }
      lessThan(less, message = number.lessThan) {
        return this.test({
          message,
          name: "max",
          exclusive: true,
          params: {
            less
          },
          skipAbsent: true,
          test(value) {
            return value < this.resolve(less);
          }
        });
      }
      moreThan(more, message = number.moreThan) {
        return this.test({
          message,
          name: "min",
          exclusive: true,
          params: {
            more
          },
          skipAbsent: true,
          test(value) {
            return value > this.resolve(more);
          }
        });
      }
      positive(msg = number.positive) {
        return this.moreThan(0, msg);
      }
      negative(msg = number.negative) {
        return this.lessThan(0, msg);
      }
      integer(message = number.integer) {
        return this.test({
          name: "integer",
          message,
          skipAbsent: true,
          test: (val) => Number.isInteger(val)
        });
      }
      truncate() {
        return this.transform((value) => !isAbsent(value) ? value | 0 : value);
      }
      round(method) {
        var _method;
        let avail = ["ceil", "floor", "round", "trunc"];
        method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || "round";
        if (method === "trunc")
          return this.truncate();
        if (avail.indexOf(method.toLowerCase()) === -1)
          throw new TypeError("Only valid options for round() are: " + avail.join(", "));
        return this.transform((value) => !isAbsent(value) ? Math[method](value) : value);
      }
    };
    create$5.prototype = NumberSchema.prototype;
    var invalidDate = /* @__PURE__ */ new Date("");
    var isDate = (obj) => Object.prototype.toString.call(obj) === "[object Date]";
    function create$4() {
      return new DateSchema();
    }
    var DateSchema = class _DateSchema extends Schema {
      constructor() {
        super({
          type: "date",
          check(v) {
            return isDate(v) && !isNaN(v.getTime());
          }
        });
        this.withMutation(() => {
          this.transform((value, _raw, ctx) => {
            if (!ctx.spec.coerce || ctx.isType(value) || value === null)
              return value;
            value = parseIsoDate(value);
            return !isNaN(value) ? new Date(value) : _DateSchema.INVALID_DATE;
          });
        });
      }
      prepareParam(ref, name) {
        let param;
        if (!Reference.isRef(ref)) {
          let cast = this.cast(ref);
          if (!this._typeCheck(cast))
            throw new TypeError(`\`${name}\` must be a Date or a value that can be \`cast()\` to a Date`);
          param = cast;
        } else {
          param = ref;
        }
        return param;
      }
      min(min, message = date.min) {
        let limit = this.prepareParam(min, "min");
        return this.test({
          message,
          name: "min",
          exclusive: true,
          params: {
            min
          },
          skipAbsent: true,
          test(value) {
            return value >= this.resolve(limit);
          }
        });
      }
      max(max, message = date.max) {
        let limit = this.prepareParam(max, "max");
        return this.test({
          message,
          name: "max",
          exclusive: true,
          params: {
            max
          },
          skipAbsent: true,
          test(value) {
            return value <= this.resolve(limit);
          }
        });
      }
    };
    DateSchema.INVALID_DATE = invalidDate;
    create$4.prototype = DateSchema.prototype;
    create$4.INVALID_DATE = invalidDate;
    function sortFields(fields, excludedEdges = []) {
      let edges = [];
      let nodes = /* @__PURE__ */ new Set();
      let excludes = new Set(excludedEdges.map(([a, b]) => `${a}-${b}`));
      function addNode(depPath, key) {
        let node = propertyExpr.split(depPath)[0];
        nodes.add(node);
        if (!excludes.has(`${key}-${node}`))
          edges.push([key, node]);
      }
      for (const key of Object.keys(fields)) {
        let value = fields[key];
        nodes.add(key);
        if (Reference.isRef(value) && value.isSibling)
          addNode(value.path, key);
        else if (isSchema(value) && "deps" in value)
          value.deps.forEach((path4) => addNode(path4, key));
      }
      return toposort__default["default"].array(Array.from(nodes), edges).reverse();
    }
    function findIndex(arr, err) {
      let idx = Infinity;
      arr.some((key, ii) => {
        var _err$path;
        if ((_err$path = err.path) != null && _err$path.includes(key)) {
          idx = ii;
          return true;
        }
      });
      return idx;
    }
    function sortByKeyOrder(keys) {
      return (a, b) => {
        return findIndex(keys, a) - findIndex(keys, b);
      };
    }
    var parseJson = (value, _, ctx) => {
      if (typeof value !== "string") {
        return value;
      }
      let parsed = value;
      try {
        parsed = JSON.parse(value);
      } catch (err) {
      }
      return ctx.isType(parsed) ? parsed : value;
    };
    function deepPartial(schema2) {
      if ("fields" in schema2) {
        const partial = {};
        for (const [key, fieldSchema] of Object.entries(schema2.fields)) {
          partial[key] = deepPartial(fieldSchema);
        }
        return schema2.setFields(partial);
      }
      if (schema2.type === "array") {
        const nextArray = schema2.optional();
        if (nextArray.innerType)
          nextArray.innerType = deepPartial(nextArray.innerType);
        return nextArray;
      }
      if (schema2.type === "tuple") {
        return schema2.optional().clone({
          types: schema2.spec.types.map(deepPartial)
        });
      }
      if ("optional" in schema2) {
        return schema2.optional();
      }
      return schema2;
    }
    var deepHas = (obj, p) => {
      const path4 = [...propertyExpr.normalizePath(p)];
      if (path4.length === 1)
        return path4[0] in obj;
      let last = path4.pop();
      let parent = propertyExpr.getter(propertyExpr.join(path4), true)(obj);
      return !!(parent && last in parent);
    };
    var isObject = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
    function unknown(ctx, value) {
      let known = Object.keys(ctx.fields);
      return Object.keys(value).filter((key) => known.indexOf(key) === -1);
    }
    var defaultSort = sortByKeyOrder([]);
    function create$3(spec) {
      return new ObjectSchema(spec);
    }
    var ObjectSchema = class extends Schema {
      constructor(spec) {
        super({
          type: "object",
          check(value) {
            return isObject(value) || typeof value === "function";
          }
        });
        this.fields = /* @__PURE__ */ Object.create(null);
        this._sortErrors = defaultSort;
        this._nodes = [];
        this._excludedEdges = [];
        this.withMutation(() => {
          if (spec) {
            this.shape(spec);
          }
        });
      }
      _cast(_value, options = {}) {
        var _options$stripUnknown;
        let value = super._cast(_value, options);
        if (value === void 0)
          return this.getDefault(options);
        if (!this._typeCheck(value))
          return value;
        let fields = this.fields;
        let strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
        let props = [].concat(this._nodes, Object.keys(value).filter((v) => !this._nodes.includes(v)));
        let intermediateValue = {};
        let innerOptions = Object.assign({}, options, {
          parent: intermediateValue,
          __validating: options.__validating || false
        });
        let isChanged = false;
        for (const prop of props) {
          let field = fields[prop];
          let exists = prop in value;
          if (field) {
            let fieldValue;
            let inputValue = value[prop];
            innerOptions.path = (options.path ? `${options.path}.` : "") + prop;
            field = field.resolve({
              value: inputValue,
              context: options.context,
              parent: intermediateValue
            });
            let fieldSpec = field instanceof Schema ? field.spec : void 0;
            let strict = fieldSpec == null ? void 0 : fieldSpec.strict;
            if (fieldSpec != null && fieldSpec.strip) {
              isChanged = isChanged || prop in value;
              continue;
            }
            fieldValue = !options.__validating || !strict ? (
              // TODO: use _cast, this is double resolving
              field.cast(value[prop], innerOptions)
            ) : value[prop];
            if (fieldValue !== void 0) {
              intermediateValue[prop] = fieldValue;
            }
          } else if (exists && !strip) {
            intermediateValue[prop] = value[prop];
          }
          if (exists !== prop in intermediateValue || intermediateValue[prop] !== value[prop]) {
            isChanged = true;
          }
        }
        return isChanged ? intermediateValue : value;
      }
      _validate(_value, options = {}, panic, next) {
        let {
          from = [],
          originalValue = _value,
          recursive = this.spec.recursive
        } = options;
        options.from = [{
          schema: this,
          value: originalValue
        }, ...from];
        options.__validating = true;
        options.originalValue = originalValue;
        super._validate(_value, options, panic, (objectErrors, value) => {
          if (!recursive || !isObject(value)) {
            next(objectErrors, value);
            return;
          }
          originalValue = originalValue || value;
          let tests = [];
          for (let key of this._nodes) {
            let field = this.fields[key];
            if (!field || Reference.isRef(field)) {
              continue;
            }
            tests.push(field.asNestedTest({
              options,
              key,
              parent: value,
              parentPath: options.path,
              originalParent: originalValue
            }));
          }
          this.runTests({
            tests,
            value,
            originalValue,
            options
          }, panic, (fieldErrors) => {
            next(fieldErrors.sort(this._sortErrors).concat(objectErrors), value);
          });
        });
      }
      clone(spec) {
        const next = super.clone(spec);
        next.fields = Object.assign({}, this.fields);
        next._nodes = this._nodes;
        next._excludedEdges = this._excludedEdges;
        next._sortErrors = this._sortErrors;
        return next;
      }
      concat(schema2) {
        let next = super.concat(schema2);
        let nextFields = next.fields;
        for (let [field, schemaOrRef] of Object.entries(this.fields)) {
          const target = nextFields[field];
          nextFields[field] = target === void 0 ? schemaOrRef : target;
        }
        return next.withMutation((s) => (
          // XXX: excludes here is wrong
          s.setFields(nextFields, [...this._excludedEdges, ...schema2._excludedEdges])
        ));
      }
      _getDefault(options) {
        if ("default" in this.spec) {
          return super._getDefault(options);
        }
        if (!this._nodes.length) {
          return void 0;
        }
        let dft = {};
        this._nodes.forEach((key) => {
          var _innerOptions;
          const field = this.fields[key];
          let innerOptions = options;
          if ((_innerOptions = innerOptions) != null && _innerOptions.value) {
            innerOptions = Object.assign({}, innerOptions, {
              parent: innerOptions.value,
              value: innerOptions.value[key]
            });
          }
          dft[key] = field && "getDefault" in field ? field.getDefault(innerOptions) : void 0;
        });
        return dft;
      }
      setFields(shape, excludedEdges) {
        let next = this.clone();
        next.fields = shape;
        next._nodes = sortFields(shape, excludedEdges);
        next._sortErrors = sortByKeyOrder(Object.keys(shape));
        if (excludedEdges)
          next._excludedEdges = excludedEdges;
        return next;
      }
      shape(additions, excludes = []) {
        return this.clone().withMutation((next) => {
          let edges = next._excludedEdges;
          if (excludes.length) {
            if (!Array.isArray(excludes[0]))
              excludes = [excludes];
            edges = [...next._excludedEdges, ...excludes];
          }
          return next.setFields(Object.assign(next.fields, additions), edges);
        });
      }
      partial() {
        const partial = {};
        for (const [key, schema2] of Object.entries(this.fields)) {
          partial[key] = "optional" in schema2 && schema2.optional instanceof Function ? schema2.optional() : schema2;
        }
        return this.setFields(partial);
      }
      deepPartial() {
        const next = deepPartial(this);
        return next;
      }
      pick(keys) {
        const picked = {};
        for (const key of keys) {
          if (this.fields[key])
            picked[key] = this.fields[key];
        }
        return this.setFields(picked, this._excludedEdges.filter(([a, b]) => keys.includes(a) && keys.includes(b)));
      }
      omit(keys) {
        const remaining = [];
        for (const key of Object.keys(this.fields)) {
          if (keys.includes(key))
            continue;
          remaining.push(key);
        }
        return this.pick(remaining);
      }
      from(from, to, alias) {
        let fromGetter = propertyExpr.getter(from, true);
        return this.transform((obj) => {
          if (!obj)
            return obj;
          let newObj = obj;
          if (deepHas(obj, from)) {
            newObj = Object.assign({}, obj);
            if (!alias)
              delete newObj[from];
            newObj[to] = fromGetter(obj);
          }
          return newObj;
        });
      }
      /** Parse an input JSON string to an object */
      json() {
        return this.transform(parseJson);
      }
      /**
       * Similar to `noUnknown` but only validates that an object is the right shape without stripping the unknown keys
       */
      exact(message) {
        return this.test({
          name: "exact",
          exclusive: true,
          message: message || object2.exact,
          test(value) {
            if (value == null)
              return true;
            const unknownKeys = unknown(this.schema, value);
            return unknownKeys.length === 0 || this.createError({
              params: {
                properties: unknownKeys.join(", ")
              }
            });
          }
        });
      }
      stripUnknown() {
        return this.clone({
          noUnknown: true
        });
      }
      noUnknown(noAllow = true, message = object2.noUnknown) {
        if (typeof noAllow !== "boolean") {
          message = noAllow;
          noAllow = true;
        }
        let next = this.test({
          name: "noUnknown",
          exclusive: true,
          message,
          test(value) {
            if (value == null)
              return true;
            const unknownKeys = unknown(this.schema, value);
            return !noAllow || unknownKeys.length === 0 || this.createError({
              params: {
                unknown: unknownKeys.join(", ")
              }
            });
          }
        });
        next.spec.noUnknown = noAllow;
        return next;
      }
      unknown(allow = true, message = object2.noUnknown) {
        return this.noUnknown(!allow, message);
      }
      transformKeys(fn) {
        return this.transform((obj) => {
          if (!obj)
            return obj;
          const result = {};
          for (const key of Object.keys(obj))
            result[fn(key)] = obj[key];
          return result;
        });
      }
      camelCase() {
        return this.transformKeys(tinyCase.camelCase);
      }
      snakeCase() {
        return this.transformKeys(tinyCase.snakeCase);
      }
      constantCase() {
        return this.transformKeys((key) => tinyCase.snakeCase(key).toUpperCase());
      }
      describe(options) {
        const next = (options ? this.resolve(options) : this).clone();
        const base = super.describe(options);
        base.fields = {};
        for (const [key, value] of Object.entries(next.fields)) {
          var _innerOptions2;
          let innerOptions = options;
          if ((_innerOptions2 = innerOptions) != null && _innerOptions2.value) {
            innerOptions = Object.assign({}, innerOptions, {
              parent: innerOptions.value,
              value: innerOptions.value[key]
            });
          }
          base.fields[key] = value.describe(innerOptions);
        }
        return base;
      }
    };
    create$3.prototype = ObjectSchema.prototype;
    function create$2(type) {
      return new ArraySchema(type);
    }
    var ArraySchema = class extends Schema {
      constructor(type) {
        super({
          type: "array",
          spec: {
            types: type
          },
          check(v) {
            return Array.isArray(v);
          }
        });
        this.innerType = void 0;
        this.innerType = type;
      }
      _cast(_value, _opts) {
        const value = super._cast(_value, _opts);
        if (!this._typeCheck(value) || !this.innerType) {
          return value;
        }
        let isChanged = false;
        const castArray = value.map((v, idx) => {
          const castElement = this.innerType.cast(v, Object.assign({}, _opts, {
            path: `${_opts.path || ""}[${idx}]`
          }));
          if (castElement !== v) {
            isChanged = true;
          }
          return castElement;
        });
        return isChanged ? castArray : value;
      }
      _validate(_value, options = {}, panic, next) {
        var _options$recursive;
        let innerType = this.innerType;
        let recursive = (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive;
        options.originalValue != null ? options.originalValue : _value;
        super._validate(_value, options, panic, (arrayErrors, value) => {
          var _options$originalValu2;
          if (!recursive || !innerType || !this._typeCheck(value)) {
            next(arrayErrors, value);
            return;
          }
          let tests = new Array(value.length);
          for (let index = 0; index < value.length; index++) {
            var _options$originalValu;
            tests[index] = innerType.asNestedTest({
              options,
              index,
              parent: value,
              parentPath: options.path,
              originalParent: (_options$originalValu = options.originalValue) != null ? _options$originalValu : _value
            });
          }
          this.runTests({
            value,
            tests,
            originalValue: (_options$originalValu2 = options.originalValue) != null ? _options$originalValu2 : _value,
            options
          }, panic, (innerTypeErrors) => next(innerTypeErrors.concat(arrayErrors), value));
        });
      }
      clone(spec) {
        const next = super.clone(spec);
        next.innerType = this.innerType;
        return next;
      }
      /** Parse an input JSON string to an object */
      json() {
        return this.transform(parseJson);
      }
      concat(schema2) {
        let next = super.concat(schema2);
        next.innerType = this.innerType;
        if (schema2.innerType)
          next.innerType = next.innerType ? (
            // @ts-expect-error Lazy doesn't have concat and will break
            next.innerType.concat(schema2.innerType)
          ) : schema2.innerType;
        return next;
      }
      of(schema2) {
        let next = this.clone();
        if (!isSchema(schema2))
          throw new TypeError("`array.of()` sub-schema must be a valid yup schema not: " + printValue(schema2));
        next.innerType = schema2;
        next.spec = Object.assign({}, next.spec, {
          types: schema2
        });
        return next;
      }
      length(length, message = array.length) {
        return this.test({
          message,
          name: "length",
          exclusive: true,
          params: {
            length
          },
          skipAbsent: true,
          test(value) {
            return value.length === this.resolve(length);
          }
        });
      }
      min(min, message) {
        message = message || array.min;
        return this.test({
          message,
          name: "min",
          exclusive: true,
          params: {
            min
          },
          skipAbsent: true,
          // FIXME(ts): Array<typeof T>
          test(value) {
            return value.length >= this.resolve(min);
          }
        });
      }
      max(max, message) {
        message = message || array.max;
        return this.test({
          message,
          name: "max",
          exclusive: true,
          params: {
            max
          },
          skipAbsent: true,
          test(value) {
            return value.length <= this.resolve(max);
          }
        });
      }
      ensure() {
        return this.default(() => []).transform((val, original) => {
          if (this._typeCheck(val))
            return val;
          return original == null ? [] : [].concat(original);
        });
      }
      compact(rejector) {
        let reject = !rejector ? (v) => !!v : (v, i, a) => !rejector(v, i, a);
        return this.transform((values) => values != null ? values.filter(reject) : values);
      }
      describe(options) {
        const next = (options ? this.resolve(options) : this).clone();
        const base = super.describe(options);
        if (next.innerType) {
          var _innerOptions;
          let innerOptions = options;
          if ((_innerOptions = innerOptions) != null && _innerOptions.value) {
            innerOptions = Object.assign({}, innerOptions, {
              parent: innerOptions.value,
              value: innerOptions.value[0]
            });
          }
          base.innerType = next.innerType.describe(innerOptions);
        }
        return base;
      }
    };
    create$2.prototype = ArraySchema.prototype;
    function create$1(schemas) {
      return new TupleSchema(schemas);
    }
    var TupleSchema = class extends Schema {
      constructor(schemas) {
        super({
          type: "tuple",
          spec: {
            types: schemas
          },
          check(v) {
            const types2 = this.spec.types;
            return Array.isArray(v) && v.length === types2.length;
          }
        });
        this.withMutation(() => {
          this.typeError(tuple.notType);
        });
      }
      _cast(inputValue, options) {
        const {
          types: types2
        } = this.spec;
        const value = super._cast(inputValue, options);
        if (!this._typeCheck(value)) {
          return value;
        }
        let isChanged = false;
        const castArray = types2.map((type, idx) => {
          const castElement = type.cast(value[idx], Object.assign({}, options, {
            path: `${options.path || ""}[${idx}]`
          }));
          if (castElement !== value[idx])
            isChanged = true;
          return castElement;
        });
        return isChanged ? castArray : value;
      }
      _validate(_value, options = {}, panic, next) {
        let itemTypes = this.spec.types;
        super._validate(_value, options, panic, (tupleErrors, value) => {
          var _options$originalValu2;
          if (!this._typeCheck(value)) {
            next(tupleErrors, value);
            return;
          }
          let tests = [];
          for (let [index, itemSchema] of itemTypes.entries()) {
            var _options$originalValu;
            tests[index] = itemSchema.asNestedTest({
              options,
              index,
              parent: value,
              parentPath: options.path,
              originalParent: (_options$originalValu = options.originalValue) != null ? _options$originalValu : _value
            });
          }
          this.runTests({
            value,
            tests,
            originalValue: (_options$originalValu2 = options.originalValue) != null ? _options$originalValu2 : _value,
            options
          }, panic, (innerTypeErrors) => next(innerTypeErrors.concat(tupleErrors), value));
        });
      }
      describe(options) {
        const next = (options ? this.resolve(options) : this).clone();
        const base = super.describe(options);
        base.innerType = next.spec.types.map((schema2, index) => {
          var _innerOptions;
          let innerOptions = options;
          if ((_innerOptions = innerOptions) != null && _innerOptions.value) {
            innerOptions = Object.assign({}, innerOptions, {
              parent: innerOptions.value,
              value: innerOptions.value[index]
            });
          }
          return schema2.describe(innerOptions);
        });
        return base;
      }
    };
    create$1.prototype = TupleSchema.prototype;
    function create(builder) {
      return new Lazy(builder);
    }
    function catchValidationError(fn) {
      try {
        return fn();
      } catch (err) {
        if (ValidationError.isError(err))
          return Promise.reject(err);
        throw err;
      }
    }
    var Lazy = class _Lazy {
      constructor(builder) {
        this.type = "lazy";
        this.__isYupSchema__ = true;
        this.spec = void 0;
        this._resolve = (value, options = {}) => {
          let schema2 = this.builder(value, options);
          if (!isSchema(schema2))
            throw new TypeError("lazy() functions must return a valid schema");
          if (this.spec.optional)
            schema2 = schema2.optional();
          return schema2.resolve(options);
        };
        this.builder = builder;
        this.spec = {
          meta: void 0,
          optional: false
        };
      }
      clone(spec) {
        const next = new _Lazy(this.builder);
        next.spec = Object.assign({}, this.spec, spec);
        return next;
      }
      optionality(optional) {
        const next = this.clone({
          optional
        });
        return next;
      }
      optional() {
        return this.optionality(true);
      }
      resolve(options) {
        return this._resolve(options.value, options);
      }
      cast(value, options) {
        return this._resolve(value, options).cast(value, options);
      }
      asNestedTest(config2) {
        let {
          key,
          index,
          parent,
          options
        } = config2;
        let value = parent[index != null ? index : key];
        return this._resolve(value, Object.assign({}, options, {
          value,
          parent
        })).asNestedTest(config2);
      }
      validate(value, options) {
        return catchValidationError(() => this._resolve(value, options).validate(value, options));
      }
      validateSync(value, options) {
        return this._resolve(value, options).validateSync(value, options);
      }
      validateAt(path4, value, options) {
        return catchValidationError(() => this._resolve(value, options).validateAt(path4, value, options));
      }
      validateSyncAt(path4, value, options) {
        return this._resolve(value, options).validateSyncAt(path4, value, options);
      }
      isValid(value, options) {
        try {
          return this._resolve(value, options).isValid(value, options);
        } catch (err) {
          if (ValidationError.isError(err)) {
            return Promise.resolve(false);
          }
          throw err;
        }
      }
      isValidSync(value, options) {
        return this._resolve(value, options).isValidSync(value, options);
      }
      describe(options) {
        return options ? this.resolve(options).describe(options) : {
          type: "lazy",
          meta: this.spec.meta,
          label: void 0
        };
      }
      meta(...args) {
        if (args.length === 0)
          return this.spec.meta;
        let next = this.clone();
        next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
        return next;
      }
    };
    function setLocale(custom) {
      Object.keys(custom).forEach((type) => {
        Object.keys(custom[type]).forEach((method) => {
          locale[type][method] = custom[type][method];
        });
      });
    }
    function addMethod(schemaType, name, fn) {
      if (!schemaType || !isSchema(schemaType.prototype))
        throw new TypeError("You must provide a yup schema constructor function");
      if (typeof name !== "string")
        throw new TypeError("A Method name must be provided");
      if (typeof fn !== "function")
        throw new TypeError("Method function must be provided");
      schemaType.prototype[name] = fn;
    }
    exports2.ArraySchema = ArraySchema;
    exports2.BooleanSchema = BooleanSchema;
    exports2.DateSchema = DateSchema;
    exports2.LazySchema = Lazy;
    exports2.MixedSchema = MixedSchema;
    exports2.NumberSchema = NumberSchema;
    exports2.ObjectSchema = ObjectSchema;
    exports2.Schema = Schema;
    exports2.StringSchema = StringSchema;
    exports2.TupleSchema = TupleSchema;
    exports2.ValidationError = ValidationError;
    exports2.addMethod = addMethod;
    exports2.array = create$2;
    exports2.bool = create$7;
    exports2.boolean = create$7;
    exports2.date = create$4;
    exports2.defaultLocale = locale;
    exports2.getIn = getIn;
    exports2.isSchema = isSchema;
    exports2.lazy = create;
    exports2.mixed = create$8;
    exports2.number = create$5;
    exports2.object = create$3;
    exports2.printValue = printValue;
    exports2.reach = reach;
    exports2.ref = create$9;
    exports2.setLocale = setLocale;
    exports2.string = create$6;
    exports2.tuple = create$1;
  }
});

// node_modules/debug/node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/debug/node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match2) {
        return;
      }
      var n = parseFloat(match2[1]);
      var type = (match2[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env2) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env2).forEach((key) => {
        createDebug[key] = env2[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug4(...args) {
          if (!debug4.enabled) {
            return;
          }
          const self2 = debug4;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match2, format) => {
            if (match2 === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match2 = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match2;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug4.namespace = namespace;
        debug4.useColors = createDebug.useColors();
        debug4.color = createDebug.selectColor(namespace);
        debug4.extend = extend;
        debug4.destroy = createDebug.destroy;
        Object.defineProperty(debug4, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug4);
        }
        return debug4;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
        for (const ns of split) {
          if (ns[0] === "-") {
            createDebug.skips.push(ns.slice(1));
          } else {
            createDebug.names.push(ns);
          }
        }
      }
      function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while (searchIndex < search.length) {
          if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
            if (template[templateIndex] === "*") {
              starIndex = templateIndex;
              matchIndex = searchIndex;
              templateIndex++;
            } else {
              searchIndex++;
              templateIndex++;
            }
          } else if (starIndex !== -1) {
            templateIndex = starIndex + 1;
            matchIndex++;
            searchIndex = matchIndex;
          } else {
            return false;
          }
        }
        while (templateIndex < template.length && template[templateIndex] === "*") {
          templateIndex++;
        }
        return templateIndex === template.length;
      }
      function disable() {
        const namespaces = [
          ...createDebug.names,
          ...createDebug.skips.map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        for (const skip of createDebug.skips) {
          if (matchesTemplate(name, skip)) {
            return false;
          }
        }
        for (const ns of createDebug.names) {
          if (matchesTemplate(name, ns)) {
            return true;
          }
        }
        return false;
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = /* @__PURE__ */ (() => {
      let warned2 = false;
      return () => {
        if (!warned2) {
          warned2 = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match2) => {
        if (match2 === "%%") {
          return;
        }
        index++;
        if (match2 === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv2) => {
      argv2 = argv2 || process.argv;
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const pos = argv2.indexOf(prefix + flag);
      const terminatorPos = argv2.indexOf("--");
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os = require("os");
    var hasFlag = require_has_flag();
    var env2 = process.env;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
      forceColor = false;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = true;
    }
    if ("FORCE_COLOR" in env2) {
      forceColor = env2.FORCE_COLOR.length === 0 || parseInt(env2.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(stream2) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (stream2 && !stream2.isTTY && forceColor !== true) {
        return 0;
      }
      const min = forceColor ? 1 : 0;
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env2) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env2) || env2.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env2) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env2.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env2.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env2) {
        const version = parseInt((env2.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env2.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env2.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env2.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env2) {
        return 1;
      }
      if (env2.TERM === "dumb") {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream2) {
      const level = supportsColor(stream2);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

// node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/debug/src/node.js"(exports2, module2) {
    var tty = require("tty");
    var util = require("util");
    exports2.init = init;
    exports2.log = log;
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.formatWithOptions(exports2.inspectOpts, ...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug4) {
      debug4.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug4.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports2);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/debug/src/index.js
var require_src = __commonJS({
  "node_modules/debug/src/index.js"(exports2, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/yargs/lib/is-promise.js
var require_is_promise = __commonJS({
  "node_modules/yargs/lib/is-promise.js"(exports2, module2) {
    module2.exports = function isPromise(maybePromise) {
      return maybePromise instanceof Promise;
    };
  }
});

// node_modules/yargs/lib/middleware.js
var require_middleware = __commonJS({
  "node_modules/yargs/lib/middleware.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      applyMiddleware,
      commandMiddlewareFactory,
      globalMiddlewareFactory
    };
    var isPromise = require_is_promise();
    var argsert = require_argsert();
    function globalMiddlewareFactory(globalMiddleware, context) {
      return function(callback, applyBeforeValidation = false) {
        argsert("<array|function> [boolean]", [callback, applyBeforeValidation], arguments.length);
        if (Array.isArray(callback)) {
          for (let i = 0; i < callback.length; i++) {
            if (typeof callback[i] !== "function") {
              throw Error("middleware must be a function");
            }
            callback[i].applyBeforeValidation = applyBeforeValidation;
          }
          Array.prototype.push.apply(globalMiddleware, callback);
        } else if (typeof callback === "function") {
          callback.applyBeforeValidation = applyBeforeValidation;
          globalMiddleware.push(callback);
        }
        return context;
      };
    }
    function commandMiddlewareFactory(commandMiddleware) {
      if (!commandMiddleware)
        return [];
      return commandMiddleware.map((middleware) => {
        middleware.applyBeforeValidation = false;
        return middleware;
      });
    }
    function applyMiddleware(argv2, yargs2, middlewares, beforeValidation) {
      const beforeValidationError = new Error("middleware cannot return a promise when applyBeforeValidation is true");
      return middlewares.reduce((accumulation, middleware) => {
        if (middleware.applyBeforeValidation !== beforeValidation && !isPromise(accumulation)) {
          return accumulation;
        }
        if (isPromise(accumulation)) {
          return accumulation.then(
            (initialObj) => Promise.all([initialObj, middleware(initialObj, yargs2)])
          ).then(
            ([initialObj, middlewareObj]) => Object.assign(initialObj, middlewareObj)
          );
        } else {
          const result = middleware(argv2, yargs2);
          if (beforeValidation && isPromise(result))
            throw beforeValidationError;
          return isPromise(result) ? result.then((middlewareObj) => Object.assign(accumulation, middlewareObj)) : Object.assign(accumulation, result);
        }
      }, argv2);
    }
  }
});

// node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "node_modules/camelcase/index.js"(exports2, module2) {
    "use strict";
    var preserveCamelCase = (string2) => {
      let isLastCharLower = false;
      let isLastCharUpper = false;
      let isLastLastCharUpper = false;
      for (let i = 0; i < string2.length; i++) {
        const character = string2[i];
        if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {
          string2 = string2.slice(0, i) + "-" + string2.slice(i);
          isLastCharLower = false;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = true;
          i++;
        } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {
          string2 = string2.slice(0, i - 1) + "-" + string2.slice(i - 1);
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = false;
          isLastCharLower = true;
        } else {
          isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;
        }
      }
      return string2;
    };
    var camelCase = (input, options) => {
      if (!(typeof input === "string" || Array.isArray(input))) {
        throw new TypeError("Expected the input to be `string | string[]`");
      }
      options = Object.assign({
        pascalCase: false
      }, options);
      const postProcess = (x) => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;
      if (Array.isArray(input)) {
        input = input.map((x) => x.trim()).filter((x) => x.length).join("-");
      } else {
        input = input.trim();
      }
      if (input.length === 0) {
        return "";
      }
      if (input.length === 1) {
        return options.pascalCase ? input.toUpperCase() : input.toLowerCase();
      }
      const hasUpperCase = input !== input.toLowerCase();
      if (hasUpperCase) {
        input = preserveCamelCase(input);
      }
      input = input.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (_, p1) => p1.toUpperCase()).replace(/\d+(\w|$)/g, (m) => m.toUpperCase());
      return postProcess(input);
    };
    module2.exports = camelCase;
    module2.exports.default = camelCase;
  }
});

// node_modules/decamelize/index.js
var require_decamelize = __commonJS({
  "node_modules/decamelize/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(str, sep2) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      sep2 = typeof sep2 === "undefined" ? "_" : sep2;
      return str.replace(/([a-z\d])([A-Z])/g, "$1" + sep2 + "$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g, "$1" + sep2 + "$2").toLowerCase();
    };
  }
});

// node_modules/yargs-parser/lib/tokenize-arg-string.js
var require_tokenize_arg_string = __commonJS({
  "node_modules/yargs-parser/lib/tokenize-arg-string.js"(exports2, module2) {
    module2.exports = function(argString) {
      if (Array.isArray(argString)) {
        return argString.map((e) => typeof e !== "string" ? e + "" : e);
      }
      argString = argString.trim();
      var i = 0;
      var prevC = null;
      var c = null;
      var opening = null;
      var args = [];
      for (var ii = 0; ii < argString.length; ii++) {
        prevC = c;
        c = argString.charAt(ii);
        if (c === " " && !opening) {
          if (!(prevC === " ")) {
            i++;
          }
          continue;
        }
        if (c === opening) {
          opening = null;
        } else if ((c === "'" || c === '"') && !opening) {
          opening = c;
        }
        if (!args[i])
          args[i] = "";
        args[i] += c;
      }
      return args;
    };
  }
});

// node_modules/yargs-parser/index.js
var require_yargs_parser = __commonJS({
  "node_modules/yargs-parser/index.js"(exports2, module2) {
    var camelCase = require_camelcase();
    var decamelize = require_decamelize();
    var path4 = require("path");
    var tokenizeArgString = require_tokenize_arg_string();
    var util = require("util");
    function parse(args, opts) {
      if (!opts)
        opts = {};
      args = tokenizeArgString(args);
      var aliases = combineAliases(opts.alias || {});
      var configuration = Object.assign({
        "short-option-groups": true,
        "camel-case-expansion": true,
        "dot-notation": true,
        "parse-numbers": true,
        "boolean-negation": true,
        "negation-prefix": "no-",
        "duplicate-arguments-array": true,
        "flatten-duplicate-arrays": true,
        "populate--": false,
        "combine-arrays": false,
        "set-placeholder-key": false,
        "halt-at-non-option": false,
        "strip-aliased": false,
        "strip-dashed": false
      }, opts.configuration);
      var defaults2 = opts.default || {};
      var configObjects = opts.configObjects || [];
      var envPrefix = opts.envPrefix;
      var notFlagsOption = configuration["populate--"];
      var notFlagsArgv = notFlagsOption ? "--" : "_";
      var newAliases = {};
      var __ = opts.__ || util.format;
      var error = null;
      var flags = {
        aliases: {},
        arrays: {},
        bools: {},
        strings: {},
        numbers: {},
        counts: {},
        normalize: {},
        configs: {},
        defaulted: {},
        nargs: {},
        coercions: {},
        keys: []
      };
      var negative = /^-[0-9]+(\.[0-9]+)?/;
      var negatedBoolean = new RegExp("^--" + configuration["negation-prefix"] + "(.+)");
      [].concat(opts.array).filter(Boolean).forEach(function(opt) {
        var key2 = opt.key || opt;
        const assignment = Object.keys(opt).map(function(key3) {
          return {
            boolean: "bools",
            string: "strings",
            number: "numbers"
          }[key3];
        }).filter(Boolean).pop();
        if (assignment) {
          flags[assignment][key2] = true;
        }
        flags.arrays[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.boolean).filter(Boolean).forEach(function(key2) {
        flags.bools[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.string).filter(Boolean).forEach(function(key2) {
        flags.strings[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.number).filter(Boolean).forEach(function(key2) {
        flags.numbers[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.count).filter(Boolean).forEach(function(key2) {
        flags.counts[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.normalize).filter(Boolean).forEach(function(key2) {
        flags.normalize[key2] = true;
        flags.keys.push(key2);
      });
      Object.keys(opts.narg || {}).forEach(function(k) {
        flags.nargs[k] = opts.narg[k];
        flags.keys.push(k);
      });
      Object.keys(opts.coerce || {}).forEach(function(k) {
        flags.coercions[k] = opts.coerce[k];
        flags.keys.push(k);
      });
      if (Array.isArray(opts.config) || typeof opts.config === "string") {
        ;
        [].concat(opts.config).filter(Boolean).forEach(function(key2) {
          flags.configs[key2] = true;
        });
      } else {
        Object.keys(opts.config || {}).forEach(function(k) {
          flags.configs[k] = opts.config[k];
        });
      }
      extendAliases(opts.key, aliases, opts.default, flags.arrays);
      Object.keys(defaults2).forEach(function(key2) {
        (flags.aliases[key2] || []).forEach(function(alias) {
          defaults2[alias] = defaults2[key2];
        });
      });
      var argv2 = { _: [] };
      Object.keys(flags.bools).forEach(function(key2) {
        if (Object.prototype.hasOwnProperty.call(defaults2, key2)) {
          setArg(key2, defaults2[key2]);
          setDefaulted(key2);
        }
      });
      var notFlags = [];
      for (var i = 0; i < args.length; i++) {
        var arg = args[i];
        var broken;
        var key;
        var letters;
        var m;
        var next;
        var value;
        if (arg.match(/^--.+=/) || !configuration["short-option-groups"] && arg.match(/^-.+=/)) {
          m = arg.match(/^--?([^=]+)=([\s\S]*)$/);
          if (checkAllAliases(m[1], flags.nargs)) {
            args.splice(i + 1, 0, m[2]);
            i = eatNargs(i, m[1], args);
          } else if (checkAllAliases(m[1], flags.arrays) && args.length > i + 1) {
            args.splice(i + 1, 0, m[2]);
            i = eatArray(i, m[1], args);
          } else {
            setArg(m[1], m[2]);
          }
        } else if (arg.match(negatedBoolean) && configuration["boolean-negation"]) {
          key = arg.match(negatedBoolean)[1];
          setArg(key, false);
        } else if (arg.match(/^--.+/) || !configuration["short-option-groups"] && arg.match(/^-[^-]+/)) {
          key = arg.match(/^--?(.+)/)[1];
          if (checkAllAliases(key, flags.nargs)) {
            i = eatNargs(i, key, args);
          } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {
            i = eatArray(i, key, args);
          } else {
            next = flags.nargs[key] === 0 ? void 0 : args[i + 1];
            if (next !== void 0 && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
              setArg(key, next);
              i++;
            } else if (/^(true|false)$/.test(next)) {
              setArg(key, next);
              i++;
            } else {
              setArg(key, defaultValue(key));
            }
          }
        } else if (arg.match(/^-.\..+=/)) {
          m = arg.match(/^-([^=]+)=([\s\S]*)$/);
          setArg(m[1], m[2]);
        } else if (arg.match(/^-.\..+/)) {
          next = args[i + 1];
          key = arg.match(/^-(.\..+)/)[1];
          if (next !== void 0 && !next.match(/^-/) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
            setArg(key, next);
            i++;
          } else {
            setArg(key, defaultValue(key));
          }
        } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {
          letters = arg.slice(1, -1).split("");
          broken = false;
          for (var j = 0; j < letters.length; j++) {
            next = arg.slice(j + 2);
            if (letters[j + 1] && letters[j + 1] === "=") {
              value = arg.slice(j + 3);
              key = letters[j];
              if (checkAllAliases(key, flags.nargs)) {
                args.splice(i + 1, 0, value);
                i = eatNargs(i, key, args);
              } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {
                args.splice(i + 1, 0, value);
                i = eatArray(i, key, args);
              } else {
                setArg(key, value);
              }
              broken = true;
              break;
            }
            if (next === "-") {
              setArg(letters[j], next);
              continue;
            }
            if (/[A-Za-z]/.test(letters[j]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
              setArg(letters[j], next);
              broken = true;
              break;
            }
            if (letters[j + 1] && letters[j + 1].match(/\W/)) {
              setArg(letters[j], next);
              broken = true;
              break;
            } else {
              setArg(letters[j], defaultValue(letters[j]));
            }
          }
          key = arg.slice(-1)[0];
          if (!broken && key !== "-") {
            if (checkAllAliases(key, flags.nargs)) {
              i = eatNargs(i, key, args);
            } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {
              i = eatArray(i, key, args);
            } else {
              next = args[i + 1];
              if (next !== void 0 && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                setArg(key, next);
                i++;
              } else if (/^(true|false)$/.test(next)) {
                setArg(key, next);
                i++;
              } else {
                setArg(key, defaultValue(key));
              }
            }
          }
        } else if (arg === "--") {
          notFlags = args.slice(i + 1);
          break;
        } else if (configuration["halt-at-non-option"]) {
          notFlags = args.slice(i);
          break;
        } else {
          argv2._.push(maybeCoerceNumber("_", arg));
        }
      }
      applyEnvVars(argv2, true);
      applyEnvVars(argv2, false);
      setConfig(argv2);
      setConfigObjects();
      applyDefaultsAndAliases(argv2, flags.aliases, defaults2);
      applyCoercions(argv2);
      if (configuration["set-placeholder-key"])
        setPlaceholderKeys(argv2);
      Object.keys(flags.counts).forEach(function(key2) {
        if (!hasKey(argv2, key2.split(".")))
          setArg(key2, 0);
      });
      if (notFlagsOption && notFlags.length)
        argv2[notFlagsArgv] = [];
      notFlags.forEach(function(key2) {
        argv2[notFlagsArgv].push(key2);
      });
      if (configuration["camel-case-expansion"] && configuration["strip-dashed"]) {
        Object.keys(argv2).filter((key2) => key2 !== "--" && key2.includes("-")).forEach((key2) => {
          delete argv2[key2];
        });
      }
      if (configuration["strip-aliased"]) {
        ;
        [].concat(...Object.keys(aliases).map((k) => aliases[k])).forEach((alias) => {
          if (configuration["camel-case-expansion"]) {
            delete argv2[alias.split(".").map((prop) => camelCase(prop)).join(".")];
          }
          delete argv2[alias];
        });
      }
      function eatNargs(i2, key2, args2) {
        var ii;
        const toEat = checkAllAliases(key2, flags.nargs);
        var available = 0;
        for (ii = i2 + 1; ii < args2.length; ii++) {
          if (!args2[ii].match(/^-[^0-9]/))
            available++;
          else
            break;
        }
        if (available < toEat)
          error = Error(__("Not enough arguments following: %s", key2));
        const consumed = Math.min(available, toEat);
        for (ii = i2 + 1; ii < consumed + i2 + 1; ii++) {
          setArg(key2, args2[ii]);
        }
        return i2 + consumed;
      }
      function eatArray(i2, key2, args2) {
        var start = i2 + 1;
        var argsToSet = [];
        var multipleArrayFlag = i2 > 0;
        for (var ii = i2 + 1; ii < args2.length; ii++) {
          if (/^-/.test(args2[ii]) && !negative.test(args2[ii])) {
            if (ii === start) {
              setArg(key2, defaultForType("array"));
            }
            multipleArrayFlag = true;
            break;
          }
          i2 = ii;
          argsToSet.push(args2[ii]);
        }
        if (multipleArrayFlag) {
          setArg(key2, argsToSet.map(function(arg2) {
            return processValue(key2, arg2);
          }));
        } else {
          argsToSet.forEach(function(arg2) {
            setArg(key2, arg2);
          });
        }
        return i2;
      }
      function setArg(key2, val) {
        unsetDefaulted(key2);
        if (/-/.test(key2) && configuration["camel-case-expansion"]) {
          var alias = key2.split(".").map(function(prop) {
            return camelCase(prop);
          }).join(".");
          addNewAlias(key2, alias);
        }
        var value2 = processValue(key2, val);
        var splitKey = key2.split(".");
        setKey(argv2, splitKey, value2);
        if (flags.aliases[key2] && flags.aliases[key2].forEach) {
          flags.aliases[key2].forEach(function(x) {
            x = x.split(".");
            setKey(argv2, x, value2);
          });
        }
        if (splitKey.length > 1 && configuration["dot-notation"]) {
          ;
          (flags.aliases[splitKey[0]] || []).forEach(function(x) {
            x = x.split(".");
            var a = [].concat(splitKey);
            a.shift();
            x = x.concat(a);
            setKey(argv2, x, value2);
          });
        }
        if (checkAllAliases(key2, flags.normalize) && !checkAllAliases(key2, flags.arrays)) {
          var keys = [key2].concat(flags.aliases[key2] || []);
          keys.forEach(function(key3) {
            argv2.__defineSetter__(key3, function(v) {
              val = path4.normalize(v);
            });
            argv2.__defineGetter__(key3, function() {
              return typeof val === "string" ? path4.normalize(val) : val;
            });
          });
        }
      }
      function addNewAlias(key2, alias) {
        if (!(flags.aliases[key2] && flags.aliases[key2].length)) {
          flags.aliases[key2] = [alias];
          newAliases[alias] = true;
        }
        if (!(flags.aliases[alias] && flags.aliases[alias].length)) {
          addNewAlias(alias, key2);
        }
      }
      function processValue(key2, val) {
        if (typeof val === "string" && (val[0] === "'" || val[0] === '"') && val[val.length - 1] === val[0]) {
          val = val.substring(1, val.length - 1);
        }
        if (checkAllAliases(key2, flags.bools) || checkAllAliases(key2, flags.counts)) {
          if (typeof val === "string")
            val = val === "true";
        }
        var value2 = maybeCoerceNumber(key2, val);
        if (checkAllAliases(key2, flags.counts) && (isUndefined(value2) || typeof value2 === "boolean")) {
          value2 = increment;
        }
        if (checkAllAliases(key2, flags.normalize) && checkAllAliases(key2, flags.arrays)) {
          if (Array.isArray(val))
            value2 = val.map(path4.normalize);
          else
            value2 = path4.normalize(val);
        }
        return value2;
      }
      function maybeCoerceNumber(key2, value2) {
        if (!checkAllAliases(key2, flags.strings) && !checkAllAliases(key2, flags.coercions)) {
          const shouldCoerceNumber = isNumber(value2) && configuration["parse-numbers"] && Number.isSafeInteger(Math.floor(value2));
          if (shouldCoerceNumber || !isUndefined(value2) && checkAllAliases(key2, flags.numbers))
            value2 = Number(value2);
        }
        return value2;
      }
      function setConfig(argv3) {
        var configLookup = {};
        applyDefaultsAndAliases(configLookup, flags.aliases, defaults2);
        Object.keys(flags.configs).forEach(function(configKey) {
          var configPath = argv3[configKey] || configLookup[configKey];
          if (configPath) {
            try {
              var config2 = null;
              var resolvedConfigPath = path4.resolve(process.cwd(), configPath);
              if (typeof flags.configs[configKey] === "function") {
                try {
                  config2 = flags.configs[configKey](resolvedConfigPath);
                } catch (e) {
                  config2 = e;
                }
                if (config2 instanceof Error) {
                  error = config2;
                  return;
                }
              } else {
                config2 = require(resolvedConfigPath);
              }
              setConfigObject(config2);
            } catch (ex) {
              if (argv3[configKey])
                error = Error(__("Invalid JSON config file: %s", configPath));
            }
          }
        });
      }
      function setConfigObject(config2, prev) {
        Object.keys(config2).forEach(function(key2) {
          var value2 = config2[key2];
          var fullKey = prev ? prev + "." + key2 : key2;
          if (typeof value2 === "object" && value2 !== null && !Array.isArray(value2) && configuration["dot-notation"]) {
            setConfigObject(value2, fullKey);
          } else {
            if (!hasKey(argv2, fullKey.split(".")) || flags.defaulted[fullKey] || flags.arrays[fullKey] && configuration["combine-arrays"]) {
              setArg(fullKey, value2);
            }
          }
        });
      }
      function setConfigObjects() {
        if (typeof configObjects === "undefined")
          return;
        configObjects.forEach(function(configObject) {
          setConfigObject(configObject);
        });
      }
      function applyEnvVars(argv3, configOnly) {
        if (typeof envPrefix === "undefined")
          return;
        var prefix = typeof envPrefix === "string" ? envPrefix : "";
        Object.keys(process.env).forEach(function(envVar) {
          if (prefix === "" || envVar.lastIndexOf(prefix, 0) === 0) {
            var keys = envVar.split("__").map(function(key2, i2) {
              if (i2 === 0) {
                key2 = key2.substring(prefix.length);
              }
              return camelCase(key2);
            });
            if ((configOnly && flags.configs[keys.join(".")] || !configOnly) && (!hasKey(argv3, keys) || flags.defaulted[keys.join(".")])) {
              setArg(keys.join("."), process.env[envVar]);
            }
          }
        });
      }
      function applyCoercions(argv3) {
        var coerce;
        var applied = {};
        Object.keys(argv3).forEach(function(key2) {
          if (!applied.hasOwnProperty(key2)) {
            coerce = checkAllAliases(key2, flags.coercions);
            if (typeof coerce === "function") {
              try {
                var value2 = coerce(argv3[key2]);
                [].concat(flags.aliases[key2] || [], key2).forEach((ali) => {
                  applied[ali] = argv3[ali] = value2;
                });
              } catch (err) {
                error = err;
              }
            }
          }
        });
      }
      function setPlaceholderKeys(argv3) {
        flags.keys.forEach((key2) => {
          if (~key2.indexOf("."))
            return;
          if (typeof argv3[key2] === "undefined")
            argv3[key2] = void 0;
        });
        return argv3;
      }
      function applyDefaultsAndAliases(obj, aliases2, defaults3) {
        Object.keys(defaults3).forEach(function(key2) {
          if (!hasKey(obj, key2.split("."))) {
            setKey(obj, key2.split("."), defaults3[key2]);
            (aliases2[key2] || []).forEach(function(x) {
              if (hasKey(obj, x.split(".")))
                return;
              setKey(obj, x.split("."), defaults3[key2]);
            });
          }
        });
      }
      function hasKey(obj, keys) {
        var o = obj;
        if (!configuration["dot-notation"])
          keys = [keys.join(".")];
        keys.slice(0, -1).forEach(function(key3) {
          o = o[key3] || {};
        });
        var key2 = keys[keys.length - 1];
        if (typeof o !== "object")
          return false;
        else
          return key2 in o;
      }
      function setKey(obj, keys, value2) {
        var o = obj;
        if (!configuration["dot-notation"])
          keys = [keys.join(".")];
        keys.slice(0, -1).forEach(function(key3, index) {
          key3 = sanitizeKey(key3);
          if (typeof o === "object" && o[key3] === void 0) {
            o[key3] = {};
          }
          if (typeof o[key3] !== "object" || Array.isArray(o[key3])) {
            if (Array.isArray(o[key3])) {
              o[key3].push({});
            } else {
              o[key3] = [o[key3], {}];
            }
            o = o[key3][o[key3].length - 1];
          } else {
            o = o[key3];
          }
        });
        const key2 = sanitizeKey(keys[keys.length - 1]);
        const isTypeArray = checkAllAliases(keys.join("."), flags.arrays);
        const isValueArray = Array.isArray(value2);
        let duplicate = configuration["duplicate-arguments-array"];
        if (!duplicate && checkAllAliases(key2, flags.nargs)) {
          duplicate = true;
          if (!isUndefined(o[key2]) && flags.nargs[key2] === 1 || Array.isArray(o[key2]) && o[key2].length === flags.nargs[key2]) {
            o[key2] = void 0;
          }
        }
        if (value2 === increment) {
          o[key2] = increment(o[key2]);
        } else if (Array.isArray(o[key2])) {
          if (duplicate && isTypeArray && isValueArray) {
            o[key2] = configuration["flatten-duplicate-arrays"] ? o[key2].concat(value2) : (Array.isArray(o[key2][0]) ? o[key2] : [o[key2]]).concat([value2]);
          } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {
            o[key2] = value2;
          } else {
            o[key2] = o[key2].concat([value2]);
          }
        } else if (o[key2] === void 0 && isTypeArray) {
          o[key2] = isValueArray ? value2 : [value2];
        } else if (duplicate && !(o[key2] === void 0 || checkAllAliases(key2, flags.bools) || checkAllAliases(keys.join("."), flags.bools) || checkAllAliases(key2, flags.counts))) {
          o[key2] = [o[key2], value2];
        } else {
          o[key2] = value2;
        }
      }
      function extendAliases(...args2) {
        args2.forEach(function(obj) {
          Object.keys(obj || {}).forEach(function(key2) {
            if (flags.aliases[key2])
              return;
            flags.aliases[key2] = [].concat(aliases[key2] || []);
            flags.aliases[key2].concat(key2).forEach(function(x) {
              if (/-/.test(x) && configuration["camel-case-expansion"]) {
                var c = camelCase(x);
                if (c !== key2 && flags.aliases[key2].indexOf(c) === -1) {
                  flags.aliases[key2].push(c);
                  newAliases[c] = true;
                }
              }
            });
            flags.aliases[key2].concat(key2).forEach(function(x) {
              if (x.length > 1 && /[A-Z]/.test(x) && configuration["camel-case-expansion"]) {
                var c = decamelize(x, "-");
                if (c !== key2 && flags.aliases[key2].indexOf(c) === -1) {
                  flags.aliases[key2].push(c);
                  newAliases[c] = true;
                }
              }
            });
            flags.aliases[key2].forEach(function(x) {
              flags.aliases[x] = [key2].concat(flags.aliases[key2].filter(function(y) {
                return x !== y;
              }));
            });
          });
        });
      }
      function checkAllAliases(key2, flag) {
        var isSet = false;
        var toCheck = [].concat(flags.aliases[key2] || [], key2);
        toCheck.forEach(function(key3) {
          if (flag[key3])
            isSet = flag[key3];
        });
        return isSet;
      }
      function setDefaulted(key2) {
        [].concat(flags.aliases[key2] || [], key2).forEach(function(k) {
          flags.defaulted[k] = true;
        });
      }
      function unsetDefaulted(key2) {
        [].concat(flags.aliases[key2] || [], key2).forEach(function(k) {
          delete flags.defaulted[k];
        });
      }
      function defaultValue(key2) {
        if (!checkAllAliases(key2, flags.bools) && !checkAllAliases(key2, flags.counts) && `${key2}` in defaults2) {
          return defaults2[key2];
        } else {
          return defaultForType(guessType(key2));
        }
      }
      function defaultForType(type) {
        var def = {
          boolean: true,
          string: "",
          number: void 0,
          array: []
        };
        return def[type];
      }
      function guessType(key2) {
        var type = "boolean";
        if (checkAllAliases(key2, flags.strings))
          type = "string";
        else if (checkAllAliases(key2, flags.numbers))
          type = "number";
        else if (checkAllAliases(key2, flags.arrays))
          type = "array";
        return type;
      }
      function isNumber(x) {
        if (x === null || x === void 0)
          return false;
        if (typeof x === "number")
          return true;
        if (/^0x[0-9a-f]+$/i.test(x))
          return true;
        if (x.length > 1 && x[0] === "0")
          return false;
        return /^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
      }
      function isUndefined(num) {
        return num === void 0;
      }
      return {
        argv: argv2,
        error,
        aliases: flags.aliases,
        newAliases,
        configuration
      };
    }
    function combineAliases(aliases) {
      var aliasArrays = [];
      var change = true;
      var combined = {};
      Object.keys(aliases).forEach(function(key) {
        aliasArrays.push(
          [].concat(aliases[key], key)
        );
      });
      while (change) {
        change = false;
        for (var i = 0; i < aliasArrays.length; i++) {
          for (var ii = i + 1; ii < aliasArrays.length; ii++) {
            var intersect = aliasArrays[i].filter(function(v) {
              return aliasArrays[ii].indexOf(v) !== -1;
            });
            if (intersect.length) {
              aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);
              aliasArrays.splice(ii, 1);
              change = true;
              break;
            }
          }
        }
      }
      aliasArrays.forEach(function(aliasArray) {
        aliasArray = aliasArray.filter(function(v, i2, self2) {
          return self2.indexOf(v) === i2;
        });
        combined[aliasArray.pop()] = aliasArray;
      });
      return combined;
    }
    function increment(orig) {
      return orig !== void 0 ? orig + 1 : 1;
    }
    function Parser(args, opts) {
      var result = parse(args.slice(), opts);
      return result.argv;
    }
    Parser.detailed = function(args, opts) {
      return parse(args.slice(), opts);
    };
    function sanitizeKey(key) {
      if (key === "__proto__")
        return "___proto___";
      return key;
    }
    module2.exports = Parser;
  }
});

// node_modules/require-directory/index.js
var require_require_directory = __commonJS({
  "node_modules/require-directory/index.js"(exports2, module2) {
    "use strict";
    var fs6 = require("fs");
    var join2 = require("path").join;
    var resolve3 = require("path").resolve;
    var dirname = require("path").dirname;
    var defaultOptions = {
      extensions: ["js", "json", "coffee"],
      recurse: true,
      rename: function(name) {
        return name;
      },
      visit: function(obj) {
        return obj;
      }
    };
    function checkFileInclusion(path4, filename, options) {
      return (
        // verify file has valid extension
        new RegExp("\\.(" + options.extensions.join("|") + ")$", "i").test(filename) && // if options.include is a RegExp, evaluate it and make sure the path passes
        !(options.include && options.include instanceof RegExp && !options.include.test(path4)) && // if options.include is a function, evaluate it and make sure the path passes
        !(options.include && typeof options.include === "function" && !options.include(path4, filename)) && // if options.exclude is a RegExp, evaluate it and make sure the path doesn't pass
        !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path4)) && // if options.exclude is a function, evaluate it and make sure the path doesn't pass
        !(options.exclude && typeof options.exclude === "function" && options.exclude(path4, filename))
      );
    }
    function requireDirectory(m, path4, options) {
      var retval = {};
      if (path4 && !options && typeof path4 !== "string") {
        options = path4;
        path4 = null;
      }
      options = options || {};
      for (var prop in defaultOptions) {
        if (typeof options[prop] === "undefined") {
          options[prop] = defaultOptions[prop];
        }
      }
      path4 = !path4 ? dirname(m.filename) : resolve3(dirname(m.filename), path4);
      fs6.readdirSync(path4).forEach(function(filename) {
        var joined = join2(path4, filename), files, key, obj;
        if (fs6.statSync(joined).isDirectory() && options.recurse) {
          files = requireDirectory(m, joined, options);
          if (Object.keys(files).length) {
            retval[options.rename(filename, joined, filename)] = files;
          }
        } else {
          if (joined !== m.filename && checkFileInclusion(joined, filename, options)) {
            key = filename.substring(0, filename.lastIndexOf("."));
            obj = m.require(joined);
            retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;
          }
        }
      });
      return retval;
    }
    module2.exports = requireDirectory;
    module2.exports.defaults = defaultOptions;
  }
});

// node_modules/which-module/index.js
var require_which_module = __commonJS({
  "node_modules/which-module/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function whichModule(exported) {
      for (var i = 0, files = Object.keys(require.cache), mod; i < files.length; i++) {
        mod = require.cache[files[i]];
        if (mod.exports === exported)
          return mod;
      }
      return null;
    };
  }
});

// node_modules/yargs/lib/command.js
var require_command = __commonJS({
  "node_modules/yargs/lib/command.js"(exports2, module2) {
    "use strict";
    var inspect = require("util").inspect;
    var isPromise = require_is_promise();
    var { applyMiddleware, commandMiddlewareFactory } = require_middleware();
    var path4 = require("path");
    var Parser = require_yargs_parser();
    var DEFAULT_MARKER = /(^\*)|(^\$0)/;
    module2.exports = function command2(yargs2, usage, validation, globalMiddleware) {
      const self2 = {};
      let handlers = {};
      let aliasMap = {};
      let defaultCommand;
      globalMiddleware = globalMiddleware || [];
      self2.addHandler = function addHandler(cmd, description, builder, handler, commandMiddleware) {
        let aliases = [];
        const middlewares = commandMiddlewareFactory(commandMiddleware);
        handler = handler || (() => {
        });
        if (Array.isArray(cmd)) {
          aliases = cmd.slice(1);
          cmd = cmd[0];
        } else if (typeof cmd === "object") {
          let command3 = Array.isArray(cmd.command) || typeof cmd.command === "string" ? cmd.command : moduleName(cmd);
          if (cmd.aliases)
            command3 = [].concat(command3).concat(cmd.aliases);
          self2.addHandler(command3, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares);
          return;
        }
        if (typeof builder === "object" && builder.builder && typeof builder.handler === "function") {
          self2.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares);
          return;
        }
        const parsedCommand = self2.parseCommand(cmd);
        aliases = aliases.map((alias) => self2.parseCommand(alias).cmd);
        let isDefault = false;
        const parsedAliases = [parsedCommand.cmd].concat(aliases).filter((c) => {
          if (DEFAULT_MARKER.test(c)) {
            isDefault = true;
            return false;
          }
          return true;
        });
        if (parsedAliases.length === 0 && isDefault)
          parsedAliases.push("$0");
        if (isDefault) {
          parsedCommand.cmd = parsedAliases[0];
          aliases = parsedAliases.slice(1);
          cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);
        }
        aliases.forEach((alias) => {
          aliasMap[alias] = parsedCommand.cmd;
        });
        if (description !== false) {
          usage.command(cmd, description, isDefault, aliases);
        }
        handlers[parsedCommand.cmd] = {
          original: cmd,
          description,
          handler,
          builder: builder || {},
          middlewares: middlewares || [],
          demanded: parsedCommand.demanded,
          optional: parsedCommand.optional
        };
        if (isDefault)
          defaultCommand = handlers[parsedCommand.cmd];
      };
      self2.addDirectory = function addDirectory(dir, context, req, callerFile, opts) {
        opts = opts || {};
        if (typeof opts.recurse !== "boolean")
          opts.recurse = false;
        if (!Array.isArray(opts.extensions))
          opts.extensions = ["js"];
        const parentVisit = typeof opts.visit === "function" ? opts.visit : (o) => o;
        opts.visit = function visit(obj, joined, filename) {
          const visited = parentVisit(obj, joined, filename);
          if (visited) {
            if (~context.files.indexOf(joined))
              return visited;
            context.files.push(joined);
            self2.addHandler(visited);
          }
          return visited;
        };
        require_require_directory()({ require: req, filename: callerFile }, dir, opts);
      };
      function moduleName(obj) {
        const mod = require_which_module()(obj);
        if (!mod)
          throw new Error(`No command name given for module: ${inspect(obj)}`);
        return commandFromFilename(mod.filename);
      }
      function commandFromFilename(filename) {
        return path4.basename(filename, path4.extname(filename));
      }
      function extractDesc(obj) {
        for (let keys = ["describe", "description", "desc"], i = 0, l = keys.length, test; i < l; i++) {
          test = obj[keys[i]];
          if (typeof test === "string" || typeof test === "boolean")
            return test;
        }
        return false;
      }
      self2.parseCommand = function parseCommand(cmd) {
        const extraSpacesStrippedCommand = cmd.replace(/\s{2,}/g, " ");
        const splitCommand = extraSpacesStrippedCommand.split(/\s+(?![^[]*]|[^<]*>)/);
        const bregex = /\.*[\][<>]/g;
        const parsedCommand = {
          cmd: splitCommand.shift().replace(bregex, ""),
          demanded: [],
          optional: []
        };
        splitCommand.forEach((cmd2, i) => {
          let variadic = false;
          cmd2 = cmd2.replace(/\s/g, "");
          if (/\.+[\]>]/.test(cmd2) && i === splitCommand.length - 1)
            variadic = true;
          if (/^\[/.test(cmd2)) {
            parsedCommand.optional.push({
              cmd: cmd2.replace(bregex, "").split("|"),
              variadic
            });
          } else {
            parsedCommand.demanded.push({
              cmd: cmd2.replace(bregex, "").split("|"),
              variadic
            });
          }
        });
        return parsedCommand;
      };
      self2.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap));
      self2.getCommandHandlers = () => handlers;
      self2.hasDefaultCommand = () => !!defaultCommand;
      self2.runCommand = function runCommand(command3, yargs3, parsed, commandIndex) {
        let aliases = parsed.aliases;
        const commandHandler = handlers[command3] || handlers[aliasMap[command3]] || defaultCommand;
        const currentContext = yargs3.getContext();
        let numFiles = currentContext.files.length;
        const parentCommands = currentContext.commands.slice();
        let innerArgv = parsed.argv;
        let innerYargs = null;
        let positionalMap = {};
        if (command3) {
          currentContext.commands.push(command3);
          currentContext.fullCommands.push(commandHandler.original);
        }
        if (typeof commandHandler.builder === "function") {
          innerYargs = commandHandler.builder(yargs3.reset(parsed.aliases));
          if (yargs3.parsed === false) {
            if (shouldUpdateUsage(yargs3)) {
              yargs3.getUsageInstance().usage(
                usageFromParentCommandsCommandHandler(parentCommands, commandHandler),
                commandHandler.description
              );
            }
            innerArgv = innerYargs ? innerYargs._parseArgs(null, null, true, commandIndex) : yargs3._parseArgs(null, null, true, commandIndex);
          } else {
            innerArgv = yargs3.parsed.argv;
          }
          if (innerYargs && yargs3.parsed === false)
            aliases = innerYargs.parsed.aliases;
          else
            aliases = yargs3.parsed.aliases;
        } else if (typeof commandHandler.builder === "object") {
          innerYargs = yargs3.reset(parsed.aliases);
          if (shouldUpdateUsage(innerYargs)) {
            innerYargs.getUsageInstance().usage(
              usageFromParentCommandsCommandHandler(parentCommands, commandHandler),
              commandHandler.description
            );
          }
          Object.keys(commandHandler.builder).forEach((key) => {
            innerYargs.option(key, commandHandler.builder[key]);
          });
          innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);
          aliases = innerYargs.parsed.aliases;
        }
        if (!yargs3._hasOutput()) {
          positionalMap = populatePositionals(commandHandler, innerArgv, currentContext, yargs3);
        }
        const middlewares = globalMiddleware.slice(0).concat(commandHandler.middlewares || []);
        applyMiddleware(innerArgv, yargs3, middlewares, true);
        if (!yargs3._hasOutput())
          yargs3._runValidation(innerArgv, aliases, positionalMap, yargs3.parsed.error);
        if (commandHandler.handler && !yargs3._hasOutput()) {
          yargs3._setHasOutput();
          innerArgv = applyMiddleware(innerArgv, yargs3, middlewares, false);
          const handlerResult = isPromise(innerArgv) ? innerArgv.then((argv2) => commandHandler.handler(argv2)) : commandHandler.handler(innerArgv);
          if (isPromise(handlerResult)) {
            handlerResult.catch(
              (error) => yargs3.getUsageInstance().fail(null, error)
            );
          }
        }
        if (command3) {
          currentContext.commands.pop();
          currentContext.fullCommands.pop();
        }
        numFiles = currentContext.files.length - numFiles;
        if (numFiles > 0)
          currentContext.files.splice(numFiles * -1, numFiles);
        return innerArgv;
      };
      function shouldUpdateUsage(yargs3) {
        return !yargs3.getUsageInstance().getUsageDisabled() && yargs3.getUsageInstance().getUsage().length === 0;
      }
      function usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {
        const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, "").trim() : commandHandler.original;
        const pc = parentCommands.filter((c2) => {
          return !DEFAULT_MARKER.test(c2);
        });
        pc.push(c);
        return `$0 ${pc.join(" ")}`;
      }
      self2.runDefaultBuilderOn = function(yargs3) {
        if (shouldUpdateUsage(yargs3)) {
          const commandString = DEFAULT_MARKER.test(defaultCommand.original) ? defaultCommand.original : defaultCommand.original.replace(/^[^[\]<>]*/, "$0 ");
          yargs3.getUsageInstance().usage(
            commandString,
            defaultCommand.description
          );
        }
        const builder = defaultCommand.builder;
        if (typeof builder === "function") {
          builder(yargs3);
        } else {
          Object.keys(builder).forEach((key) => {
            yargs3.option(key, builder[key]);
          });
        }
      };
      function populatePositionals(commandHandler, argv2, context, yargs3) {
        argv2._ = argv2._.slice(context.commands.length);
        const demanded = commandHandler.demanded.slice(0);
        const optional = commandHandler.optional.slice(0);
        const positionalMap = {};
        validation.positionalCount(demanded.length, argv2._.length);
        while (demanded.length) {
          const demand = demanded.shift();
          populatePositional(demand, argv2, positionalMap);
        }
        while (optional.length) {
          const maybe = optional.shift();
          populatePositional(maybe, argv2, positionalMap);
        }
        argv2._ = context.commands.concat(argv2._);
        postProcessPositionals(argv2, positionalMap, self2.cmdToParseOptions(commandHandler.original));
        return positionalMap;
      }
      function populatePositional(positional, argv2, positionalMap, parseOptions) {
        const cmd = positional.cmd[0];
        if (positional.variadic) {
          positionalMap[cmd] = argv2._.splice(0).map(String);
        } else {
          if (argv2._.length)
            positionalMap[cmd] = [String(argv2._.shift())];
        }
      }
      function postProcessPositionals(argv2, positionalMap, parseOptions) {
        const options = Object.assign({}, yargs2.getOptions());
        options.default = Object.assign(parseOptions.default, options.default);
        options.alias = Object.assign(parseOptions.alias, options.alias);
        options.array = options.array.concat(parseOptions.array);
        delete options.config;
        const unparsed = [];
        Object.keys(positionalMap).forEach((key) => {
          positionalMap[key].map((value) => {
            unparsed.push(`--${key}`);
            unparsed.push(value);
          });
        });
        if (!unparsed.length)
          return;
        const parsed = Parser.detailed(unparsed, options);
        if (parsed.error) {
          yargs2.getUsageInstance().fail(parsed.error.message, parsed.error);
        } else {
          const positionalKeys = Object.keys(positionalMap);
          Object.keys(positionalMap).forEach((key) => {
            [].push.apply(positionalKeys, parsed.aliases[key]);
          });
          Object.keys(parsed.argv).forEach((key) => {
            if (positionalKeys.indexOf(key) !== -1) {
              if (!positionalMap[key])
                positionalMap[key] = parsed.argv[key];
              argv2[key] = parsed.argv[key];
            }
          });
        }
      }
      self2.cmdToParseOptions = function(cmdString) {
        const parseOptions = {
          array: [],
          default: {},
          alias: {},
          demand: {}
        };
        const parsed = self2.parseCommand(cmdString);
        parsed.demanded.forEach((d) => {
          const cmds = d.cmd.slice(0);
          const cmd = cmds.shift();
          if (d.variadic) {
            parseOptions.array.push(cmd);
            parseOptions.default[cmd] = [];
          }
          cmds.forEach((c) => {
            parseOptions.alias[cmd] = c;
          });
          parseOptions.demand[cmd] = true;
        });
        parsed.optional.forEach((o) => {
          const cmds = o.cmd.slice(0);
          const cmd = cmds.shift();
          if (o.variadic) {
            parseOptions.array.push(cmd);
            parseOptions.default[cmd] = [];
          }
          cmds.forEach((c) => {
            parseOptions.alias[cmd] = c;
          });
        });
        return parseOptions;
      };
      self2.reset = () => {
        handlers = {};
        aliasMap = {};
        defaultCommand = void 0;
        return self2;
      };
      let frozen;
      self2.freeze = () => {
        frozen = {};
        frozen.handlers = handlers;
        frozen.aliasMap = aliasMap;
        frozen.defaultCommand = defaultCommand;
      };
      self2.unfreeze = () => {
        handlers = frozen.handlers;
        aliasMap = frozen.aliasMap;
        defaultCommand = frozen.defaultCommand;
        frozen = void 0;
      };
      return self2;
    };
  }
});

// node_modules/yargs/lib/yerror.js
var require_yerror = __commonJS({
  "node_modules/yargs/lib/yerror.js"(exports2, module2) {
    "use strict";
    function YError(msg) {
      this.name = "YError";
      this.message = msg || "yargs error";
      Error.captureStackTrace(this, YError);
    }
    YError.prototype = Object.create(Error.prototype);
    YError.prototype.constructor = YError;
    module2.exports = YError;
  }
});

// node_modules/yargs/lib/argsert.js
var require_argsert = __commonJS({
  "node_modules/yargs/lib/argsert.js"(exports2, module2) {
    "use strict";
    module2.exports = argsert;
    var command2 = require_command()();
    var YError = require_yerror();
    var positionName = ["first", "second", "third", "fourth", "fifth", "sixth"];
    function argsert(expected, callerArguments, length) {
      try {
        let position = 0;
        let parsed = { demanded: [], optional: [] };
        if (typeof expected === "object") {
          length = callerArguments;
          callerArguments = expected;
        } else {
          parsed = command2.parseCommand(`cmd ${expected}`);
        }
        const args = [].slice.call(callerArguments);
        while (args.length && args[args.length - 1] === void 0)
          args.pop();
        length = length || args.length;
        if (length < parsed.demanded.length) {
          throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`);
        }
        const totalCommands = parsed.demanded.length + parsed.optional.length;
        if (length > totalCommands) {
          throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`);
        }
        parsed.demanded.forEach((demanded) => {
          const arg = args.shift();
          const observedType = guessType(arg);
          const matchingTypes = demanded.cmd.filter((type) => type === observedType || type === "*");
          if (matchingTypes.length === 0)
            argumentTypeError(observedType, demanded.cmd, position, false);
          position += 1;
        });
        parsed.optional.forEach((optional) => {
          if (args.length === 0)
            return;
          const arg = args.shift();
          const observedType = guessType(arg);
          const matchingTypes = optional.cmd.filter((type) => type === observedType || type === "*");
          if (matchingTypes.length === 0)
            argumentTypeError(observedType, optional.cmd, position, true);
          position += 1;
        });
      } catch (err) {
        console.warn(err.stack);
      }
    }
    function guessType(arg) {
      if (Array.isArray(arg)) {
        return "array";
      } else if (arg === null) {
        return "null";
      }
      return typeof arg;
    }
    function argumentTypeError(observedType, allowedTypes, position, optional) {
      throw new YError(`Invalid ${positionName[position] || "manyith"} argument. Expected ${allowedTypes.join(" or ")} but received ${observedType}.`);
    }
  }
});

// node_modules/yargs/lib/completion-templates.js
var require_completion_templates = __commonJS({
  "node_modules/yargs/lib/completion-templates.js"(exports2) {
    exports2.completionShTemplate = `###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc
#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.
#
_yargs_completions()
{
    local cur_word args type_list

    cur_word="\${COMP_WORDS[COMP_CWORD]}"
    args=("\${COMP_WORDS[@]}")

    # ask yargs to generate completions.
    type_list=$({{app_path}} --get-yargs-completions "\${args[@]}")

    COMPREPLY=( $(compgen -W "\${type_list}" -- \${cur_word}) )

    # if no match was found, fall back to filename completion
    if [ \${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=()
    fi

    return 0
}
complete -o default -F _yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
`;
    exports2.completionZshTemplate = `###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc
#    or {{app_path}} {{completion_command}} >> ~/.zsh_profile on OSX.
#
_{{app_name}}_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "\${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _{{app_name}}_yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
`;
  }
});

// node_modules/yargs/lib/completion.js
var require_completion = __commonJS({
  "node_modules/yargs/lib/completion.js"(exports2, module2) {
    "use strict";
    var path4 = require("path");
    module2.exports = function completion(yargs2, usage, command2) {
      const self2 = {
        completionKey: "get-yargs-completions"
      };
      const zshShell = process.env.SHELL && process.env.SHELL.indexOf("zsh") !== -1;
      self2.getCompletion = function getCompletion(args, done) {
        const completions = [];
        const current = args.length ? args[args.length - 1] : "";
        const argv2 = yargs2.parse(args, true);
        const aliases = yargs2.parsed.aliases;
        const parentCommands = yargs2.getContext().commands;
        if (completionFunction) {
          if (completionFunction.length < 3) {
            const result = completionFunction(current, argv2);
            if (typeof result.then === "function") {
              return result.then((list) => {
                process.nextTick(() => {
                  done(list);
                });
              }).catch((err) => {
                process.nextTick(() => {
                  throw err;
                });
              });
            }
            return done(result);
          } else {
            return completionFunction(current, argv2, (completions2) => {
              done(completions2);
            });
          }
        }
        const handlers = command2.getCommandHandlers();
        for (let i = 0, ii = args.length; i < ii; ++i) {
          if (handlers[args[i]] && handlers[args[i]].builder) {
            const builder = handlers[args[i]].builder;
            if (typeof builder === "function") {
              const y = yargs2.reset();
              builder(y);
              return y.argv;
            }
          }
        }
        if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {
          usage.getCommands().forEach((usageCommand) => {
            const commandName = command2.parseCommand(usageCommand[0]).cmd;
            if (args.indexOf(commandName) === -1) {
              if (!zshShell) {
                completions.push(commandName);
              } else {
                const desc = usageCommand[1] || "";
                completions.push(commandName.replace(/:/g, "\\:") + ":" + desc);
              }
            }
          });
        }
        if (current.match(/^-/) || current === "" && completions.length === 0) {
          const descs = usage.getDescriptions();
          Object.keys(yargs2.getOptions().key).forEach((key) => {
            const keyAndAliases = [key].concat(aliases[key] || []);
            const notInArgs = keyAndAliases.every((val) => args.indexOf(`--${val}`) === -1);
            if (notInArgs) {
              if (!zshShell) {
                completions.push(`--${key}`);
              } else {
                const desc = descs[key] || "";
                completions.push(`--${key.replace(/:/g, "\\:")}:${desc.replace("__yargsString__:", "")}`);
              }
            }
          });
        }
        done(completions);
      };
      self2.generateCompletionScript = function generateCompletionScript($0, cmd) {
        const templates = require_completion_templates();
        let script = zshShell ? templates.completionZshTemplate : templates.completionShTemplate;
        const name = path4.basename($0);
        if ($0.match(/\.js$/))
          $0 = `./${$0}`;
        script = script.replace(/{{app_name}}/g, name);
        script = script.replace(/{{completion_command}}/g, cmd);
        return script.replace(/{{app_path}}/g, $0);
      };
      let completionFunction = null;
      self2.registerFunction = (fn) => {
        completionFunction = fn;
      };
      return self2;
    };
  }
});

// node_modules/yargs/lib/decamelize.js
var require_decamelize2 = __commonJS({
  "node_modules/yargs/lib/decamelize.js"(exports2, module2) {
    "use strict";
    module2.exports = (text, separator) => {
      separator = typeof separator === "undefined" ? "_" : separator;
      return text.replace(/([a-z\d])([A-Z])/g, `$1${separator}$2`).replace(/([A-Z]+)([A-Z][a-z\d]+)/g, `$1${separator}$2`).toLowerCase();
    };
  }
});

// node_modules/yargs/node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS({
  "node_modules/yargs/node_modules/ansi-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (options) => {
      options = Object.assign({
        onlyFirst: false
      }, options);
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, options.onlyFirst ? void 0 : "g");
    };
  }
});

// node_modules/yargs/node_modules/strip-ansi/index.js
var require_strip_ansi = __commonJS({
  "node_modules/yargs/node_modules/strip-ansi/index.js"(exports2, module2) {
    "use strict";
    var ansiRegex = require_ansi_regex();
    var stripAnsi = (string2) => typeof string2 === "string" ? string2.replace(ansiRegex(), "") : string2;
    module2.exports = stripAnsi;
    module2.exports.default = stripAnsi;
  }
});

// node_modules/yargs/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point = __commonJS({
  "node_modules/yargs/node_modules/is-fullwidth-code-point/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (x) => {
      if (Number.isNaN(x)) {
        return false;
      }
      if (x >= 4352 && (x <= 4447 || // Hangul Jamo
      x === 9001 || // LEFT-POINTING ANGLE BRACKET
      x === 9002 || // RIGHT-POINTING ANGLE BRACKET
      // CJK Radicals Supplement .. Enclosed CJK Letters and Months
      11904 <= x && x <= 12871 && x !== 12351 || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
      12880 <= x && x <= 19903 || // CJK Unified Ideographs .. Yi Radicals
      19968 <= x && x <= 42182 || // Hangul Jamo Extended-A
      43360 <= x && x <= 43388 || // Hangul Syllables
      44032 <= x && x <= 55203 || // CJK Compatibility Ideographs
      63744 <= x && x <= 64255 || // Vertical Forms
      65040 <= x && x <= 65049 || // CJK Compatibility Forms .. Small Form Variants
      65072 <= x && x <= 65131 || // Halfwidth and Fullwidth Forms
      65281 <= x && x <= 65376 || 65504 <= x && x <= 65510 || // Kana Supplement
      110592 <= x && x <= 110593 || // Enclosed Ideographic Supplement
      127488 <= x && x <= 127569 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
      131072 <= x && x <= 262141)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/yargs/node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "node_modules/yargs/node_modules/emoji-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function() {
      return /\uD83C\uDFF4(?:\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74)\uDB40\uDC7F|\u200D\u2620\uFE0F)|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3]))|\uD83D\uDC69\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83D\uDC69\u200D[\u2695\u2696\u2708])\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC68(?:\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDD1-\uDDDD])/g;
    };
  }
});

// node_modules/yargs/node_modules/string-width/index.js
var require_string_width = __commonJS({
  "node_modules/yargs/node_modules/string-width/index.js"(exports2, module2) {
    "use strict";
    var stripAnsi = require_strip_ansi();
    var isFullwidthCodePoint = require_is_fullwidth_code_point();
    var emojiRegex = require_emoji_regex()();
    module2.exports = (input) => {
      input = input.replace(emojiRegex, "  ");
      if (typeof input !== "string" || input.length === 0) {
        return 0;
      }
      input = stripAnsi(input);
      let width = 0;
      for (let i = 0; i < input.length; i++) {
        const code = input.codePointAt(i);
        if (code <= 31 || code >= 127 && code <= 159) {
          continue;
        }
        if (code >= 768 && code <= 879) {
          continue;
        }
        if (code > 65535) {
          i++;
        }
        width += isFullwidthCodePoint(code) ? 2 : 1;
      }
      return width;
    };
  }
});

// node_modules/yargs/lib/obj-filter.js
var require_obj_filter = __commonJS({
  "node_modules/yargs/lib/obj-filter.js"(exports2, module2) {
    "use strict";
    module2.exports = function objFilter(original, filter2) {
      const obj = {};
      filter2 = filter2 || ((k, v) => true);
      Object.keys(original || {}).forEach((key) => {
        if (filter2(key, original[key])) {
          obj[key] = original[key];
        }
      });
      return obj;
    };
  }
});

// node_modules/set-blocking/index.js
var require_set_blocking = __commonJS({
  "node_modules/set-blocking/index.js"(exports2, module2) {
    module2.exports = function(blocking) {
      [process.stdout, process.stderr].forEach(function(stream2) {
        if (stream2._handle && stream2.isTTY && typeof stream2._handle.setBlocking === "function") {
          stream2._handle.setBlocking(blocking);
        }
      });
    };
  }
});

// node_modules/cliui/node_modules/ansi-regex/index.js
var require_ansi_regex2 = __commonJS({
  "node_modules/cliui/node_modules/ansi-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (options) => {
      options = Object.assign({
        onlyFirst: false
      }, options);
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, options.onlyFirst ? void 0 : "g");
    };
  }
});

// node_modules/cliui/node_modules/strip-ansi/index.js
var require_strip_ansi2 = __commonJS({
  "node_modules/cliui/node_modules/strip-ansi/index.js"(exports2, module2) {
    "use strict";
    var ansiRegex = require_ansi_regex2();
    var stripAnsi = (string2) => typeof string2 === "string" ? string2.replace(ansiRegex(), "") : string2;
    module2.exports = stripAnsi;
    module2.exports.default = stripAnsi;
  }
});

// node_modules/cliui/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point2 = __commonJS({
  "node_modules/cliui/node_modules/is-fullwidth-code-point/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (x) => {
      if (Number.isNaN(x)) {
        return false;
      }
      if (x >= 4352 && (x <= 4447 || // Hangul Jamo
      x === 9001 || // LEFT-POINTING ANGLE BRACKET
      x === 9002 || // RIGHT-POINTING ANGLE BRACKET
      // CJK Radicals Supplement .. Enclosed CJK Letters and Months
      11904 <= x && x <= 12871 && x !== 12351 || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
      12880 <= x && x <= 19903 || // CJK Unified Ideographs .. Yi Radicals
      19968 <= x && x <= 42182 || // Hangul Jamo Extended-A
      43360 <= x && x <= 43388 || // Hangul Syllables
      44032 <= x && x <= 55203 || // CJK Compatibility Ideographs
      63744 <= x && x <= 64255 || // Vertical Forms
      65040 <= x && x <= 65049 || // CJK Compatibility Forms .. Small Form Variants
      65072 <= x && x <= 65131 || // Halfwidth and Fullwidth Forms
      65281 <= x && x <= 65376 || 65504 <= x && x <= 65510 || // Kana Supplement
      110592 <= x && x <= 110593 || // Enclosed Ideographic Supplement
      127488 <= x && x <= 127569 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
      131072 <= x && x <= 262141)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/cliui/node_modules/emoji-regex/index.js
var require_emoji_regex2 = __commonJS({
  "node_modules/cliui/node_modules/emoji-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function() {
      return /\uD83C\uDFF4(?:\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74)\uDB40\uDC7F|\u200D\u2620\uFE0F)|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3]))|\uD83D\uDC69\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83D\uDC69\u200D[\u2695\u2696\u2708])\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC68(?:\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDD1-\uDDDD])/g;
    };
  }
});

// node_modules/cliui/node_modules/string-width/index.js
var require_string_width2 = __commonJS({
  "node_modules/cliui/node_modules/string-width/index.js"(exports2, module2) {
    "use strict";
    var stripAnsi = require_strip_ansi2();
    var isFullwidthCodePoint = require_is_fullwidth_code_point2();
    var emojiRegex = require_emoji_regex2()();
    module2.exports = (input) => {
      input = input.replace(emojiRegex, "  ");
      if (typeof input !== "string" || input.length === 0) {
        return 0;
      }
      input = stripAnsi(input);
      let width = 0;
      for (let i = 0; i < input.length; i++) {
        const code = input.codePointAt(i);
        if (code <= 31 || code >= 127 && code <= 159) {
          continue;
        }
        if (code >= 768 && code <= 879) {
          continue;
        }
        if (code > 65535) {
          i++;
        }
        width += isFullwidthCodePoint(code) ? 2 : 1;
      }
      return width;
    };
  }
});

// node_modules/wrap-ansi/node_modules/ansi-regex/index.js
var require_ansi_regex3 = __commonJS({
  "node_modules/wrap-ansi/node_modules/ansi-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (options) => {
      options = Object.assign({
        onlyFirst: false
      }, options);
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, options.onlyFirst ? void 0 : "g");
    };
  }
});

// node_modules/wrap-ansi/node_modules/strip-ansi/index.js
var require_strip_ansi3 = __commonJS({
  "node_modules/wrap-ansi/node_modules/strip-ansi/index.js"(exports2, module2) {
    "use strict";
    var ansiRegex = require_ansi_regex3();
    var stripAnsi = (string2) => typeof string2 === "string" ? string2.replace(ansiRegex(), "") : string2;
    module2.exports = stripAnsi;
    module2.exports.default = stripAnsi;
  }
});

// node_modules/wrap-ansi/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point3 = __commonJS({
  "node_modules/wrap-ansi/node_modules/is-fullwidth-code-point/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (x) => {
      if (Number.isNaN(x)) {
        return false;
      }
      if (x >= 4352 && (x <= 4447 || // Hangul Jamo
      x === 9001 || // LEFT-POINTING ANGLE BRACKET
      x === 9002 || // RIGHT-POINTING ANGLE BRACKET
      // CJK Radicals Supplement .. Enclosed CJK Letters and Months
      11904 <= x && x <= 12871 && x !== 12351 || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
      12880 <= x && x <= 19903 || // CJK Unified Ideographs .. Yi Radicals
      19968 <= x && x <= 42182 || // Hangul Jamo Extended-A
      43360 <= x && x <= 43388 || // Hangul Syllables
      44032 <= x && x <= 55203 || // CJK Compatibility Ideographs
      63744 <= x && x <= 64255 || // Vertical Forms
      65040 <= x && x <= 65049 || // CJK Compatibility Forms .. Small Form Variants
      65072 <= x && x <= 65131 || // Halfwidth and Fullwidth Forms
      65281 <= x && x <= 65376 || 65504 <= x && x <= 65510 || // Kana Supplement
      110592 <= x && x <= 110593 || // Enclosed Ideographic Supplement
      127488 <= x && x <= 127569 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
      131072 <= x && x <= 262141)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/wrap-ansi/node_modules/emoji-regex/index.js
var require_emoji_regex3 = __commonJS({
  "node_modules/wrap-ansi/node_modules/emoji-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function() {
      return /\uD83C\uDFF4(?:\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74)\uDB40\uDC7F|\u200D\u2620\uFE0F)|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3]))|\uD83D\uDC69\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83D\uDC69\u200D[\u2695\u2696\u2708])\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC68(?:\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDD1-\uDDDD])/g;
    };
  }
});

// node_modules/wrap-ansi/node_modules/string-width/index.js
var require_string_width3 = __commonJS({
  "node_modules/wrap-ansi/node_modules/string-width/index.js"(exports2, module2) {
    "use strict";
    var stripAnsi = require_strip_ansi3();
    var isFullwidthCodePoint = require_is_fullwidth_code_point3();
    var emojiRegex = require_emoji_regex3()();
    module2.exports = (input) => {
      input = input.replace(emojiRegex, "  ");
      if (typeof input !== "string" || input.length === 0) {
        return 0;
      }
      input = stripAnsi(input);
      let width = 0;
      for (let i = 0; i < input.length; i++) {
        const code = input.codePointAt(i);
        if (code <= 31 || code >= 127 && code <= 159) {
          continue;
        }
        if (code >= 768 && code <= 879) {
          continue;
        }
        if (code > 65535) {
          i++;
        }
        width += isFullwidthCodePoint(code) ? 2 : 1;
      }
      return width;
    };
  }
});

// node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/color-name/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/color-convert/conversions.js"(exports2, module2) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }
    var key;
    var convert = module2.exports = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s;
      var l;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);
      var diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      t1 = 2 * l - t2;
      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v;
      var f;
      var n;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh);
      var r;
      var g;
      var b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string2 = integer.toString(16).toUpperCase();
      return "000000".substring(string2.length) + string2;
    };
    convert.hex.rgb = function(args) {
      var match2 = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match2) {
        return [0, 0, 0];
      }
      var colorString = match2[0];
      if (match2[0].length === 3) {
        colorString = colorString.split("").map(function(char) {
          return char + char;
        }).join("");
      }
      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = 1;
      var f = 0;
      if (l < 0.5) {
        c = 2 * s * l;
      } else {
        c = 2 * s * (1 - l);
      }
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      var f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1 - c) + 0.5 * c;
      var s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string2 = integer.toString(16).toUpperCase();
      return "000000".substring(string2.length) + string2;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/color-convert/route.js"(exports2, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path4 = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path4.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path4;
      return fn;
    }
    module2.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/color-convert/index.js"(exports2, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === "object") {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

// node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  "node_modules/ansi-styles/index.js"(exports2, module2) {
    "use strict";
    var colorConvert = require_color_convert();
    var wrapAnsi16 = (fn, offset) => function() {
      const code = fn.apply(colorConvert, arguments);
      return `\x1B[${code + offset}m`;
    };
    var wrapAnsi256 = (fn, offset) => function() {
      const code = fn.apply(colorConvert, arguments);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    var wrapAnsi16m = (fn, offset) => function() {
      const rgb = fn.apply(colorConvert, arguments);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          gray: [90, 39],
          // Bright color
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.grey = styles.color.gray;
      for (const groupName of Object.keys(styles)) {
        const group = styles[groupName];
        for (const styleName of Object.keys(group)) {
          const style = group[styleName];
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
      }
      const ansi2ansi = (n) => n;
      const rgb2rgb = (r, g, b) => [r, g, b];
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      styles.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
      };
      styles.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
      };
      styles.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
      };
      styles.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
      };
      styles.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
      };
      styles.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
      };
      for (let key of Object.keys(colorConvert)) {
        if (typeof colorConvert[key] !== "object") {
          continue;
        }
        const suite = colorConvert[key];
        if (key === "ansi16") {
          key = "ansi";
        }
        if ("ansi16" in suite) {
          styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
          styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
        }
        if ("ansi256" in suite) {
          styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
          styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
        }
        if ("rgb" in suite) {
          styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
          styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
        }
      }
      return styles;
    }
    Object.defineProperty(module2, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

// node_modules/wrap-ansi/index.js
var require_wrap_ansi = __commonJS({
  "node_modules/wrap-ansi/index.js"(exports2, module2) {
    "use strict";
    var stringWidth = require_string_width3();
    var stripAnsi = require_strip_ansi3();
    var ansiStyles = require_ansi_styles();
    var ESCAPES = /* @__PURE__ */ new Set([
      "\x1B",
      "\x9B"
    ]);
    var END_CODE = 39;
    var wrapAnsi = (code) => `${ESCAPES.values().next().value}[${code}m`;
    var wordLengths = (string2) => string2.split(" ").map((character) => stringWidth(character));
    var wrapWord = (rows, word, columns) => {
      const characters = [...word];
      let insideEscape = false;
      let visible = stringWidth(stripAnsi(rows[rows.length - 1]));
      for (const [index, character] of characters.entries()) {
        const characterLength = stringWidth(character);
        if (visible + characterLength <= columns) {
          rows[rows.length - 1] += character;
        } else {
          rows.push(character);
          visible = 0;
        }
        if (ESCAPES.has(character)) {
          insideEscape = true;
        } else if (insideEscape && character === "m") {
          insideEscape = false;
          continue;
        }
        if (insideEscape) {
          continue;
        }
        visible += characterLength;
        if (visible === columns && index < characters.length - 1) {
          rows.push("");
          visible = 0;
        }
      }
      if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
        rows[rows.length - 2] += rows.pop();
      }
    };
    var stringVisibleTrimSpacesRight = (str) => {
      const words = str.split(" ");
      let last = words.length;
      while (last > 0) {
        if (stringWidth(words[last - 1]) > 0) {
          break;
        }
        last--;
      }
      if (last === words.length) {
        return str;
      }
      return words.slice(0, last).join(" ") + words.slice(last).join("");
    };
    var exec = (string2, columns, options = {}) => {
      if (options.trim !== false && string2.trim() === "") {
        return "";
      }
      let pre = "";
      let ret = "";
      let escapeCode;
      const lengths = wordLengths(string2);
      let rows = [""];
      for (const [index, word] of string2.split(" ").entries()) {
        if (options.trim !== false) {
          rows[rows.length - 1] = rows[rows.length - 1].trimLeft();
        }
        let rowLength = stringWidth(rows[rows.length - 1]);
        if (index !== 0) {
          if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
            rows.push("");
            rowLength = 0;
          }
          if (rowLength > 0 || options.trim === false) {
            rows[rows.length - 1] += " ";
            rowLength++;
          }
        }
        if (options.hard && lengths[index] > columns) {
          const remainingColumns = columns - rowLength;
          const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
          const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
          if (breaksStartingNextLine < breaksStartingThisLine) {
            rows.push("");
          }
          wrapWord(rows, word, columns);
          continue;
        }
        if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
          if (options.wordWrap === false && rowLength < columns) {
            wrapWord(rows, word, columns);
            continue;
          }
          rows.push("");
        }
        if (rowLength + lengths[index] > columns && options.wordWrap === false) {
          wrapWord(rows, word, columns);
          continue;
        }
        rows[rows.length - 1] += word;
      }
      if (options.trim !== false) {
        rows = rows.map(stringVisibleTrimSpacesRight);
      }
      pre = rows.join("\n");
      for (const [index, character] of [...pre].entries()) {
        ret += character;
        if (ESCAPES.has(character)) {
          const code2 = parseFloat(/\d[^m]*/.exec(pre.slice(index, index + 4)));
          escapeCode = code2 === END_CODE ? null : code2;
        }
        const code = ansiStyles.codes.get(Number(escapeCode));
        if (escapeCode && code) {
          if (pre[index + 1] === "\n") {
            ret += wrapAnsi(code);
          } else if (character === "\n") {
            ret += wrapAnsi(escapeCode);
          }
        }
      }
      return ret;
    };
    module2.exports = (string2, columns, options) => {
      return String(string2).normalize().split("\n").map((line) => exec(line, columns, options)).join("\n");
    };
  }
});

// node_modules/cliui/index.js
var require_cliui = __commonJS({
  "node_modules/cliui/index.js"(exports2, module2) {
    var stringWidth = require_string_width2();
    var stripAnsi = require_strip_ansi2();
    var wrap = require_wrap_ansi();
    var align = {
      right: alignRight,
      center: alignCenter
    };
    var top = 0;
    var right = 1;
    var bottom = 2;
    var left = 3;
    function UI(opts) {
      this.width = opts.width;
      this.wrap = opts.wrap;
      this.rows = [];
    }
    UI.prototype.span = function() {
      var cols = this.div.apply(this, arguments);
      cols.span = true;
    };
    UI.prototype.resetOutput = function() {
      this.rows = [];
    };
    UI.prototype.div = function() {
      if (arguments.length === 0)
        this.div("");
      if (this.wrap && this._shouldApplyLayoutDSL.apply(this, arguments)) {
        return this._applyLayoutDSL(arguments[0]);
      }
      var cols = [];
      for (var i = 0, arg; (arg = arguments[i]) !== void 0; i++) {
        if (typeof arg === "string")
          cols.push(this._colFromString(arg));
        else
          cols.push(arg);
      }
      this.rows.push(cols);
      return cols;
    };
    UI.prototype._shouldApplyLayoutDSL = function() {
      return arguments.length === 1 && typeof arguments[0] === "string" && /[\t\n]/.test(arguments[0]);
    };
    UI.prototype._applyLayoutDSL = function(str) {
      var _this = this;
      var rows = str.split("\n");
      var leftColumnWidth = 0;
      rows.forEach(function(row) {
        var columns = row.split("	");
        if (columns.length > 1 && stringWidth(columns[0]) > leftColumnWidth) {
          leftColumnWidth = Math.min(
            Math.floor(_this.width * 0.5),
            stringWidth(columns[0])
          );
        }
      });
      rows.forEach(function(row) {
        var columns = row.split("	");
        _this.div.apply(_this, columns.map(function(r, i) {
          return {
            text: r.trim(),
            padding: _this._measurePadding(r),
            width: i === 0 && columns.length > 1 ? leftColumnWidth : void 0
          };
        }));
      });
      return this.rows[this.rows.length - 1];
    };
    UI.prototype._colFromString = function(str) {
      return {
        text: str,
        padding: this._measurePadding(str)
      };
    };
    UI.prototype._measurePadding = function(str) {
      var noAnsi = stripAnsi(str);
      return [0, noAnsi.match(/\s*$/)[0].length, 0, noAnsi.match(/^\s*/)[0].length];
    };
    UI.prototype.toString = function() {
      var _this = this;
      var lines = [];
      _this.rows.forEach(function(row, i) {
        _this.rowToString(row, lines);
      });
      lines = lines.filter(function(line) {
        return !line.hidden;
      });
      return lines.map(function(line) {
        return line.text;
      }).join("\n");
    };
    UI.prototype.rowToString = function(row, lines) {
      var _this = this;
      var padding;
      var rrows = this._rasterize(row);
      var str = "";
      var ts;
      var width;
      var wrapWidth;
      rrows.forEach(function(rrow, r) {
        str = "";
        rrow.forEach(function(col, c) {
          ts = "";
          width = row[c].width;
          wrapWidth = _this._negatePadding(row[c]);
          ts += col;
          for (var i = 0; i < wrapWidth - stringWidth(col); i++) {
            ts += " ";
          }
          if (row[c].align && row[c].align !== "left" && _this.wrap) {
            ts = align[row[c].align](ts, wrapWidth);
            if (stringWidth(ts) < wrapWidth)
              ts += new Array(width - stringWidth(ts)).join(" ");
          }
          padding = row[c].padding || [0, 0, 0, 0];
          if (padding[left])
            str += new Array(padding[left] + 1).join(" ");
          str += addBorder(row[c], ts, "| ");
          str += ts;
          str += addBorder(row[c], ts, " |");
          if (padding[right])
            str += new Array(padding[right] + 1).join(" ");
          if (r === 0 && lines.length > 0) {
            str = _this._renderInline(str, lines[lines.length - 1]);
          }
        });
        lines.push({
          text: str.replace(/ +$/, ""),
          span: row.span
        });
      });
      return lines;
    };
    function addBorder(col, ts, style) {
      if (col.border) {
        if (/[.']-+[.']/.test(ts))
          return "";
        else if (ts.trim().length)
          return style;
        else
          return "  ";
      }
      return "";
    }
    UI.prototype._renderInline = function(source, previousLine) {
      var leadingWhitespace = source.match(/^ */)[0].length;
      var target = previousLine.text;
      var targetTextWidth = stringWidth(target.trimRight());
      if (!previousLine.span)
        return source;
      if (!this.wrap) {
        previousLine.hidden = true;
        return target + source;
      }
      if (leadingWhitespace < targetTextWidth)
        return source;
      previousLine.hidden = true;
      return target.trimRight() + new Array(leadingWhitespace - targetTextWidth + 1).join(" ") + source.trimLeft();
    };
    UI.prototype._rasterize = function(row) {
      var _this = this;
      var i;
      var rrow;
      var rrows = [];
      var widths = this._columnWidths(row);
      var wrapped;
      row.forEach(function(col, c) {
        col.width = widths[c];
        if (_this.wrap)
          wrapped = wrap(col.text, _this._negatePadding(col), { hard: true }).split("\n");
        else
          wrapped = col.text.split("\n");
        if (col.border) {
          wrapped.unshift("." + new Array(_this._negatePadding(col) + 3).join("-") + ".");
          wrapped.push("'" + new Array(_this._negatePadding(col) + 3).join("-") + "'");
        }
        if (col.padding) {
          for (i = 0; i < (col.padding[top] || 0); i++)
            wrapped.unshift("");
          for (i = 0; i < (col.padding[bottom] || 0); i++)
            wrapped.push("");
        }
        wrapped.forEach(function(str, r) {
          if (!rrows[r])
            rrows.push([]);
          rrow = rrows[r];
          for (var i2 = 0; i2 < c; i2++) {
            if (rrow[i2] === void 0)
              rrow.push("");
          }
          rrow.push(str);
        });
      });
      return rrows;
    };
    UI.prototype._negatePadding = function(col) {
      var wrapWidth = col.width;
      if (col.padding)
        wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);
      if (col.border)
        wrapWidth -= 4;
      return wrapWidth;
    };
    UI.prototype._columnWidths = function(row) {
      var _this = this;
      var widths = [];
      var unset = row.length;
      var unsetWidth;
      var remainingWidth = this.width;
      row.forEach(function(col, i) {
        if (col.width) {
          unset--;
          widths[i] = col.width;
          remainingWidth -= col.width;
        } else {
          widths[i] = void 0;
        }
      });
      if (unset)
        unsetWidth = Math.floor(remainingWidth / unset);
      widths.forEach(function(w, i) {
        if (!_this.wrap)
          widths[i] = row[i].width || stringWidth(row[i].text);
        else if (w === void 0)
          widths[i] = Math.max(unsetWidth, _minWidth(row[i]));
      });
      return widths;
    };
    function _minWidth(col) {
      var padding = col.padding || [];
      var minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);
      if (col.border)
        minWidth += 4;
      return minWidth;
    }
    function getWindowWidth() {
      if (typeof process === "object" && process.stdout && process.stdout.columns)
        return process.stdout.columns;
    }
    function alignRight(str, width) {
      str = str.trim();
      var padding = "";
      var strWidth = stringWidth(str);
      if (strWidth < width) {
        padding = new Array(width - strWidth + 1).join(" ");
      }
      return padding + str;
    }
    function alignCenter(str, width) {
      str = str.trim();
      var padding = "";
      var strWidth = stringWidth(str.trim());
      if (strWidth < width) {
        padding = new Array(parseInt((width - strWidth) / 2, 10) + 1).join(" ");
      }
      return padding + str;
    }
    module2.exports = function(opts) {
      opts = opts || {};
      return new UI({
        width: (opts || {}).width || getWindowWidth() || 80,
        wrap: typeof opts.wrap === "boolean" ? opts.wrap : true
      });
    };
  }
});

// node_modules/yargs/lib/usage.js
var require_usage = __commonJS({
  "node_modules/yargs/lib/usage.js"(exports2, module2) {
    "use strict";
    var decamelize = require_decamelize2();
    var stringWidth = require_string_width();
    var objFilter = require_obj_filter();
    var path4 = require("path");
    var setBlocking = require_set_blocking();
    var YError = require_yerror();
    module2.exports = function usage(yargs2, y18n) {
      const __ = y18n.__;
      const self2 = {};
      const fails = [];
      self2.failFn = function failFn(f) {
        fails.push(f);
      };
      let failMessage = null;
      let showHelpOnFail = true;
      self2.showHelpOnFail = function showHelpOnFailFn(enabled, message) {
        if (typeof enabled === "string") {
          message = enabled;
          enabled = true;
        } else if (typeof enabled === "undefined") {
          enabled = true;
        }
        failMessage = message;
        showHelpOnFail = enabled;
        return self2;
      };
      let failureOutput = false;
      self2.fail = function fail(msg, err) {
        const logger2 = yargs2._getLoggerInstance();
        if (fails.length) {
          for (let i = fails.length - 1; i >= 0; --i) {
            fails[i](msg, err, self2);
          }
        } else {
          if (yargs2.getExitProcess())
            setBlocking(true);
          if (!failureOutput) {
            failureOutput = true;
            if (showHelpOnFail) {
              yargs2.showHelp("error");
              logger2.error();
            }
            if (msg || err)
              logger2.error(msg || err);
            if (failMessage) {
              if (msg || err)
                logger2.error("");
              logger2.error(failMessage);
            }
          }
          err = err || new YError(msg);
          if (yargs2.getExitProcess()) {
            return yargs2.exit(1);
          } else if (yargs2._hasParseCallback()) {
            return yargs2.exit(1, err);
          } else {
            throw err;
          }
        }
      };
      let usages = [];
      let usageDisabled = false;
      self2.usage = (msg, description) => {
        if (msg === null) {
          usageDisabled = true;
          usages = [];
          return;
        }
        usageDisabled = false;
        usages.push([msg, description || ""]);
        return self2;
      };
      self2.getUsage = () => {
        return usages;
      };
      self2.getUsageDisabled = () => {
        return usageDisabled;
      };
      self2.getPositionalGroupName = () => {
        return __("Positionals:");
      };
      let examples = [];
      self2.example = (cmd, description) => {
        examples.push([cmd, description || ""]);
      };
      let commands = [];
      self2.command = function command2(cmd, description, isDefault, aliases) {
        if (isDefault) {
          commands = commands.map((cmdArray) => {
            cmdArray[2] = false;
            return cmdArray;
          });
        }
        commands.push([cmd, description || "", isDefault, aliases]);
      };
      self2.getCommands = () => commands;
      let descriptions = {};
      self2.describe = function describe(key, desc) {
        if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            self2.describe(k, key[k]);
          });
        } else {
          descriptions[key] = desc;
        }
      };
      self2.getDescriptions = () => descriptions;
      let epilog;
      self2.epilog = (msg) => {
        epilog = msg;
      };
      let wrapSet = false;
      let wrap;
      self2.wrap = (cols) => {
        wrapSet = true;
        wrap = cols;
      };
      function getWrap() {
        if (!wrapSet) {
          wrap = windowWidth();
          wrapSet = true;
        }
        return wrap;
      }
      const deferY18nLookupPrefix = "__yargsString__:";
      self2.deferY18nLookup = (str) => deferY18nLookupPrefix + str;
      const defaultGroup = "Options:";
      self2.help = function help() {
        normalizeAliases();
        const base$0 = path4.basename(yargs2.$0);
        const demandedOptions = yargs2.getDemandedOptions();
        const demandedCommands = yargs2.getDemandedCommands();
        const groups = yargs2.getGroups();
        const options = yargs2.getOptions();
        let keys = [];
        keys = keys.concat(Object.keys(descriptions));
        keys = keys.concat(Object.keys(demandedOptions));
        keys = keys.concat(Object.keys(demandedCommands));
        keys = keys.concat(Object.keys(options.default));
        keys = keys.filter(filterHiddenOptions);
        keys = Object.keys(keys.reduce((acc, key) => {
          if (key !== "_")
            acc[key] = true;
          return acc;
        }, {}));
        const theWrap = getWrap();
        const ui = require_cliui()({
          width: theWrap,
          wrap: !!theWrap
        });
        if (!usageDisabled) {
          if (usages.length) {
            usages.forEach((usage2) => {
              ui.div(`${usage2[0].replace(/\$0/g, base$0)}`);
              if (usage2[1]) {
                ui.div({ text: `${usage2[1]}`, padding: [1, 0, 0, 0] });
              }
            });
            ui.div();
          } else if (commands.length) {
            let u = null;
            if (demandedCommands._) {
              u = `${base$0} <${__("command")}>
`;
            } else {
              u = `${base$0} [${__("command")}]
`;
            }
            ui.div(`${u}`);
          }
        }
        if (commands.length) {
          ui.div(__("Commands:"));
          const context = yargs2.getContext();
          const parentCommands = context.commands.length ? `${context.commands.join(" ")} ` : "";
          if (yargs2.getParserConfiguration()["sort-commands"] === true) {
            commands = commands.sort((a, b) => a[0].localeCompare(b[0]));
          }
          commands.forEach((command2) => {
            const commandString = `${base$0} ${parentCommands}${command2[0].replace(/^\$0 ?/, "")}`;
            ui.span(
              {
                text: commandString,
                padding: [0, 2, 0, 2],
                width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4
              },
              { text: command2[1] }
            );
            const hints = [];
            if (command2[2])
              hints.push(`[${__("default:").slice(0, -1)}]`);
            if (command2[3] && command2[3].length) {
              hints.push(`[${__("aliases:")} ${command2[3].join(", ")}]`);
            }
            if (hints.length) {
              ui.div({ text: hints.join(" "), padding: [0, 0, 0, 2], align: "right" });
            } else {
              ui.div();
            }
          });
          ui.div();
        }
        const aliasKeys = (Object.keys(options.alias) || []).concat(Object.keys(yargs2.parsed.newAliases) || []);
        keys = keys.filter((key) => !yargs2.parsed.newAliases[key] && aliasKeys.every((alias) => (options.alias[alias] || []).indexOf(key) === -1));
        if (!groups[defaultGroup])
          groups[defaultGroup] = [];
        addUngroupedKeys(keys, options.alias, groups);
        Object.keys(groups).forEach((groupName) => {
          if (!groups[groupName].length)
            return;
          const normalizedKeys = groups[groupName].filter(filterHiddenOptions).map((key) => {
            if (~aliasKeys.indexOf(key))
              return key;
            for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== void 0; i++) {
              if (~(options.alias[aliasKey] || []).indexOf(key))
                return aliasKey;
            }
            return key;
          });
          if (normalizedKeys.length < 1)
            return;
          ui.div(__(groupName));
          const switches = normalizedKeys.reduce((acc, key) => {
            acc[key] = [key].concat(options.alias[key] || []).map((sw) => {
              if (groupName === self2.getPositionalGroupName())
                return sw;
              else
                return (sw.length > 1 ? "--" : "-") + sw;
            }).join(", ");
            return acc;
          }, {});
          normalizedKeys.forEach((key) => {
            const kswitch = switches[key];
            let desc = descriptions[key] || "";
            let type = null;
            if (~desc.lastIndexOf(deferY18nLookupPrefix))
              desc = __(desc.substring(deferY18nLookupPrefix.length));
            if (~options.boolean.indexOf(key))
              type = `[${__("boolean")}]`;
            if (~options.count.indexOf(key))
              type = `[${__("count")}]`;
            if (~options.string.indexOf(key))
              type = `[${__("string")}]`;
            if (~options.normalize.indexOf(key))
              type = `[${__("string")}]`;
            if (~options.array.indexOf(key))
              type = `[${__("array")}]`;
            if (~options.number.indexOf(key))
              type = `[${__("number")}]`;
            const extra = [
              type,
              key in demandedOptions ? `[${__("required")}]` : null,
              options.choices && options.choices[key] ? `[${__("choices:")} ${self2.stringifiedValues(options.choices[key])}]` : null,
              defaultString(options.default[key], options.defaultDescription[key])
            ].filter(Boolean).join(" ");
            ui.span(
              { text: kswitch, padding: [0, 2, 0, 2], width: maxWidth(switches, theWrap) + 4 },
              desc
            );
            if (extra)
              ui.div({ text: extra, padding: [0, 0, 0, 2], align: "right" });
            else
              ui.div();
          });
          ui.div();
        });
        if (examples.length) {
          ui.div(__("Examples:"));
          examples.forEach((example) => {
            example[0] = example[0].replace(/\$0/g, base$0);
          });
          examples.forEach((example) => {
            if (example[1] === "") {
              ui.div(
                {
                  text: example[0],
                  padding: [0, 2, 0, 2]
                }
              );
            } else {
              ui.div(
                {
                  text: example[0],
                  padding: [0, 2, 0, 2],
                  width: maxWidth(examples, theWrap) + 4
                },
                {
                  text: example[1]
                }
              );
            }
          });
          ui.div();
        }
        if (epilog) {
          const e = epilog.replace(/\$0/g, base$0);
          ui.div(`${e}
`);
        }
        return ui.toString().replace(/\s*$/, "");
      };
      function maxWidth(table, theWrap, modifier) {
        let width = 0;
        if (!Array.isArray(table)) {
          table = Object.keys(table).map((key) => [table[key]]);
        }
        table.forEach((v) => {
          width = Math.max(
            stringWidth(modifier ? `${modifier} ${v[0]}` : v[0]),
            width
          );
        });
        if (theWrap)
          width = Math.min(width, parseInt(theWrap * 0.5, 10));
        return width;
      }
      function normalizeAliases() {
        const demandedOptions = yargs2.getDemandedOptions();
        const options = yargs2.getOptions();
        (Object.keys(options.alias) || []).forEach((key) => {
          options.alias[key].forEach((alias) => {
            if (descriptions[alias])
              self2.describe(key, descriptions[alias]);
            if (alias in demandedOptions)
              yargs2.demandOption(key, demandedOptions[alias]);
            if (~options.boolean.indexOf(alias))
              yargs2.boolean(key);
            if (~options.count.indexOf(alias))
              yargs2.count(key);
            if (~options.string.indexOf(alias))
              yargs2.string(key);
            if (~options.normalize.indexOf(alias))
              yargs2.normalize(key);
            if (~options.array.indexOf(alias))
              yargs2.array(key);
            if (~options.number.indexOf(alias))
              yargs2.number(key);
          });
        });
      }
      function addUngroupedKeys(keys, aliases, groups) {
        let groupedKeys = [];
        let toCheck = null;
        Object.keys(groups).forEach((group) => {
          groupedKeys = groupedKeys.concat(groups[group]);
        });
        keys.forEach((key) => {
          toCheck = [key].concat(aliases[key]);
          if (!toCheck.some((k) => groupedKeys.indexOf(k) !== -1)) {
            groups[defaultGroup].push(key);
          }
        });
        return groupedKeys;
      }
      function filterHiddenOptions(key) {
        return yargs2.getOptions().hiddenOptions.indexOf(key) < 0 || yargs2.parsed.argv[yargs2.getOptions().showHiddenOpt];
      }
      self2.showHelp = (level) => {
        const logger2 = yargs2._getLoggerInstance();
        if (!level)
          level = "error";
        const emit = typeof level === "function" ? level : logger2[level];
        emit(self2.help());
      };
      self2.functionDescription = (fn) => {
        const description = fn.name ? decamelize(fn.name, "-") : __("generated-value");
        return ["(", description, ")"].join("");
      };
      self2.stringifiedValues = function stringifiedValues(values, separator) {
        let string2 = "";
        const sep2 = separator || ", ";
        const array = [].concat(values);
        if (!values || !array.length)
          return string2;
        array.forEach((value) => {
          if (string2.length)
            string2 += sep2;
          string2 += JSON.stringify(value);
        });
        return string2;
      };
      function defaultString(value, defaultDescription) {
        let string2 = `[${__("default:")} `;
        if (value === void 0 && !defaultDescription)
          return null;
        if (defaultDescription) {
          string2 += defaultDescription;
        } else {
          switch (typeof value) {
            case "string":
              string2 += `"${value}"`;
              break;
            case "object":
              string2 += JSON.stringify(value);
              break;
            default:
              string2 += value;
          }
        }
        return `${string2}]`;
      }
      function windowWidth() {
        const maxWidth2 = 80;
        if (typeof process === "object" && process.stdout && process.stdout.columns) {
          return Math.min(maxWidth2, process.stdout.columns);
        } else {
          return maxWidth2;
        }
      }
      let version = null;
      self2.version = (ver) => {
        version = ver;
      };
      self2.showVersion = () => {
        const logger2 = yargs2._getLoggerInstance();
        logger2.log(version);
      };
      self2.reset = function reset(localLookup) {
        failMessage = null;
        failureOutput = false;
        usages = [];
        usageDisabled = false;
        epilog = void 0;
        examples = [];
        commands = [];
        descriptions = objFilter(descriptions, (k, v) => !localLookup[k]);
        return self2;
      };
      let frozen;
      self2.freeze = function freeze() {
        frozen = {};
        frozen.failMessage = failMessage;
        frozen.failureOutput = failureOutput;
        frozen.usages = usages;
        frozen.usageDisabled = usageDisabled;
        frozen.epilog = epilog;
        frozen.examples = examples;
        frozen.commands = commands;
        frozen.descriptions = descriptions;
      };
      self2.unfreeze = function unfreeze() {
        failMessage = frozen.failMessage;
        failureOutput = frozen.failureOutput;
        usages = frozen.usages;
        usageDisabled = frozen.usageDisabled;
        epilog = frozen.epilog;
        examples = frozen.examples;
        commands = frozen.commands;
        descriptions = frozen.descriptions;
        frozen = void 0;
      };
      return self2;
    };
  }
});

// node_modules/yargs/lib/levenshtein.js
var require_levenshtein = __commonJS({
  "node_modules/yargs/lib/levenshtein.js"(exports2, module2) {
    "use strict";
    module2.exports = function levenshtein(a, b) {
      if (a.length === 0)
        return b.length;
      if (b.length === 0)
        return a.length;
      const matrix = [];
      let i;
      for (i = 0; i <= b.length; i++) {
        matrix[i] = [i];
      }
      let j;
      for (j = 0; j <= a.length; j++) {
        matrix[0][j] = j;
      }
      for (i = 1; i <= b.length; i++) {
        for (j = 1; j <= a.length; j++) {
          if (b.charAt(i - 1) === a.charAt(j - 1)) {
            matrix[i][j] = matrix[i - 1][j - 1];
          } else {
            matrix[i][j] = Math.min(
              matrix[i - 1][j - 1] + 1,
              // substitution
              Math.min(
                matrix[i][j - 1] + 1,
                // insertion
                matrix[i - 1][j] + 1
              )
            );
          }
        }
      }
      return matrix[b.length][a.length];
    };
  }
});

// node_modules/yargs/lib/validation.js
var require_validation = __commonJS({
  "node_modules/yargs/lib/validation.js"(exports2, module2) {
    "use strict";
    var argsert = require_argsert();
    var objFilter = require_obj_filter();
    var specialKeys = ["$0", "--", "_"];
    module2.exports = function validation(yargs2, usage, y18n) {
      const __ = y18n.__;
      const __n = y18n.__n;
      const self2 = {};
      self2.nonOptionCount = function nonOptionCount(argv2) {
        const demandedCommands = yargs2.getDemandedCommands();
        const _s = argv2._.length - yargs2.getContext().commands.length;
        if (demandedCommands._ && (_s < demandedCommands._.min || _s > demandedCommands._.max)) {
          if (_s < demandedCommands._.min) {
            if (demandedCommands._.minMsg !== void 0) {
              usage.fail(
                // replace $0 with observed, $1 with expected.
                demandedCommands._.minMsg ? demandedCommands._.minMsg.replace(/\$0/g, _s).replace(/\$1/, demandedCommands._.min) : null
              );
            } else {
              usage.fail(
                __("Not enough non-option arguments: got %s, need at least %s", _s, demandedCommands._.min)
              );
            }
          } else if (_s > demandedCommands._.max) {
            if (demandedCommands._.maxMsg !== void 0) {
              usage.fail(
                // replace $0 with observed, $1 with expected.
                demandedCommands._.maxMsg ? demandedCommands._.maxMsg.replace(/\$0/g, _s).replace(/\$1/, demandedCommands._.max) : null
              );
            } else {
              usage.fail(
                __("Too many non-option arguments: got %s, maximum of %s", _s, demandedCommands._.max)
              );
            }
          }
        }
      };
      self2.positionalCount = function positionalCount(required, observed) {
        if (observed < required) {
          usage.fail(
            __("Not enough non-option arguments: got %s, need at least %s", observed, required)
          );
        }
      };
      self2.requiredArguments = function requiredArguments(argv2) {
        const demandedOptions = yargs2.getDemandedOptions();
        let missing = null;
        Object.keys(demandedOptions).forEach((key) => {
          if (!argv2.hasOwnProperty(key) || typeof argv2[key] === "undefined") {
            missing = missing || {};
            missing[key] = demandedOptions[key];
          }
        });
        if (missing) {
          const customMsgs = [];
          Object.keys(missing).forEach((key) => {
            const msg = missing[key];
            if (msg && customMsgs.indexOf(msg) < 0) {
              customMsgs.push(msg);
            }
          });
          const customMsg = customMsgs.length ? `
${customMsgs.join("\n")}` : "";
          usage.fail(__n(
            "Missing required argument: %s",
            "Missing required arguments: %s",
            Object.keys(missing).length,
            Object.keys(missing).join(", ") + customMsg
          ));
        }
      };
      self2.unknownArguments = function unknownArguments(argv2, aliases, positionalMap) {
        const commandKeys = yargs2.getCommandInstance().getCommands();
        const unknown = [];
        const currentContext = yargs2.getContext();
        Object.keys(argv2).forEach((key) => {
          if (specialKeys.indexOf(key) === -1 && !positionalMap.hasOwnProperty(key) && !yargs2._getParseContext().hasOwnProperty(key) && !aliases.hasOwnProperty(key)) {
            unknown.push(key);
          }
        });
        if (commandKeys.length > 0) {
          argv2._.slice(currentContext.commands.length).forEach((key) => {
            if (commandKeys.indexOf(key) === -1) {
              unknown.push(key);
            }
          });
        }
        if (unknown.length > 0) {
          usage.fail(__n(
            "Unknown argument: %s",
            "Unknown arguments: %s",
            unknown.length,
            unknown.join(", ")
          ));
        }
      };
      self2.limitedChoices = function limitedChoices(argv2) {
        const options = yargs2.getOptions();
        const invalid = {};
        if (!Object.keys(options.choices).length)
          return;
        Object.keys(argv2).forEach((key) => {
          if (specialKeys.indexOf(key) === -1 && options.choices.hasOwnProperty(key)) {
            [].concat(argv2[key]).forEach((value) => {
              if (options.choices[key].indexOf(value) === -1 && value !== void 0) {
                invalid[key] = (invalid[key] || []).concat(value);
              }
            });
          }
        });
        const invalidKeys = Object.keys(invalid);
        if (!invalidKeys.length)
          return;
        let msg = __("Invalid values:");
        invalidKeys.forEach((key) => {
          msg += `
  ${__(
            "Argument: %s, Given: %s, Choices: %s",
            key,
            usage.stringifiedValues(invalid[key]),
            usage.stringifiedValues(options.choices[key])
          )}`;
        });
        usage.fail(msg);
      };
      let checks = [];
      self2.check = function check(f, global2) {
        checks.push({
          func: f,
          global: global2
        });
      };
      self2.customChecks = function customChecks(argv2, aliases) {
        for (let i = 0, f; (f = checks[i]) !== void 0; i++) {
          const func = f.func;
          let result = null;
          try {
            result = func(argv2, aliases);
          } catch (err) {
            usage.fail(err.message ? err.message : err, err);
            continue;
          }
          if (!result) {
            usage.fail(__("Argument check failed: %s", func.toString()));
          } else if (typeof result === "string" || result instanceof Error) {
            usage.fail(result.toString(), result);
          }
        }
      };
      let implied = {};
      self2.implies = function implies(key, value) {
        argsert("<string|object> [array|number|string]", [key, value], arguments.length);
        if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            self2.implies(k, key[k]);
          });
        } else {
          yargs2.global(key);
          if (!implied[key]) {
            implied[key] = [];
          }
          if (Array.isArray(value)) {
            value.forEach((i) => self2.implies(key, i));
          } else {
            implied[key].push(value);
          }
        }
      };
      self2.getImplied = function getImplied() {
        return implied;
      };
      self2.implications = function implications(argv2) {
        const implyFail = [];
        Object.keys(implied).forEach((key) => {
          const origKey = key;
          (implied[key] || []).forEach((value) => {
            let num;
            let key2 = origKey;
            const origValue = value;
            num = Number(key2);
            key2 = isNaN(num) ? key2 : num;
            if (typeof key2 === "number") {
              key2 = argv2._.length >= key2;
            } else if (key2.match(/^--no-.+/)) {
              key2 = key2.match(/^--no-(.+)/)[1];
              key2 = !argv2[key2];
            } else {
              key2 = argv2[key2];
            }
            num = Number(value);
            value = isNaN(num) ? value : num;
            if (typeof value === "number") {
              value = argv2._.length >= value;
            } else if (value.match(/^--no-.+/)) {
              value = value.match(/^--no-(.+)/)[1];
              value = !argv2[value];
            } else {
              value = argv2[value];
            }
            if (key2 && !value) {
              implyFail.push(` ${origKey} -> ${origValue}`);
            }
          });
        });
        if (implyFail.length) {
          let msg = `${__("Implications failed:")}
`;
          implyFail.forEach((value) => {
            msg += value;
          });
          usage.fail(msg);
        }
      };
      let conflicting = {};
      self2.conflicts = function conflicts(key, value) {
        argsert("<string|object> [array|string]", [key, value], arguments.length);
        if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            self2.conflicts(k, key[k]);
          });
        } else {
          yargs2.global(key);
          if (!conflicting[key]) {
            conflicting[key] = [];
          }
          if (Array.isArray(value)) {
            value.forEach((i) => self2.conflicts(key, i));
          } else {
            conflicting[key].push(value);
          }
        }
      };
      self2.getConflicting = () => conflicting;
      self2.conflicting = function conflictingFn(argv2) {
        Object.keys(argv2).forEach((key) => {
          if (conflicting[key]) {
            conflicting[key].forEach((value) => {
              if (value && argv2[key] !== void 0 && argv2[value] !== void 0) {
                usage.fail(__("Arguments %s and %s are mutually exclusive", key, value));
              }
            });
          }
        });
      };
      self2.recommendCommands = function recommendCommands(cmd, potentialCommands) {
        const distance = require_levenshtein();
        const threshold = 3;
        potentialCommands = potentialCommands.sort((a, b) => b.length - a.length);
        let recommended = null;
        let bestDistance = Infinity;
        for (let i = 0, candidate; (candidate = potentialCommands[i]) !== void 0; i++) {
          const d = distance(cmd, candidate);
          if (d <= threshold && d < bestDistance) {
            bestDistance = d;
            recommended = candidate;
          }
        }
        if (recommended)
          usage.fail(__("Did you mean %s?", recommended));
      };
      self2.reset = function reset(localLookup) {
        implied = objFilter(implied, (k, v) => !localLookup[k]);
        conflicting = objFilter(conflicting, (k, v) => !localLookup[k]);
        checks = checks.filter((c) => c.global);
        return self2;
      };
      let frozen;
      self2.freeze = function freeze() {
        frozen = {};
        frozen.implied = implied;
        frozen.checks = checks;
        frozen.conflicting = conflicting;
      };
      self2.unfreeze = function unfreeze() {
        implied = frozen.implied;
        checks = frozen.checks;
        conflicting = frozen.conflicting;
        frozen = void 0;
      };
      return self2;
    };
  }
});

// node_modules/y18n/index.js
var require_y18n = __commonJS({
  "node_modules/y18n/index.js"(exports2, module2) {
    var fs6 = require("fs");
    var path4 = require("path");
    var util = require("util");
    function Y18N(opts) {
      opts = opts || {};
      this.directory = opts.directory || "./locales";
      this.updateFiles = typeof opts.updateFiles === "boolean" ? opts.updateFiles : true;
      this.locale = opts.locale || "en";
      this.fallbackToLanguage = typeof opts.fallbackToLanguage === "boolean" ? opts.fallbackToLanguage : true;
      this.cache = /* @__PURE__ */ Object.create(null);
      this.writeQueue = [];
    }
    Y18N.prototype.__ = function() {
      if (typeof arguments[0] !== "string") {
        return this._taggedLiteral.apply(this, arguments);
      }
      var args = Array.prototype.slice.call(arguments);
      var str = args.shift();
      var cb = function() {
      };
      if (typeof args[args.length - 1] === "function")
        cb = args.pop();
      cb = cb || function() {
      };
      if (!this.cache[this.locale])
        this._readLocaleFile();
      if (!this.cache[this.locale][str] && this.updateFiles) {
        this.cache[this.locale][str] = str;
        this._enqueueWrite([this.directory, this.locale, cb]);
      } else {
        cb();
      }
      return util.format.apply(util, [this.cache[this.locale][str] || str].concat(args));
    };
    Y18N.prototype._taggedLiteral = function(parts) {
      var args = arguments;
      var str = "";
      parts.forEach(function(part, i) {
        var arg = args[i + 1];
        str += part;
        if (typeof arg !== "undefined") {
          str += "%s";
        }
      });
      return this.__.apply(null, [str].concat([].slice.call(arguments, 1)));
    };
    Y18N.prototype._enqueueWrite = function(work) {
      this.writeQueue.push(work);
      if (this.writeQueue.length === 1)
        this._processWriteQueue();
    };
    Y18N.prototype._processWriteQueue = function() {
      var _this = this;
      var work = this.writeQueue[0];
      var directory = work[0];
      var locale = work[1];
      var cb = work[2];
      var languageFile = this._resolveLocaleFile(directory, locale);
      var serializedLocale = JSON.stringify(this.cache[locale], null, 2);
      fs6.writeFile(languageFile, serializedLocale, "utf-8", function(err) {
        _this.writeQueue.shift();
        if (_this.writeQueue.length > 0)
          _this._processWriteQueue();
        cb(err);
      });
    };
    Y18N.prototype._readLocaleFile = function() {
      var localeLookup = {};
      var languageFile = this._resolveLocaleFile(this.directory, this.locale);
      try {
        localeLookup = JSON.parse(fs6.readFileSync(languageFile, "utf-8"));
      } catch (err) {
        if (err instanceof SyntaxError) {
          err.message = "syntax error in " + languageFile;
        }
        if (err.code === "ENOENT")
          localeLookup = {};
        else
          throw err;
      }
      this.cache[this.locale] = localeLookup;
    };
    Y18N.prototype._resolveLocaleFile = function(directory, locale) {
      var file = path4.resolve(directory, "./", locale + ".json");
      if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf("_")) {
        var languageFile = path4.resolve(directory, "./", locale.split("_")[0] + ".json");
        if (this._fileExistsSync(languageFile))
          file = languageFile;
      }
      return file;
    };
    Y18N.prototype._fileExistsSync = function(file) {
      try {
        return fs6.statSync(file).isFile();
      } catch (err) {
        return false;
      }
    };
    Y18N.prototype.__n = function() {
      var args = Array.prototype.slice.call(arguments);
      var singular = args.shift();
      var plural = args.shift();
      var quantity = args.shift();
      var cb = function() {
      };
      if (typeof args[args.length - 1] === "function")
        cb = args.pop();
      if (!this.cache[this.locale])
        this._readLocaleFile();
      var str = quantity === 1 ? singular : plural;
      if (this.cache[this.locale][singular]) {
        str = this.cache[this.locale][singular][quantity === 1 ? "one" : "other"];
      }
      if (!this.cache[this.locale][singular] && this.updateFiles) {
        this.cache[this.locale][singular] = {
          one: singular,
          other: plural
        };
        this._enqueueWrite([this.directory, this.locale, cb]);
      } else {
        cb();
      }
      var values = [str];
      if (~str.indexOf("%d"))
        values.push(quantity);
      return util.format.apply(util, values.concat(args));
    };
    Y18N.prototype.setLocale = function(locale) {
      this.locale = locale;
    };
    Y18N.prototype.getLocale = function() {
      return this.locale;
    };
    Y18N.prototype.updateLocale = function(obj) {
      if (!this.cache[this.locale])
        this._readLocaleFile();
      for (var key in obj) {
        this.cache[this.locale][key] = obj[key];
      }
    };
    module2.exports = function(opts) {
      var y18n = new Y18N(opts);
      for (var key in y18n) {
        if (typeof y18n[key] === "function") {
          y18n[key] = y18n[key].bind(y18n);
        }
      }
      return y18n;
    };
  }
});

// node_modules/yargs/lib/apply-extends.js
var require_apply_extends = __commonJS({
  "node_modules/yargs/lib/apply-extends.js"(exports2, module2) {
    "use strict";
    var fs6 = require("fs");
    var path4 = require("path");
    var YError = require_yerror();
    var previouslyVisitedConfigs = [];
    function checkForCircularExtends(cfgPath) {
      if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {
        throw new YError(`Circular extended configurations: '${cfgPath}'.`);
      }
    }
    function getPathToDefaultConfig(cwd, pathToExtend) {
      return path4.resolve(cwd, pathToExtend);
    }
    function applyExtends(config2, cwd) {
      let defaultConfig = {};
      if (config2.hasOwnProperty("extends")) {
        if (typeof config2.extends !== "string")
          return defaultConfig;
        const isPath = /\.json|\..*rc$/.test(config2.extends);
        let pathToDefault = null;
        if (!isPath) {
          try {
            pathToDefault = require.resolve(config2.extends);
          } catch (err) {
          }
        } else {
          pathToDefault = getPathToDefaultConfig(cwd, config2.extends);
        }
        if (!pathToDefault && !isPath)
          return config2;
        checkForCircularExtends(pathToDefault);
        previouslyVisitedConfigs.push(pathToDefault);
        defaultConfig = isPath ? JSON.parse(fs6.readFileSync(pathToDefault, "utf8")) : require(config2.extends);
        delete config2.extends;
        defaultConfig = applyExtends(defaultConfig, path4.dirname(pathToDefault));
      }
      previouslyVisitedConfigs = [];
      return Object.assign({}, defaultConfig, config2);
    }
    module2.exports = applyExtends;
  }
});

// node_modules/get-caller-file/index.js
var require_get_caller_file = __commonJS({
  "node_modules/get-caller-file/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function getCallerFile(position) {
      if (position === void 0) {
        position = 2;
      }
      if (position >= Error.stackTraceLimit) {
        throw new TypeError("getCallerFile(position) requires position be less then Error.stackTraceLimit but position was: `" + position + "` and Error.stackTraceLimit was: `" + Error.stackTraceLimit + "`");
      }
      var oldPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = function(_, stack2) {
        return stack2;
      };
      var stack = new Error().stack;
      Error.prepareStackTrace = oldPrepareStackTrace;
      if (stack !== null && typeof stack === "object") {
        return stack[position] ? stack[position].getFileName() : void 0;
      }
    };
  }
});

// node_modules/locate-path/node_modules/path-exists/index.js
var require_path_exists = __commonJS({
  "node_modules/locate-path/node_modules/path-exists/index.js"(exports2, module2) {
    "use strict";
    var fs6 = require("fs");
    module2.exports = (fp) => new Promise((resolve3) => {
      fs6.access(fp, (err) => {
        resolve3(!err);
      });
    });
    module2.exports.sync = (fp) => {
      try {
        fs6.accessSync(fp);
        return true;
      } catch (err) {
        return false;
      }
    };
  }
});

// node_modules/p-try/index.js
var require_p_try = __commonJS({
  "node_modules/p-try/index.js"(exports2, module2) {
    "use strict";
    var pTry = (fn, ...arguments_) => new Promise((resolve3) => {
      resolve3(fn(...arguments_));
    });
    module2.exports = pTry;
    module2.exports.default = pTry;
  }
});

// node_modules/p-limit/index.js
var require_p_limit = __commonJS({
  "node_modules/p-limit/index.js"(exports2, module2) {
    "use strict";
    var pTry = require_p_try();
    var pLimit = (concurrency) => {
      if (concurrency < 1) {
        throw new TypeError("Expected `concurrency` to be a number from 1 and up");
      }
      const queue = [];
      let activeCount = 0;
      const next = () => {
        activeCount--;
        if (queue.length > 0) {
          queue.shift()();
        }
      };
      const run = (fn, resolve3, ...args) => {
        activeCount++;
        const result = pTry(fn, ...args);
        resolve3(result);
        result.then(next, next);
      };
      const enqueue = (fn, resolve3, ...args) => {
        if (activeCount < concurrency) {
          run(fn, resolve3, ...args);
        } else {
          queue.push(run.bind(null, fn, resolve3, ...args));
        }
      };
      const generator = (fn, ...args) => new Promise((resolve3) => enqueue(fn, resolve3, ...args));
      Object.defineProperties(generator, {
        activeCount: {
          get: () => activeCount
        },
        pendingCount: {
          get: () => queue.length
        }
      });
      return generator;
    };
    module2.exports = pLimit;
    module2.exports.default = pLimit;
  }
});

// node_modules/p-locate/index.js
var require_p_locate = __commonJS({
  "node_modules/p-locate/index.js"(exports2, module2) {
    "use strict";
    var pLimit = require_p_limit();
    var EndError = class extends Error {
      constructor(value) {
        super();
        this.value = value;
      }
    };
    var testElement = (el, tester) => Promise.resolve(el).then(tester);
    var finder = (el) => Promise.all(el).then((val) => val[1] === true && Promise.reject(new EndError(val[0])));
    module2.exports = (iterable, tester, opts) => {
      opts = Object.assign({
        concurrency: Infinity,
        preserveOrder: true
      }, opts);
      const limit = pLimit(opts.concurrency);
      const items = [...iterable].map((el) => [el, limit(testElement, el, tester)]);
      const checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);
      return Promise.all(items.map((el) => checkLimit(finder, el))).then(() => {
      }).catch((err) => err instanceof EndError ? err.value : Promise.reject(err));
    };
  }
});

// node_modules/locate-path/index.js
var require_locate_path = __commonJS({
  "node_modules/locate-path/index.js"(exports2, module2) {
    "use strict";
    var path4 = require("path");
    var pathExists = require_path_exists();
    var pLocate = require_p_locate();
    module2.exports = (iterable, options) => {
      options = Object.assign({
        cwd: process.cwd()
      }, options);
      return pLocate(iterable, (el) => pathExists(path4.resolve(options.cwd, el)), options);
    };
    module2.exports.sync = (iterable, options) => {
      options = Object.assign({
        cwd: process.cwd()
      }, options);
      for (const el of iterable) {
        if (pathExists.sync(path4.resolve(options.cwd, el))) {
          return el;
        }
      }
    };
  }
});

// node_modules/find-up/index.js
var require_find_up = __commonJS({
  "node_modules/find-up/index.js"(exports2, module2) {
    "use strict";
    var path4 = require("path");
    var locatePath = require_locate_path();
    module2.exports = (filename, opts = {}) => {
      const startDir = path4.resolve(opts.cwd || "");
      const { root } = path4.parse(startDir);
      const filenames = [].concat(filename);
      return new Promise((resolve3) => {
        (function find(dir) {
          locatePath(filenames, { cwd: dir }).then((file) => {
            if (file) {
              resolve3(path4.join(dir, file));
            } else if (dir === root) {
              resolve3(null);
            } else {
              find(path4.dirname(dir));
            }
          });
        })(startDir);
      });
    };
    module2.exports.sync = (filename, opts = {}) => {
      let dir = path4.resolve(opts.cwd || "");
      const { root } = path4.parse(dir);
      const filenames = [].concat(filename);
      while (true) {
        const file = locatePath.sync(filenames, { cwd: dir });
        if (file) {
          return path4.join(dir, file);
        }
        if (dir === root) {
          return null;
        }
        dir = path4.dirname(dir);
      }
    };
  }
});

// node_modules/require-main-filename/index.js
var require_require_main_filename = __commonJS({
  "node_modules/require-main-filename/index.js"(exports2, module2) {
    module2.exports = function(_require) {
      _require = _require || require;
      var main = _require.main;
      if (main && isIISNode(main))
        return handleIISNode(main);
      else
        return main ? main.filename : process.cwd();
    };
    function isIISNode(main) {
      return /\\iisnode\\/.test(main.filename);
    }
    function handleIISNode(main) {
      if (!main.children.length) {
        return main.filename;
      } else {
        return main.children[0].filename;
      }
    }
  }
});

// node_modules/yargs/yargs.js
var require_yargs = __commonJS({
  "node_modules/yargs/yargs.js"(exports2, module2) {
    "use strict";
    var argsert = require_argsert();
    var fs6 = require("fs");
    var Command2 = require_command();
    var Completion = require_completion();
    var Parser = require_yargs_parser();
    var path4 = require("path");
    var Usage = require_usage();
    var Validation = require_validation();
    var Y18n = require_y18n();
    var objFilter = require_obj_filter();
    var setBlocking = require_set_blocking();
    var applyExtends = require_apply_extends();
    var { globalMiddlewareFactory } = require_middleware();
    var YError = require_yerror();
    exports2 = module2.exports = Yargs;
    function Yargs(processArgs, cwd, parentRequire) {
      processArgs = processArgs || [];
      const self2 = {};
      let command2 = null;
      let completion = null;
      let groups = {};
      let globalMiddleware = [];
      let output = "";
      let preservedGroups = {};
      let usage = null;
      let validation = null;
      const y18n = Y18n({
        directory: path4.resolve(__dirname, "./locales"),
        updateFiles: false
      });
      self2.middleware = globalMiddlewareFactory(globalMiddleware, self2);
      if (!cwd)
        cwd = process.cwd();
      self2.scriptName = function scriptName(scriptName) {
        self2.$0 = scriptName;
        return self2;
      };
      if (/\b(node|iojs|electron)(\.exe)?$/.test(process.argv[0])) {
        self2.$0 = process.argv.slice(1, 2);
      } else {
        self2.$0 = process.argv.slice(0, 1);
      }
      self2.$0 = self2.$0.map((x, i) => {
        const b = rebase(cwd, x);
        return x.match(/^(\/|([a-zA-Z]:)?\\)/) && b.length < x.length ? b : x;
      }).join(" ").trim();
      if (process.env._ !== void 0 && process.argv[1] === process.env._) {
        self2.$0 = process.env._.replace(
          `${path4.dirname(process.execPath)}/`,
          ""
        );
      }
      const context = { resets: -1, commands: [], fullCommands: [], files: [] };
      self2.getContext = () => context;
      let options;
      self2.resetOptions = self2.reset = function resetOptions(aliases) {
        context.resets++;
        aliases = aliases || {};
        options = options || {};
        const tmpOptions = {};
        tmpOptions.local = options.local ? options.local : [];
        tmpOptions.configObjects = options.configObjects ? options.configObjects : [];
        const localLookup = {};
        tmpOptions.local.forEach((l) => {
          localLookup[l] = true;
          (aliases[l] || []).forEach((a) => {
            localLookup[a] = true;
          });
        });
        preservedGroups = Object.keys(groups).reduce((acc, groupName) => {
          const keys = groups[groupName].filter((key) => !(key in localLookup));
          if (keys.length > 0) {
            acc[groupName] = keys;
          }
          return acc;
        }, {});
        groups = {};
        const arrayOptions = [
          "array",
          "boolean",
          "string",
          "skipValidation",
          "count",
          "normalize",
          "number",
          "hiddenOptions"
        ];
        const objectOptions = [
          "narg",
          "key",
          "alias",
          "default",
          "defaultDescription",
          "config",
          "choices",
          "demandedOptions",
          "demandedCommands",
          "coerce"
        ];
        arrayOptions.forEach((k) => {
          tmpOptions[k] = (options[k] || []).filter((k2) => !localLookup[k2]);
        });
        objectOptions.forEach((k) => {
          tmpOptions[k] = objFilter(options[k], (k2, v) => !localLookup[k2]);
        });
        tmpOptions.envPrefix = options.envPrefix;
        options = tmpOptions;
        usage = usage ? usage.reset(localLookup) : Usage(self2, y18n);
        validation = validation ? validation.reset(localLookup) : Validation(self2, usage, y18n);
        command2 = command2 ? command2.reset() : Command2(self2, usage, validation, globalMiddleware);
        if (!completion)
          completion = Completion(self2, usage, command2);
        completionCommand = null;
        output = "";
        exitError = null;
        hasOutput = false;
        self2.parsed = false;
        return self2;
      };
      self2.resetOptions();
      let frozen;
      function freeze() {
        frozen = {};
        frozen.options = options;
        frozen.configObjects = options.configObjects.slice(0);
        frozen.exitProcess = exitProcess;
        frozen.groups = groups;
        usage.freeze();
        validation.freeze();
        command2.freeze();
        frozen.strict = strict;
        frozen.completionCommand = completionCommand;
        frozen.output = output;
        frozen.exitError = exitError;
        frozen.hasOutput = hasOutput;
        frozen.parsed = self2.parsed;
      }
      function unfreeze() {
        options = frozen.options;
        options.configObjects = frozen.configObjects;
        exitProcess = frozen.exitProcess;
        groups = frozen.groups;
        output = frozen.output;
        exitError = frozen.exitError;
        hasOutput = frozen.hasOutput;
        self2.parsed = frozen.parsed;
        usage.unfreeze();
        validation.unfreeze();
        command2.unfreeze();
        strict = frozen.strict;
        completionCommand = frozen.completionCommand;
        parseFn = null;
        parseContext = null;
        frozen = void 0;
      }
      self2.boolean = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("boolean", keys);
        return self2;
      };
      self2.array = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("array", keys);
        return self2;
      };
      self2.number = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("number", keys);
        return self2;
      };
      self2.normalize = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("normalize", keys);
        return self2;
      };
      self2.count = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("count", keys);
        return self2;
      };
      self2.string = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("string", keys);
        return self2;
      };
      self2.requiresArg = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintObject(self2.nargs, false, "narg", keys, 1);
        return self2;
      };
      self2.skipValidation = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("skipValidation", keys);
        return self2;
      };
      function populateParserHintArray(type, keys, value) {
        keys = [].concat(keys);
        keys.forEach((key) => {
          options[type].push(key);
        });
      }
      self2.nargs = function(key, value) {
        argsert("<string|object|array> [number]", [key, value], arguments.length);
        populateParserHintObject(self2.nargs, false, "narg", key, value);
        return self2;
      };
      self2.choices = function(key, value) {
        argsert("<object|string|array> [string|array]", [key, value], arguments.length);
        populateParserHintObject(self2.choices, true, "choices", key, value);
        return self2;
      };
      self2.alias = function(key, value) {
        argsert("<object|string|array> [string|array]", [key, value], arguments.length);
        populateParserHintObject(self2.alias, true, "alias", key, value);
        return self2;
      };
      self2.default = self2.defaults = function(key, value, defaultDescription) {
        argsert("<object|string|array> [*] [string]", [key, value, defaultDescription], arguments.length);
        if (defaultDescription)
          options.defaultDescription[key] = defaultDescription;
        if (typeof value === "function") {
          if (!options.defaultDescription[key])
            options.defaultDescription[key] = usage.functionDescription(value);
          value = value.call();
        }
        populateParserHintObject(self2.default, false, "default", key, value);
        return self2;
      };
      self2.describe = function(key, desc) {
        argsert("<object|string|array> [string]", [key, desc], arguments.length);
        populateParserHintObject(self2.describe, false, "key", key, true);
        usage.describe(key, desc);
        return self2;
      };
      self2.demandOption = function(keys, msg) {
        argsert("<object|string|array> [string]", [keys, msg], arguments.length);
        populateParserHintObject(self2.demandOption, false, "demandedOptions", keys, msg);
        return self2;
      };
      self2.coerce = function(keys, value) {
        argsert("<object|string|array> [function]", [keys, value], arguments.length);
        populateParserHintObject(self2.coerce, false, "coerce", keys, value);
        return self2;
      };
      function populateParserHintObject(builder, isArray, type, key, value) {
        if (Array.isArray(key)) {
          const temp = {};
          key.forEach((k) => {
            temp[k] = value;
          });
          builder(temp);
        } else if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            builder(k, key[k]);
          });
        } else {
          if (isArray) {
            options[type][key] = (options[type][key] || []).concat(value);
          } else {
            options[type][key] = value;
          }
        }
      }
      function deleteFromParserHintObject(optionKey) {
        Object.keys(options).forEach((hintKey) => {
          const hint = options[hintKey];
          if (Array.isArray(hint)) {
            if (~hint.indexOf(optionKey))
              hint.splice(hint.indexOf(optionKey), 1);
          } else if (typeof hint === "object") {
            delete hint[optionKey];
          }
        });
        delete usage.getDescriptions()[optionKey];
      }
      self2.config = function config2(key, msg, parseFn2) {
        argsert("[object|string] [string|function] [function]", [key, msg, parseFn2], arguments.length);
        if (typeof key === "object") {
          key = applyExtends(key, cwd);
          options.configObjects = (options.configObjects || []).concat(key);
          return self2;
        }
        if (typeof msg === "function") {
          parseFn2 = msg;
          msg = null;
        }
        key = key || "config";
        self2.describe(key, msg || usage.deferY18nLookup("Path to JSON config file"));
        (Array.isArray(key) ? key : [key]).forEach((k) => {
          options.config[k] = parseFn2 || true;
        });
        return self2;
      };
      self2.example = function(cmd, description) {
        argsert("<string> [string]", [cmd, description], arguments.length);
        usage.example(cmd, description);
        return self2;
      };
      self2.command = function(cmd, description, builder, handler, middlewares) {
        argsert("<string|array|object> [string|boolean] [function|object] [function] [array]", [cmd, description, builder, handler, middlewares], arguments.length);
        command2.addHandler(cmd, description, builder, handler, middlewares);
        return self2;
      };
      self2.commandDir = function(dir, opts) {
        argsert("<string> [object]", [dir, opts], arguments.length);
        const req = parentRequire || require;
        command2.addDirectory(dir, self2.getContext(), req, require_get_caller_file()(), opts);
        return self2;
      };
      self2.demand = self2.required = self2.require = function demand(keys, max, msg) {
        if (Array.isArray(max)) {
          max.forEach((key) => {
            self2.demandOption(key, msg);
          });
          max = Infinity;
        } else if (typeof max !== "number") {
          msg = max;
          max = Infinity;
        }
        if (typeof keys === "number") {
          self2.demandCommand(keys, max, msg, msg);
        } else if (Array.isArray(keys)) {
          keys.forEach((key) => {
            self2.demandOption(key, msg);
          });
        } else {
          if (typeof msg === "string") {
            self2.demandOption(keys, msg);
          } else if (msg === true || typeof msg === "undefined") {
            self2.demandOption(keys);
          }
        }
        return self2;
      };
      self2.demandCommand = function demandCommand(min, max, minMsg, maxMsg) {
        argsert("[number] [number|string] [string|null|undefined] [string|null|undefined]", [min, max, minMsg, maxMsg], arguments.length);
        if (typeof min === "undefined")
          min = 1;
        if (typeof max !== "number") {
          minMsg = max;
          max = Infinity;
        }
        self2.global("_", false);
        options.demandedCommands._ = {
          min,
          max,
          minMsg,
          maxMsg
        };
        return self2;
      };
      self2.getDemandedOptions = () => {
        argsert([], 0);
        return options.demandedOptions;
      };
      self2.getDemandedCommands = () => {
        argsert([], 0);
        return options.demandedCommands;
      };
      self2.implies = function(key, value) {
        argsert("<string|object> [number|string|array]", [key, value], arguments.length);
        validation.implies(key, value);
        return self2;
      };
      self2.conflicts = function(key1, key2) {
        argsert("<string|object> [string|array]", [key1, key2], arguments.length);
        validation.conflicts(key1, key2);
        return self2;
      };
      self2.usage = function(msg, description, builder, handler) {
        argsert("<string|null|undefined> [string|boolean] [function|object] [function]", [msg, description, builder, handler], arguments.length);
        if (description !== void 0) {
          if ((msg || "").match(/^\$0( |$)/)) {
            return self2.command(msg, description, builder, handler);
          } else {
            throw new YError(".usage() description must start with $0 if being used as alias for .command()");
          }
        } else {
          usage.usage(msg);
          return self2;
        }
      };
      self2.epilogue = self2.epilog = function(msg) {
        argsert("<string>", [msg], arguments.length);
        usage.epilog(msg);
        return self2;
      };
      self2.fail = function(f) {
        argsert("<function>", [f], arguments.length);
        usage.failFn(f);
        return self2;
      };
      self2.check = function(f, _global) {
        argsert("<function> [boolean]", [f, _global], arguments.length);
        validation.check(f, _global !== false);
        return self2;
      };
      self2.global = function global2(globals, global2) {
        argsert("<string|array> [boolean]", [globals, global2], arguments.length);
        globals = [].concat(globals);
        if (global2 !== false) {
          options.local = options.local.filter((l) => globals.indexOf(l) === -1);
        } else {
          globals.forEach((g) => {
            if (options.local.indexOf(g) === -1)
              options.local.push(g);
          });
        }
        return self2;
      };
      self2.pkgConf = function pkgConf(key, rootPath) {
        argsert("<string> [string]", [key, rootPath], arguments.length);
        let conf = null;
        const obj = pkgUp(rootPath || cwd);
        if (obj[key] && typeof obj[key] === "object") {
          conf = applyExtends(obj[key], rootPath || cwd);
          options.configObjects = (options.configObjects || []).concat(conf);
        }
        return self2;
      };
      const pkgs = {};
      function pkgUp(rootPath) {
        const npath = rootPath || "*";
        if (pkgs[npath])
          return pkgs[npath];
        const findUp = require_find_up();
        let obj = {};
        try {
          let startDir = rootPath || require_require_main_filename()(parentRequire || require);
          if (!rootPath && path4.extname(startDir)) {
            startDir = path4.dirname(startDir);
          }
          const pkgJsonPath = findUp.sync("package.json", {
            cwd: startDir
          });
          obj = JSON.parse(fs6.readFileSync(pkgJsonPath));
        } catch (noop) {
        }
        pkgs[npath] = obj || {};
        return pkgs[npath];
      }
      let parseFn = null;
      let parseContext = null;
      self2.parse = function parse(args, shortCircuit, _parseFn) {
        argsert("[string|array] [function|boolean|object] [function]", [args, shortCircuit, _parseFn], arguments.length);
        if (typeof args === "undefined") {
          return self2._parseArgs(processArgs);
        }
        if (typeof shortCircuit === "object") {
          parseContext = shortCircuit;
          shortCircuit = _parseFn;
        }
        if (typeof shortCircuit === "function") {
          parseFn = shortCircuit;
          shortCircuit = null;
        }
        if (!shortCircuit)
          processArgs = args;
        freeze();
        if (parseFn)
          exitProcess = false;
        const parsed = self2._parseArgs(args, shortCircuit);
        if (parseFn)
          parseFn(exitError, parsed, output);
        unfreeze();
        return parsed;
      };
      self2._getParseContext = () => parseContext || {};
      self2._hasParseCallback = () => !!parseFn;
      self2.option = self2.options = function option(key, opt) {
        argsert("<string|object> [object]", [key, opt], arguments.length);
        if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            self2.options(k, key[k]);
          });
        } else {
          if (typeof opt !== "object") {
            opt = {};
          }
          options.key[key] = true;
          if (opt.alias)
            self2.alias(key, opt.alias);
          const demand = opt.demand || opt.required || opt.require;
          if (demand) {
            self2.demand(key, demand);
          }
          if (opt.demandOption) {
            self2.demandOption(key, typeof opt.demandOption === "string" ? opt.demandOption : void 0);
          }
          if ("conflicts" in opt) {
            self2.conflicts(key, opt.conflicts);
          }
          if ("default" in opt) {
            self2.default(key, opt.default);
          }
          if ("implies" in opt) {
            self2.implies(key, opt.implies);
          }
          if ("nargs" in opt) {
            self2.nargs(key, opt.nargs);
          }
          if (opt.config) {
            self2.config(key, opt.configParser);
          }
          if (opt.normalize) {
            self2.normalize(key);
          }
          if ("choices" in opt) {
            self2.choices(key, opt.choices);
          }
          if ("coerce" in opt) {
            self2.coerce(key, opt.coerce);
          }
          if ("group" in opt) {
            self2.group(key, opt.group);
          }
          if (opt.boolean || opt.type === "boolean") {
            self2.boolean(key);
            if (opt.alias)
              self2.boolean(opt.alias);
          }
          if (opt.array || opt.type === "array") {
            self2.array(key);
            if (opt.alias)
              self2.array(opt.alias);
          }
          if (opt.number || opt.type === "number") {
            self2.number(key);
            if (opt.alias)
              self2.number(opt.alias);
          }
          if (opt.string || opt.type === "string") {
            self2.string(key);
            if (opt.alias)
              self2.string(opt.alias);
          }
          if (opt.count || opt.type === "count") {
            self2.count(key);
          }
          if (typeof opt.global === "boolean") {
            self2.global(key, opt.global);
          }
          if (opt.defaultDescription) {
            options.defaultDescription[key] = opt.defaultDescription;
          }
          if (opt.skipValidation) {
            self2.skipValidation(key);
          }
          const desc = opt.describe || opt.description || opt.desc;
          self2.describe(key, desc);
          if (opt.hidden) {
            self2.hide(key);
          }
          if (opt.requiresArg) {
            self2.requiresArg(key);
          }
        }
        return self2;
      };
      self2.getOptions = () => options;
      self2.positional = function(key, opts) {
        argsert("<string> <object>", [key, opts], arguments.length);
        if (context.resets === 0) {
          throw new YError(".positional() can only be called in a command's builder function");
        }
        const supportedOpts = [
          "default",
          "defaultDescription",
          "implies",
          "normalize",
          "choices",
          "conflicts",
          "coerce",
          "type",
          "describe",
          "desc",
          "description",
          "alias"
        ];
        opts = objFilter(opts, (k, v) => {
          let accept = supportedOpts.indexOf(k) !== -1;
          if (k === "type" && ["string", "number", "boolean"].indexOf(v) === -1)
            accept = false;
          return accept;
        });
        const fullCommand = context.fullCommands[context.fullCommands.length - 1];
        const parseOptions = fullCommand ? command2.cmdToParseOptions(fullCommand) : {
          array: [],
          alias: {},
          default: {},
          demand: {}
        };
        Object.keys(parseOptions).forEach((pk) => {
          if (Array.isArray(parseOptions[pk])) {
            if (parseOptions[pk].indexOf(key) !== -1)
              opts[pk] = true;
          } else {
            if (parseOptions[pk][key] && !(pk in opts))
              opts[pk] = parseOptions[pk][key];
          }
        });
        self2.group(key, usage.getPositionalGroupName());
        return self2.option(key, opts);
      };
      self2.group = function group(opts, groupName) {
        argsert("<string|array> <string>", [opts, groupName], arguments.length);
        const existing = preservedGroups[groupName] || groups[groupName];
        if (preservedGroups[groupName]) {
          delete preservedGroups[groupName];
        }
        const seen = {};
        groups[groupName] = (existing || []).concat(opts).filter((key) => {
          if (seen[key])
            return false;
          return seen[key] = true;
        });
        return self2;
      };
      self2.getGroups = () => Object.assign({}, groups, preservedGroups);
      self2.env = function(prefix) {
        argsert("[string|boolean]", [prefix], arguments.length);
        if (prefix === false)
          options.envPrefix = void 0;
        else
          options.envPrefix = prefix || "";
        return self2;
      };
      self2.wrap = function(cols) {
        argsert("<number|null|undefined>", [cols], arguments.length);
        usage.wrap(cols);
        return self2;
      };
      let strict = false;
      self2.strict = function(enabled) {
        argsert("[boolean]", [enabled], arguments.length);
        strict = enabled !== false;
        return self2;
      };
      self2.getStrict = () => strict;
      let parserConfig = {};
      self2.parserConfiguration = function parserConfiguration(config2) {
        argsert("<object>", [config2], arguments.length);
        parserConfig = config2;
        return self2;
      };
      self2.getParserConfiguration = () => parserConfig;
      self2.showHelp = function(level) {
        argsert("[string|function]", [level], arguments.length);
        if (!self2.parsed)
          self2._parseArgs(processArgs);
        if (command2.hasDefaultCommand()) {
          context.resets++;
          command2.runDefaultBuilderOn(self2, true);
        }
        usage.showHelp(level);
        return self2;
      };
      let versionOpt = null;
      self2.version = function version(opt, msg, ver) {
        const defaultVersionOpt = "version";
        argsert("[boolean|string] [string] [string]", [opt, msg, ver], arguments.length);
        if (versionOpt) {
          deleteFromParserHintObject(versionOpt);
          usage.version(void 0);
          versionOpt = null;
        }
        if (arguments.length === 0) {
          ver = guessVersion();
          opt = defaultVersionOpt;
        } else if (arguments.length === 1) {
          if (opt === false) {
            return self2;
          }
          ver = opt;
          opt = defaultVersionOpt;
        } else if (arguments.length === 2) {
          ver = msg;
          msg = null;
        }
        versionOpt = typeof opt === "string" ? opt : defaultVersionOpt;
        msg = msg || usage.deferY18nLookup("Show version number");
        usage.version(ver || void 0);
        self2.boolean(versionOpt);
        self2.describe(versionOpt, msg);
        return self2;
      };
      function guessVersion() {
        const obj = pkgUp();
        return obj.version || "unknown";
      }
      let helpOpt = null;
      self2.addHelpOpt = self2.help = function addHelpOpt(opt, msg) {
        const defaultHelpOpt = "help";
        argsert("[string|boolean] [string]", [opt, msg], arguments.length);
        if (helpOpt) {
          deleteFromParserHintObject(helpOpt);
          helpOpt = null;
        }
        if (arguments.length === 1) {
          if (opt === false)
            return self2;
        }
        helpOpt = typeof opt === "string" ? opt : defaultHelpOpt;
        self2.boolean(helpOpt);
        self2.describe(helpOpt, msg || usage.deferY18nLookup("Show help"));
        return self2;
      };
      const defaultShowHiddenOpt = "show-hidden";
      options.showHiddenOpt = defaultShowHiddenOpt;
      self2.addShowHiddenOpt = self2.showHidden = function addShowHiddenOpt(opt, msg) {
        argsert("[string|boolean] [string]", [opt, msg], arguments.length);
        if (arguments.length === 1) {
          if (opt === false)
            return self2;
        }
        const showHiddenOpt = typeof opt === "string" ? opt : defaultShowHiddenOpt;
        self2.boolean(showHiddenOpt);
        self2.describe(showHiddenOpt, msg || usage.deferY18nLookup("Show hidden options"));
        options.showHiddenOpt = showHiddenOpt;
        return self2;
      };
      self2.hide = function hide(key) {
        argsert("<string|object>", [key], arguments.length);
        options.hiddenOptions.push(key);
        return self2;
      };
      self2.showHelpOnFail = function showHelpOnFail(enabled, message) {
        argsert("[boolean|string] [string]", [enabled, message], arguments.length);
        usage.showHelpOnFail(enabled, message);
        return self2;
      };
      var exitProcess = true;
      self2.exitProcess = function(enabled) {
        argsert("[boolean]", [enabled], arguments.length);
        if (typeof enabled !== "boolean") {
          enabled = true;
        }
        exitProcess = enabled;
        return self2;
      };
      self2.getExitProcess = () => exitProcess;
      var completionCommand = null;
      self2.completion = function(cmd, desc, fn) {
        argsert("[string] [string|boolean|function] [function]", [cmd, desc, fn], arguments.length);
        if (typeof desc === "function") {
          fn = desc;
          desc = null;
        }
        completionCommand = cmd || "completion";
        if (!desc && desc !== false) {
          desc = "generate completion script";
        }
        self2.command(completionCommand, desc);
        if (fn)
          completion.registerFunction(fn);
        return self2;
      };
      self2.showCompletionScript = function($0) {
        argsert("[string]", [$0], arguments.length);
        $0 = $0 || self2.$0;
        _logger.log(completion.generateCompletionScript($0, completionCommand));
        return self2;
      };
      self2.getCompletion = function(args, done) {
        argsert("<array> <function>", [args, done], arguments.length);
        completion.getCompletion(args, done);
      };
      self2.locale = function(locale) {
        argsert("[string]", [locale], arguments.length);
        if (arguments.length === 0) {
          guessLocale();
          return y18n.getLocale();
        }
        detectLocale = false;
        y18n.setLocale(locale);
        return self2;
      };
      self2.updateStrings = self2.updateLocale = function(obj) {
        argsert("<object>", [obj], arguments.length);
        detectLocale = false;
        y18n.updateLocale(obj);
        return self2;
      };
      let detectLocale = true;
      self2.detectLocale = function(detect) {
        argsert("<boolean>", [detect], arguments.length);
        detectLocale = detect;
        return self2;
      };
      self2.getDetectLocale = () => detectLocale;
      var hasOutput = false;
      var exitError = null;
      self2.exit = (code, err) => {
        hasOutput = true;
        exitError = err;
        if (exitProcess)
          process.exit(code);
      };
      const _logger = {
        log() {
          const args = [];
          for (let i = 0; i < arguments.length; i++)
            args.push(arguments[i]);
          if (!self2._hasParseCallback())
            console.log.apply(console, args);
          hasOutput = true;
          if (output.length)
            output += "\n";
          output += args.join(" ");
        },
        error() {
          const args = [];
          for (let i = 0; i < arguments.length; i++)
            args.push(arguments[i]);
          if (!self2._hasParseCallback())
            console.error.apply(console, args);
          hasOutput = true;
          if (output.length)
            output += "\n";
          output += args.join(" ");
        }
      };
      self2._getLoggerInstance = () => _logger;
      self2._hasOutput = () => hasOutput;
      self2._setHasOutput = () => {
        hasOutput = true;
      };
      let recommendCommands;
      self2.recommendCommands = function(recommend) {
        argsert("[boolean]", [recommend], arguments.length);
        recommendCommands = typeof recommend === "boolean" ? recommend : true;
        return self2;
      };
      self2.getUsageInstance = () => usage;
      self2.getValidationInstance = () => validation;
      self2.getCommandInstance = () => command2;
      self2.terminalWidth = () => {
        argsert([], 0);
        return typeof process.stdout.columns !== "undefined" ? process.stdout.columns : null;
      };
      Object.defineProperty(self2, "argv", {
        get: () => self2._parseArgs(processArgs),
        enumerable: true
      });
      self2._parseArgs = function parseArgs(args, shortCircuit, _skipValidation, commandIndex) {
        let skipValidation = !!_skipValidation;
        args = args || processArgs;
        options.__ = y18n.__;
        options.configuration = self2.getParserConfiguration();
        let pkgConfig = pkgUp()["yargs"];
        if (pkgConfig) {
          console.warn("Configuring yargs through package.json is deprecated and will be removed in the next major release, please use the JS API instead.");
          options.configuration = Object.assign({}, pkgConfig, options.configuration);
        }
        const parsed = Parser.detailed(args, options);
        let argv2 = parsed.argv;
        if (parseContext)
          argv2 = Object.assign({}, argv2, parseContext);
        const aliases = parsed.aliases;
        argv2.$0 = self2.$0;
        self2.parsed = parsed;
        try {
          guessLocale();
          if (shortCircuit) {
            return argv2;
          }
          if (helpOpt) {
            const helpCmds = [helpOpt].concat(aliases[helpOpt] || []).filter((k) => k.length > 1);
            if (~helpCmds.indexOf(argv2._[argv2._.length - 1])) {
              argv2._.pop();
              argv2[helpOpt] = true;
            }
          }
          const handlerKeys = command2.getCommands();
          const requestCompletions = completion.completionKey in argv2;
          const skipRecommendation = argv2[helpOpt] || requestCompletions;
          const skipDefaultCommand = skipRecommendation && (handlerKeys.length > 1 || handlerKeys[0] !== "$0");
          if (argv2._.length) {
            if (handlerKeys.length) {
              let firstUnknownCommand;
              for (let i = commandIndex || 0, cmd; argv2._[i] !== void 0; i++) {
                cmd = String(argv2._[i]);
                if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {
                  return command2.runCommand(cmd, self2, parsed, i + 1);
                } else if (!firstUnknownCommand && cmd !== completionCommand) {
                  firstUnknownCommand = cmd;
                  break;
                }
              }
              if (command2.hasDefaultCommand() && !skipDefaultCommand) {
                return command2.runCommand(null, self2, parsed);
              }
              if (recommendCommands && firstUnknownCommand && !skipRecommendation) {
                validation.recommendCommands(firstUnknownCommand, handlerKeys);
              }
            }
            if (completionCommand && ~argv2._.indexOf(completionCommand) && !requestCompletions) {
              if (exitProcess)
                setBlocking(true);
              self2.showCompletionScript();
              self2.exit(0);
            }
          } else if (command2.hasDefaultCommand() && !skipDefaultCommand) {
            return command2.runCommand(null, self2, parsed);
          }
          if (requestCompletions) {
            if (exitProcess)
              setBlocking(true);
            const completionArgs = args.slice(args.indexOf(`--${completion.completionKey}`) + 1);
            completion.getCompletion(completionArgs, (completions) => {
              ;
              (completions || []).forEach((completion2) => {
                _logger.log(completion2);
              });
              self2.exit(0);
            });
            return argv2;
          }
          if (!hasOutput) {
            Object.keys(argv2).forEach((key) => {
              if (key === helpOpt && argv2[key]) {
                if (exitProcess)
                  setBlocking(true);
                skipValidation = true;
                self2.showHelp("log");
                self2.exit(0);
              } else if (key === versionOpt && argv2[key]) {
                if (exitProcess)
                  setBlocking(true);
                skipValidation = true;
                usage.showVersion();
                self2.exit(0);
              }
            });
          }
          if (!skipValidation && options.skipValidation.length > 0) {
            skipValidation = Object.keys(argv2).some((key) => options.skipValidation.indexOf(key) >= 0 && argv2[key] === true);
          }
          if (!skipValidation) {
            if (parsed.error)
              throw new YError(parsed.error.message);
            if (!requestCompletions) {
              self2._runValidation(argv2, aliases, {}, parsed.error);
            }
          }
        } catch (err) {
          if (err instanceof YError)
            usage.fail(err.message, err);
          else
            throw err;
        }
        return argv2;
      };
      self2._runValidation = function runValidation(argv2, aliases, positionalMap, parseErrors) {
        if (parseErrors)
          throw new YError(parseErrors.message || parseErrors);
        validation.nonOptionCount(argv2);
        validation.requiredArguments(argv2);
        if (strict)
          validation.unknownArguments(argv2, aliases, positionalMap);
        validation.customChecks(argv2, aliases);
        validation.limitedChoices(argv2);
        validation.implications(argv2);
        validation.conflicting(argv2);
      };
      function guessLocale() {
        if (!detectLocale)
          return;
        try {
          const { env: env2 } = process;
          const locale = env2.LC_ALL || env2.LC_MESSAGES || env2.LANG || env2.LANGUAGE || "en_US";
          self2.locale(locale.replace(/[.:].*/, ""));
        } catch (err) {
        }
      }
      self2.help();
      self2.version();
      return self2;
    }
    exports2.rebase = rebase;
    function rebase(base, dir) {
      return path4.relative(base, dir);
    }
  }
});

// node_modules/yargs/index.js
var require_yargs2 = __commonJS({
  "node_modules/yargs/index.js"(exports2, module2) {
    "use strict";
    var yargs2 = require_yargs();
    Argv(process.argv.slice(2));
    module2.exports = Argv;
    function Argv(processArgs, cwd) {
      const argv2 = yargs2(processArgs, cwd, require);
      singletonify(argv2);
      return argv2;
    }
    function singletonify(inst) {
      Object.keys(inst).forEach((key) => {
        if (key === "argv") {
          Argv.__defineGetter__(key, inst.__lookupGetter__(key));
        } else {
          Argv[key] = typeof inst[key] === "function" ? inst[key].bind(inst) : inst[key];
        }
      });
    }
  }
});

// node_modules/safe-json-stringify/index.js
var require_safe_json_stringify = __commonJS({
  "node_modules/safe-json-stringify/index.js"(exports2, module2) {
    var hasProp = Object.prototype.hasOwnProperty;
    function throwsMessage(err) {
      return "[Throws: " + (err ? err.message : "?") + "]";
    }
    function safeGetValueFromPropertyOnObject(obj, property) {
      if (hasProp.call(obj, property)) {
        try {
          return obj[property];
        } catch (err) {
          return throwsMessage(err);
        }
      }
      return obj[property];
    }
    function ensureProperties(obj) {
      var seen = [];
      function visit(obj2) {
        if (obj2 === null || typeof obj2 !== "object") {
          return obj2;
        }
        if (seen.indexOf(obj2) !== -1) {
          return "[Circular]";
        }
        seen.push(obj2);
        if (typeof obj2.toJSON === "function") {
          try {
            var fResult = visit(obj2.toJSON());
            seen.pop();
            return fResult;
          } catch (err) {
            return throwsMessage(err);
          }
        }
        if (Array.isArray(obj2)) {
          var aResult = obj2.map(visit);
          seen.pop();
          return aResult;
        }
        var result = Object.keys(obj2).reduce(function(result2, prop) {
          result2[prop] = visit(safeGetValueFromPropertyOnObject(obj2, prop));
          return result2;
        }, {});
        seen.pop();
        return result;
      }
      ;
      return visit(obj);
    }
    module2.exports = function(data, replacer, space) {
      return JSON.stringify(ensureProperties(data), replacer, space);
    };
    module2.exports.ensureProperties = ensureProperties;
  }
});

// node_modules/ncp/lib/ncp.js
var require_ncp = __commonJS({
  "node_modules/ncp/lib/ncp.js"(exports2, module2) {
    var fs6 = require("fs");
    var path4 = require("path");
    module2.exports = ncp;
    ncp.ncp = ncp;
    function ncp(source, dest, options, callback) {
      var cback = callback;
      if (!callback) {
        cback = options;
        options = {};
      }
      var basePath = process.cwd(), currentPath = path4.resolve(basePath, source), targetPath = path4.resolve(basePath, dest), filter2 = options.filter, rename = options.rename, transform = options.transform, clobber = options.clobber !== false, modified = options.modified, dereference = options.dereference, errs = null, started = 0, finished = 0, running = 0, limit = options.limit || ncp.limit || 16;
      limit = limit < 1 ? 1 : limit > 512 ? 512 : limit;
      startCopy(currentPath);
      function startCopy(source2) {
        started++;
        if (filter2) {
          if (filter2 instanceof RegExp) {
            if (!filter2.test(source2)) {
              return cb(true);
            }
          } else if (typeof filter2 === "function") {
            if (!filter2(source2)) {
              return cb(true);
            }
          }
        }
        return getStats(source2);
      }
      function getStats(source2) {
        var stat = dereference ? fs6.stat : fs6.lstat;
        if (running >= limit) {
          return setImmediate(function() {
            getStats(source2);
          });
        }
        running++;
        stat(source2, function(err, stats) {
          var item = {};
          if (err) {
            return onError(err);
          }
          item.name = source2;
          item.mode = stats.mode;
          item.mtime = stats.mtime;
          item.atime = stats.atime;
          if (stats.isDirectory()) {
            return onDir(item);
          } else if (stats.isFile()) {
            return onFile(item);
          } else if (stats.isSymbolicLink()) {
            return onLink(source2);
          }
        });
      }
      function onFile(file) {
        var target = file.name.replace(currentPath, targetPath);
        if (rename) {
          target = rename(target);
        }
        isWritable2(target, function(writable) {
          if (writable) {
            return copyFile(file, target);
          }
          if (clobber) {
            rmFile(target, function() {
              copyFile(file, target);
            });
          }
          if (modified) {
            var stat = dereference ? fs6.stat : fs6.lstat;
            stat(target, function(err, stats) {
              if (file.mtime.getTime() > stats.mtime.getTime())
                copyFile(file, target);
              else
                return cb();
            });
          } else {
            return cb();
          }
        });
      }
      function copyFile(file, target) {
        var readStream = fs6.createReadStream(file.name), writeStream = fs6.createWriteStream(target, { mode: file.mode });
        readStream.on("error", onError);
        writeStream.on("error", onError);
        if (transform) {
          transform(readStream, writeStream, file);
        } else {
          writeStream.on("open", function() {
            readStream.pipe(writeStream);
          });
        }
        writeStream.once("finish", function() {
          if (modified) {
            fs6.utimesSync(target, file.atime, file.mtime);
            cb();
          } else
            cb();
        });
      }
      function rmFile(file, done) {
        fs6.unlink(file, function(err) {
          if (err) {
            return onError(err);
          }
          return done();
        });
      }
      function onDir(dir) {
        var target = dir.name.replace(currentPath, targetPath);
        isWritable2(target, function(writable) {
          if (writable) {
            return mkDir(dir, target);
          }
          copyDir(dir.name);
        });
      }
      function mkDir(dir, target) {
        fs6.mkdir(target, dir.mode, function(err) {
          if (err) {
            return onError(err);
          }
          copyDir(dir.name);
        });
      }
      function copyDir(dir) {
        fs6.readdir(dir, function(err, items) {
          if (err) {
            return onError(err);
          }
          items.forEach(function(item) {
            startCopy(path4.join(dir, item));
          });
          return cb();
        });
      }
      function onLink(link) {
        var target = link.replace(currentPath, targetPath);
        fs6.readlink(link, function(err, resolvedPath) {
          if (err) {
            return onError(err);
          }
          checkLink(resolvedPath, target);
        });
      }
      function checkLink(resolvedPath, target) {
        if (dereference) {
          resolvedPath = path4.resolve(basePath, resolvedPath);
        }
        isWritable2(target, function(writable) {
          if (writable) {
            return makeLink(resolvedPath, target);
          }
          fs6.readlink(target, function(err, targetDest) {
            if (err) {
              return onError(err);
            }
            if (dereference) {
              targetDest = path4.resolve(basePath, targetDest);
            }
            if (targetDest === resolvedPath) {
              return cb();
            }
            return rmFile(target, function() {
              makeLink(resolvedPath, target);
            });
          });
        });
      }
      function makeLink(linkPath, target) {
        fs6.symlink(linkPath, target, function(err) {
          if (err) {
            return onError(err);
          }
          return cb();
        });
      }
      function isWritable2(path5, done) {
        fs6.lstat(path5, function(err) {
          if (err) {
            if (err.code === "ENOENT")
              return done(true);
            return done(false);
          }
          return done(false);
        });
      }
      function onError(err) {
        if (options.stopOnError) {
          return cback(err);
        } else if (!errs && options.errs) {
          errs = fs6.createWriteStream(options.errs);
        } else if (!errs) {
          errs = [];
        }
        if (typeof errs.write === "undefined") {
          errs.push(err);
        } else {
          errs.write(err.stack + "\n\n");
        }
        return cb();
      }
      function cb(skipped) {
        if (!skipped)
          running--;
        finished++;
        if (started === finished && running === 0) {
          if (cback !== void 0) {
            return errs ? cback(errs) : cback(null);
          }
        }
      }
    }
  }
});

// node_modules/concat-map/index.js
var require_concat_map = __commonJS({
  "node_modules/concat-map/index.js"(exports2, module2) {
    module2.exports = function(xs, fn) {
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x))
          res.push.apply(res, x);
        else
          res.push(x);
      }
      return res;
    };
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
  }
});

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/balanced-match/index.js"(exports2, module2) {
    "use strict";
    module2.exports = balanced;
    function balanced(a, b, str) {
      if (a instanceof RegExp)
        a = maybeMatch(a, str);
      if (b instanceof RegExp)
        b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({
  "node_modules/brace-expansion/index.js"(exports2, module2) {
    var concatMap = require_concat_map();
    var balanced = require_balanced_match();
    module2.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m = balanced("{", "}", str);
      if (!m)
        return str.split(",");
      var pre = m.pre;
      var body = m.body;
      var post = m.post;
      var p = pre.split(",");
      p[p.length - 1] += "{" + body + "}";
      var postParts = parseCommaParts(post);
      if (post.length) {
        p[p.length - 1] += postParts.shift();
        p.push.apply(p, postParts);
      }
      parts.push.apply(parts, p);
      return parts;
    }
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand2(escapeBraces(str), true).map(unescapeBraces);
    }
    function embrace(str) {
      return "{" + str + "}";
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    function lte(i, y) {
      return i <= y;
    }
    function gte(i, y) {
      return i >= y;
    }
    function expand2(str, isTop) {
      var expansions = [];
      var m = balanced("{", "}", str);
      if (!m || /\$$/.test(m.pre))
        return [str];
      var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
      var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
      var isSequence = isNumericSequence || isAlphaSequence;
      var isOptions = m.body.indexOf(",") >= 0;
      if (!isSequence && !isOptions) {
        if (m.post.match(/,.*\}/)) {
          str = m.pre + "{" + m.body + escClose + m.post;
          return expand2(str);
        }
        return [str];
      }
      var n;
      if (isSequence) {
        n = m.body.split(/\.\./);
      } else {
        n = parseCommaParts(m.body);
        if (n.length === 1) {
          n = expand2(n[0], false).map(embrace);
          if (n.length === 1) {
            var post = m.post.length ? expand2(m.post, false) : [""];
            return post.map(function(p) {
              return m.pre + n[0] + p;
            });
          }
        }
      }
      var pre = m.pre;
      var post = m.post.length ? expand2(m.post, false) : [""];
      var N;
      if (isSequence) {
        var x = numeric(n[0]);
        var y = numeric(n[1]);
        var width = Math.max(n[0].length, n[1].length);
        var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
        var test = lte;
        var reverse = y < x;
        if (reverse) {
          incr *= -1;
          test = gte;
        }
        var pad = n.some(isPadded);
        N = [];
        for (var i = x; test(i, y); i += incr) {
          var c;
          if (isAlphaSequence) {
            c = String.fromCharCode(i);
            if (c === "\\")
              c = "";
          } else {
            c = String(i);
            if (pad) {
              var need = width - c.length;
              if (need > 0) {
                var z = new Array(need + 1).join("0");
                if (i < 0)
                  c = "-" + z + c.slice(1);
                else
                  c = z + c;
              }
            }
          }
          N.push(c);
        }
      } else {
        N = concatMap(n, function(el) {
          return expand2(el, false);
        });
      }
      for (var j = 0; j < N.length; j++) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + N[j] + post[k];
          if (!isTop || isSequence || expansion)
            expansions.push(expansion);
        }
      }
      return expansions;
    }
  }
});

// node_modules/mv/node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS({
  "node_modules/mv/node_modules/minimatch/minimatch.js"(exports2, module2) {
    module2.exports = minimatch2;
    minimatch2.Minimatch = Minimatch2;
    var path4 = { sep: "/" };
    try {
      path4 = require("path");
    } catch (er) {
    }
    var GLOBSTAR2 = minimatch2.GLOBSTAR = Minimatch2.GLOBSTAR = {};
    var expand2 = require_brace_expansion();
    var plTypes = {
      "!": { open: "(?:(?!(?:", close: "))[^/]*?)" },
      "?": { open: "(?:", close: ")?" },
      "+": { open: "(?:", close: ")+" },
      "*": { open: "(?:", close: ")*" },
      "@": { open: "(?:", close: ")" }
    };
    var qmark3 = "[^/]";
    var star3 = qmark3 + "*?";
    var twoStarDot2 = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
    var twoStarNoDot2 = "(?:(?!(?:\\/|^)\\.).)*?";
    var reSpecials2 = charSet("().*{}+?[]^$\\!");
    function charSet(s) {
      return s.split("").reduce(function(set, c) {
        set[c] = true;
        return set;
      }, {});
    }
    var slashSplit = /\/+/;
    minimatch2.filter = filter2;
    function filter2(pattern, options) {
      options = options || {};
      return function(p, i, list) {
        return minimatch2(p, pattern, options);
      };
    }
    function ext2(a, b) {
      a = a || {};
      b = b || {};
      var t = {};
      Object.keys(b).forEach(function(k) {
        t[k] = b[k];
      });
      Object.keys(a).forEach(function(k) {
        t[k] = a[k];
      });
      return t;
    }
    minimatch2.defaults = function(def) {
      if (!def || !Object.keys(def).length)
        return minimatch2;
      var orig = minimatch2;
      var m = function minimatch3(p, pattern, options) {
        return orig.minimatch(p, pattern, ext2(def, options));
      };
      m.Minimatch = function Minimatch3(pattern, options) {
        return new orig.Minimatch(pattern, ext2(def, options));
      };
      return m;
    };
    Minimatch2.defaults = function(def) {
      if (!def || !Object.keys(def).length)
        return Minimatch2;
      return minimatch2.defaults(def).Minimatch;
    };
    function minimatch2(p, pattern, options) {
      if (typeof pattern !== "string") {
        throw new TypeError("glob pattern string required");
      }
      if (!options)
        options = {};
      if (!options.nocomment && pattern.charAt(0) === "#") {
        return false;
      }
      if (pattern.trim() === "")
        return p === "";
      return new Minimatch2(pattern, options).match(p);
    }
    function Minimatch2(pattern, options) {
      if (!(this instanceof Minimatch2)) {
        return new Minimatch2(pattern, options);
      }
      if (typeof pattern !== "string") {
        throw new TypeError("glob pattern string required");
      }
      if (!options)
        options = {};
      pattern = pattern.trim();
      if (path4.sep !== "/") {
        pattern = pattern.split(path4.sep).join("/");
      }
      this.options = options;
      this.set = [];
      this.pattern = pattern;
      this.regexp = null;
      this.negate = false;
      this.comment = false;
      this.empty = false;
      this.make();
    }
    Minimatch2.prototype.debug = function() {
    };
    Minimatch2.prototype.make = make;
    function make() {
      if (this._made)
        return;
      var pattern = this.pattern;
      var options = this.options;
      if (!options.nocomment && pattern.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!pattern) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var set = this.globSet = this.braceExpand();
      if (options.debug)
        this.debug = console.error;
      this.debug(this.pattern, set);
      set = this.globParts = set.map(function(s) {
        return s.split(slashSplit);
      });
      this.debug(this.pattern, set);
      set = set.map(function(s, si, set2) {
        return s.map(this.parse, this);
      }, this);
      this.debug(this.pattern, set);
      set = set.filter(function(s) {
        return s.indexOf(false) === -1;
      });
      this.debug(this.pattern, set);
      this.set = set;
    }
    Minimatch2.prototype.parseNegate = parseNegate;
    function parseNegate() {
      var pattern = this.pattern;
      var negate = false;
      var options = this.options;
      var negateOffset = 0;
      if (options.nonegate)
        return;
      for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === "!"; i++) {
        negate = !negate;
        negateOffset++;
      }
      if (negateOffset)
        this.pattern = pattern.substr(negateOffset);
      this.negate = negate;
    }
    minimatch2.braceExpand = function(pattern, options) {
      return braceExpand2(pattern, options);
    };
    Minimatch2.prototype.braceExpand = braceExpand2;
    function braceExpand2(pattern, options) {
      if (!options) {
        if (this instanceof Minimatch2) {
          options = this.options;
        } else {
          options = {};
        }
      }
      pattern = typeof pattern === "undefined" ? this.pattern : pattern;
      if (typeof pattern === "undefined") {
        throw new TypeError("undefined pattern");
      }
      if (options.nobrace || !pattern.match(/\{.*\}/)) {
        return [pattern];
      }
      return expand2(pattern);
    }
    Minimatch2.prototype.parse = parse;
    var SUBPARSE = {};
    function parse(pattern, isSub) {
      if (pattern.length > 1024 * 64) {
        throw new TypeError("pattern is too long");
      }
      var options = this.options;
      if (!options.noglobstar && pattern === "**")
        return GLOBSTAR2;
      if (pattern === "")
        return "";
      var re = "";
      var hasMagic2 = !!options.nocase;
      var escaping = false;
      var patternListStack = [];
      var negativeLists = [];
      var stateChar;
      var inClass = false;
      var reClassStart = -1;
      var classStart = -1;
      var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
      var self2 = this;
      function clearStateChar() {
        if (stateChar) {
          switch (stateChar) {
            case "*":
              re += star3;
              hasMagic2 = true;
              break;
            case "?":
              re += qmark3;
              hasMagic2 = true;
              break;
            default:
              re += "\\" + stateChar;
              break;
          }
          self2.debug("clearStateChar %j %j", stateChar, re);
          stateChar = false;
        }
      }
      for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
        this.debug("%s	%s %s %j", pattern, i, re, c);
        if (escaping && reSpecials2[c]) {
          re += "\\" + c;
          escaping = false;
          continue;
        }
        switch (c) {
          case "/":
            return false;
          case "\\":
            clearStateChar();
            escaping = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            this.debug("%s	%s %s %j <-- stateChar", pattern, i, re, c);
            if (inClass) {
              this.debug("  in class");
              if (c === "!" && i === classStart + 1)
                c = "^";
              re += c;
              continue;
            }
            self2.debug("call clearStateChar %j", stateChar);
            clearStateChar();
            stateChar = c;
            if (options.noext)
              clearStateChar();
            continue;
          case "(":
            if (inClass) {
              re += "(";
              continue;
            }
            if (!stateChar) {
              re += "\\(";
              continue;
            }
            patternListStack.push({
              type: stateChar,
              start: i - 1,
              reStart: re.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
            this.debug("plType %j %j", stateChar, re);
            stateChar = false;
            continue;
          case ")":
            if (inClass || !patternListStack.length) {
              re += "\\)";
              continue;
            }
            clearStateChar();
            hasMagic2 = true;
            var pl = patternListStack.pop();
            re += pl.close;
            if (pl.type === "!") {
              negativeLists.push(pl);
            }
            pl.reEnd = re.length;
            continue;
          case "|":
            if (inClass || !patternListStack.length || escaping) {
              re += "\\|";
              escaping = false;
              continue;
            }
            clearStateChar();
            re += "|";
            continue;
          case "[":
            clearStateChar();
            if (inClass) {
              re += "\\" + c;
              continue;
            }
            inClass = true;
            classStart = i;
            reClassStart = re.length;
            re += c;
            continue;
          case "]":
            if (i === classStart + 1 || !inClass) {
              re += "\\" + c;
              escaping = false;
              continue;
            }
            if (inClass) {
              var cs = pattern.substring(classStart + 1, i);
              try {
                RegExp("[" + cs + "]");
              } catch (er) {
                var sp = this.parse(cs, SUBPARSE);
                re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
                hasMagic2 = hasMagic2 || sp[1];
                inClass = false;
                continue;
              }
            }
            hasMagic2 = true;
            inClass = false;
            re += c;
            continue;
          default:
            clearStateChar();
            if (escaping) {
              escaping = false;
            } else if (reSpecials2[c] && !(c === "^" && inClass)) {
              re += "\\";
            }
            re += c;
        }
      }
      if (inClass) {
        cs = pattern.substr(classStart + 1);
        sp = this.parse(cs, SUBPARSE);
        re = re.substr(0, reClassStart) + "\\[" + sp[0];
        hasMagic2 = hasMagic2 || sp[1];
      }
      for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
        var tail = re.slice(pl.reStart + pl.open.length);
        this.debug("setting tail", re, pl);
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_, $1, $2) {
          if (!$2) {
            $2 = "\\";
          }
          return $1 + $1 + $2 + "|";
        });
        this.debug("tail=%j\n   %s", tail, tail, pl, re);
        var t = pl.type === "*" ? star3 : pl.type === "?" ? qmark3 : "\\" + pl.type;
        hasMagic2 = true;
        re = re.slice(0, pl.reStart) + t + "\\(" + tail;
      }
      clearStateChar();
      if (escaping) {
        re += "\\\\";
      }
      var addPatternStart2 = false;
      switch (re.charAt(0)) {
        case ".":
        case "[":
        case "(":
          addPatternStart2 = true;
      }
      for (var n = negativeLists.length - 1; n > -1; n--) {
        var nl = negativeLists[n];
        var nlBefore = re.slice(0, nl.reStart);
        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re.slice(nl.reEnd);
        nlLast += nlAfter;
        var openParensBefore = nlBefore.split("(").length - 1;
        var cleanAfter = nlAfter;
        for (i = 0; i < openParensBefore; i++) {
          cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
        }
        nlAfter = cleanAfter;
        var dollar = "";
        if (nlAfter === "" && isSub !== SUBPARSE) {
          dollar = "$";
        }
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re = newRe;
      }
      if (re !== "" && hasMagic2) {
        re = "(?=.)" + re;
      }
      if (addPatternStart2) {
        re = patternStart + re;
      }
      if (isSub === SUBPARSE) {
        return [re, hasMagic2];
      }
      if (!hasMagic2) {
        return globUnescape(pattern);
      }
      var flags = options.nocase ? "i" : "";
      try {
        var regExp = new RegExp("^" + re + "$", flags);
      } catch (er) {
        return new RegExp("$.");
      }
      regExp._glob = pattern;
      regExp._src = re;
      return regExp;
    }
    minimatch2.makeRe = function(pattern, options) {
      return new Minimatch2(pattern, options || {}).makeRe();
    };
    Minimatch2.prototype.makeRe = makeRe2;
    function makeRe2() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      var set = this.set;
      if (!set.length) {
        this.regexp = false;
        return this.regexp;
      }
      var options = this.options;
      var twoStar = options.noglobstar ? star3 : options.dot ? twoStarDot2 : twoStarNoDot2;
      var flags = options.nocase ? "i" : "";
      var re = set.map(function(pattern) {
        return pattern.map(function(p) {
          return p === GLOBSTAR2 ? twoStar : typeof p === "string" ? regExpEscape3(p) : p._src;
        }).join("\\/");
      }).join("|");
      re = "^(?:" + re + ")$";
      if (this.negate)
        re = "^(?!" + re + ").*$";
      try {
        this.regexp = new RegExp(re, flags);
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp;
    }
    minimatch2.match = function(list, pattern, options) {
      options = options || {};
      var mm = new Minimatch2(pattern, options);
      list = list.filter(function(f) {
        return mm.match(f);
      });
      if (mm.options.nonull && !list.length) {
        list.push(pattern);
      }
      return list;
    };
    Minimatch2.prototype.match = match2;
    function match2(f, partial) {
      this.debug("match", f, this.pattern);
      if (this.comment)
        return false;
      if (this.empty)
        return f === "";
      if (f === "/" && partial)
        return true;
      var options = this.options;
      if (path4.sep !== "/") {
        f = f.split(path4.sep).join("/");
      }
      f = f.split(slashSplit);
      this.debug(this.pattern, "split", f);
      var set = this.set;
      this.debug(this.pattern, "set", set);
      var filename;
      var i;
      for (i = f.length - 1; i >= 0; i--) {
        filename = f[i];
        if (filename)
          break;
      }
      for (i = 0; i < set.length; i++) {
        var pattern = set[i];
        var file = f;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate)
            return true;
          return !this.negate;
        }
      }
      if (options.flipNegate)
        return false;
      return this.negate;
    }
    Minimatch2.prototype.matchOne = function(file, pattern, partial) {
      var options = this.options;
      this.debug(
        "matchOne",
        { "this": this, file, pattern }
      );
      this.debug("matchOne", file.length, pattern.length);
      for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
        this.debug("matchOne loop");
        var p = pattern[pi];
        var f = file[fi];
        this.debug(pattern, p, f);
        if (p === false)
          return false;
        if (p === GLOBSTAR2) {
          this.debug("GLOBSTAR", [pattern, p, f]);
          var fr = fi;
          var pr = pi + 1;
          if (pr === pl) {
            this.debug("** at the end");
            for (; fi < fl; fi++) {
              if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
                return false;
            }
            return true;
          }
          while (fr < fl) {
            var swallowee = file[fr];
            this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
              this.debug("globstar found match!", fr, fl, swallowee);
              return true;
            } else {
              if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                this.debug("dot detected!", file, fr, pattern, pr);
                break;
              }
              this.debug("globstar swallow a segment, and continue");
              fr++;
            }
          }
          if (partial) {
            this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
            if (fr === fl)
              return true;
          }
          return false;
        }
        var hit;
        if (typeof p === "string") {
          if (options.nocase) {
            hit = f.toLowerCase() === p.toLowerCase();
          } else {
            hit = f === p;
          }
          this.debug("string match", p, f, hit);
        } else {
          hit = f.match(p);
          this.debug("pattern match", p, f, hit);
        }
        if (!hit)
          return false;
      }
      if (fi === fl && pi === pl) {
        return true;
      } else if (fi === fl) {
        return partial;
      } else if (pi === pl) {
        var emptyFileEnd = fi === fl - 1 && file[fi] === "";
        return emptyFileEnd;
      }
      throw new Error("wtf?");
    };
    function globUnescape(s) {
      return s.replace(/\\(.)/g, "$1");
    }
    function regExpEscape3(s) {
      return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "node_modules/inherits/inherits.js"(exports2, module2) {
    try {
      util = require("util");
      if (typeof util.inherits !== "function")
        throw "";
      module2.exports = util.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// node_modules/path-is-absolute/index.js
var require_path_is_absolute = __commonJS({
  "node_modules/path-is-absolute/index.js"(exports2, module2) {
    "use strict";
    function posix2(path4) {
      return path4.charAt(0) === "/";
    }
    function win322(path4) {
      var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
      var result = splitDeviceRe.exec(path4);
      var device = result[1] || "";
      var isUnc = Boolean(device && device.charAt(1) !== ":");
      return Boolean(result[2] || isUnc);
    }
    module2.exports = process.platform === "win32" ? win322 : posix2;
    module2.exports.posix = posix2;
    module2.exports.win32 = win322;
  }
});

// node_modules/mv/node_modules/glob/common.js
var require_common2 = __commonJS({
  "node_modules/mv/node_modules/glob/common.js"(exports2) {
    exports2.alphasort = alphasort;
    exports2.alphasorti = alphasorti;
    exports2.setopts = setopts;
    exports2.ownProp = ownProp;
    exports2.makeAbs = makeAbs;
    exports2.finish = finish;
    exports2.mark = mark;
    exports2.isIgnored = isIgnored;
    exports2.childrenIgnored = childrenIgnored;
    function ownProp(obj, field) {
      return Object.prototype.hasOwnProperty.call(obj, field);
    }
    var path4 = require("path");
    var minimatch2 = require_minimatch();
    var isAbsolute = require_path_is_absolute();
    var Minimatch2 = minimatch2.Minimatch;
    function alphasorti(a, b) {
      return a.toLowerCase().localeCompare(b.toLowerCase());
    }
    function alphasort(a, b) {
      return a.localeCompare(b);
    }
    function setupIgnores(self2, options) {
      self2.ignore = options.ignore || [];
      if (!Array.isArray(self2.ignore))
        self2.ignore = [self2.ignore];
      if (self2.ignore.length) {
        self2.ignore = self2.ignore.map(ignoreMap);
      }
    }
    function ignoreMap(pattern) {
      var gmatcher = null;
      if (pattern.slice(-3) === "/**") {
        var gpattern = pattern.replace(/(\/\*\*)+$/, "");
        gmatcher = new Minimatch2(gpattern, { dot: true });
      }
      return {
        matcher: new Minimatch2(pattern, { dot: true }),
        gmatcher
      };
    }
    function setopts(self2, pattern, options) {
      if (!options)
        options = {};
      if (options.matchBase && -1 === pattern.indexOf("/")) {
        if (options.noglobstar) {
          throw new Error("base matching requires globstar");
        }
        pattern = "**/" + pattern;
      }
      self2.silent = !!options.silent;
      self2.pattern = pattern;
      self2.strict = options.strict !== false;
      self2.realpath = !!options.realpath;
      self2.realpathCache = options.realpathCache || /* @__PURE__ */ Object.create(null);
      self2.follow = !!options.follow;
      self2.dot = !!options.dot;
      self2.mark = !!options.mark;
      self2.nodir = !!options.nodir;
      if (self2.nodir)
        self2.mark = true;
      self2.sync = !!options.sync;
      self2.nounique = !!options.nounique;
      self2.nonull = !!options.nonull;
      self2.nosort = !!options.nosort;
      self2.nocase = !!options.nocase;
      self2.stat = !!options.stat;
      self2.noprocess = !!options.noprocess;
      self2.maxLength = options.maxLength || Infinity;
      self2.cache = options.cache || /* @__PURE__ */ Object.create(null);
      self2.statCache = options.statCache || /* @__PURE__ */ Object.create(null);
      self2.symlinks = options.symlinks || /* @__PURE__ */ Object.create(null);
      setupIgnores(self2, options);
      self2.changedCwd = false;
      var cwd = process.cwd();
      if (!ownProp(options, "cwd"))
        self2.cwd = cwd;
      else {
        self2.cwd = options.cwd;
        self2.changedCwd = path4.resolve(options.cwd) !== cwd;
      }
      self2.root = options.root || path4.resolve(self2.cwd, "/");
      self2.root = path4.resolve(self2.root);
      if (process.platform === "win32")
        self2.root = self2.root.replace(/\\/g, "/");
      self2.nomount = !!options.nomount;
      options.nonegate = true;
      options.nocomment = true;
      self2.minimatch = new Minimatch2(pattern, options);
      self2.options = self2.minimatch.options;
    }
    function finish(self2) {
      var nou = self2.nounique;
      var all = nou ? [] : /* @__PURE__ */ Object.create(null);
      for (var i = 0, l = self2.matches.length; i < l; i++) {
        var matches = self2.matches[i];
        if (!matches || Object.keys(matches).length === 0) {
          if (self2.nonull) {
            var literal = self2.minimatch.globSet[i];
            if (nou)
              all.push(literal);
            else
              all[literal] = true;
          }
        } else {
          var m = Object.keys(matches);
          if (nou)
            all.push.apply(all, m);
          else
            m.forEach(function(m2) {
              all[m2] = true;
            });
        }
      }
      if (!nou)
        all = Object.keys(all);
      if (!self2.nosort)
        all = all.sort(self2.nocase ? alphasorti : alphasort);
      if (self2.mark) {
        for (var i = 0; i < all.length; i++) {
          all[i] = self2._mark(all[i]);
        }
        if (self2.nodir) {
          all = all.filter(function(e) {
            return !/\/$/.test(e);
          });
        }
      }
      if (self2.ignore.length)
        all = all.filter(function(m2) {
          return !isIgnored(self2, m2);
        });
      self2.found = all;
    }
    function mark(self2, p) {
      var abs = makeAbs(self2, p);
      var c = self2.cache[abs];
      var m = p;
      if (c) {
        var isDir = c === "DIR" || Array.isArray(c);
        var slash = p.slice(-1) === "/";
        if (isDir && !slash)
          m += "/";
        else if (!isDir && slash)
          m = m.slice(0, -1);
        if (m !== p) {
          var mabs = makeAbs(self2, m);
          self2.statCache[mabs] = self2.statCache[abs];
          self2.cache[mabs] = self2.cache[abs];
        }
      }
      return m;
    }
    function makeAbs(self2, f) {
      var abs = f;
      if (f.charAt(0) === "/") {
        abs = path4.join(self2.root, f);
      } else if (isAbsolute(f) || f === "") {
        abs = f;
      } else if (self2.changedCwd) {
        abs = path4.resolve(self2.cwd, f);
      } else {
        abs = path4.resolve(f);
      }
      return abs;
    }
    function isIgnored(self2, path5) {
      if (!self2.ignore.length)
        return false;
      return self2.ignore.some(function(item) {
        return item.matcher.match(path5) || !!(item.gmatcher && item.gmatcher.match(path5));
      });
    }
    function childrenIgnored(self2, path5) {
      if (!self2.ignore.length)
        return false;
      return self2.ignore.some(function(item) {
        return !!(item.gmatcher && item.gmatcher.match(path5));
      });
    }
  }
});

// node_modules/mv/node_modules/glob/sync.js
var require_sync = __commonJS({
  "node_modules/mv/node_modules/glob/sync.js"(exports2, module2) {
    module2.exports = globSync2;
    globSync2.GlobSync = GlobSync;
    var fs6 = require("fs");
    var minimatch2 = require_minimatch();
    var Minimatch2 = minimatch2.Minimatch;
    var Glob2 = require_glob().Glob;
    var util = require("util");
    var path4 = require("path");
    var assert = require("assert");
    var isAbsolute = require_path_is_absolute();
    var common = require_common2();
    var alphasort = common.alphasort;
    var alphasorti = common.alphasorti;
    var setopts = common.setopts;
    var ownProp = common.ownProp;
    var childrenIgnored = common.childrenIgnored;
    function globSync2(pattern, options) {
      if (typeof options === "function" || arguments.length === 3)
        throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
      return new GlobSync(pattern, options).found;
    }
    function GlobSync(pattern, options) {
      if (!pattern)
        throw new Error("must provide pattern");
      if (typeof options === "function" || arguments.length === 3)
        throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
      if (!(this instanceof GlobSync))
        return new GlobSync(pattern, options);
      setopts(this, pattern, options);
      if (this.noprocess)
        return this;
      var n = this.minimatch.set.length;
      this.matches = new Array(n);
      for (var i = 0; i < n; i++) {
        this._process(this.minimatch.set[i], i, false);
      }
      this._finish();
    }
    GlobSync.prototype._finish = function() {
      assert(this instanceof GlobSync);
      if (this.realpath) {
        var self2 = this;
        this.matches.forEach(function(matchset, index) {
          var set = self2.matches[index] = /* @__PURE__ */ Object.create(null);
          for (var p in matchset) {
            try {
              p = self2._makeAbs(p);
              var real = fs6.realpathSync(p, self2.realpathCache);
              set[real] = true;
            } catch (er) {
              if (er.syscall === "stat")
                set[self2._makeAbs(p)] = true;
              else
                throw er;
            }
          }
        });
      }
      common.finish(this);
    };
    GlobSync.prototype._process = function(pattern, index, inGlobStar) {
      assert(this instanceof GlobSync);
      var n = 0;
      while (typeof pattern[n] === "string") {
        n++;
      }
      var prefix;
      switch (n) {
        case pattern.length:
          this._processSimple(pattern.join("/"), index);
          return;
        case 0:
          prefix = null;
          break;
        default:
          prefix = pattern.slice(0, n).join("/");
          break;
      }
      var remain = pattern.slice(n);
      var read;
      if (prefix === null)
        read = ".";
      else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
        if (!prefix || !isAbsolute(prefix))
          prefix = "/" + prefix;
        read = prefix;
      } else
        read = prefix;
      var abs = this._makeAbs(read);
      if (childrenIgnored(this, read))
        return;
      var isGlobStar = remain[0] === minimatch2.GLOBSTAR;
      if (isGlobStar)
        this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);
      else
        this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
    };
    GlobSync.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar) {
      var entries = this._readdir(abs, inGlobStar);
      if (!entries)
        return;
      var pn = remain[0];
      var negate = !!this.minimatch.negate;
      var rawGlob = pn._glob;
      var dotOk = this.dot || rawGlob.charAt(0) === ".";
      var matchedEntries = [];
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (e.charAt(0) !== "." || dotOk) {
          var m;
          if (negate && !prefix) {
            m = !e.match(pn);
          } else {
            m = e.match(pn);
          }
          if (m)
            matchedEntries.push(e);
        }
      }
      var len = matchedEntries.length;
      if (len === 0)
        return;
      if (remain.length === 1 && !this.mark && !this.stat) {
        if (!this.matches[index])
          this.matches[index] = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < len; i++) {
          var e = matchedEntries[i];
          if (prefix) {
            if (prefix.slice(-1) !== "/")
              e = prefix + "/" + e;
            else
              e = prefix + e;
          }
          if (e.charAt(0) === "/" && !this.nomount) {
            e = path4.join(this.root, e);
          }
          this.matches[index][e] = true;
        }
        return;
      }
      remain.shift();
      for (var i = 0; i < len; i++) {
        var e = matchedEntries[i];
        var newPattern;
        if (prefix)
          newPattern = [prefix, e];
        else
          newPattern = [e];
        this._process(newPattern.concat(remain), index, inGlobStar);
      }
    };
    GlobSync.prototype._emitMatch = function(index, e) {
      var abs = this._makeAbs(e);
      if (this.mark)
        e = this._mark(e);
      if (this.matches[index][e])
        return;
      if (this.nodir) {
        var c = this.cache[this._makeAbs(e)];
        if (c === "DIR" || Array.isArray(c))
          return;
      }
      this.matches[index][e] = true;
      if (this.stat)
        this._stat(e);
    };
    GlobSync.prototype._readdirInGlobStar = function(abs) {
      if (this.follow)
        return this._readdir(abs, false);
      var entries;
      var lstat2;
      var stat;
      try {
        lstat2 = fs6.lstatSync(abs);
      } catch (er) {
        return null;
      }
      var isSym = lstat2.isSymbolicLink();
      this.symlinks[abs] = isSym;
      if (!isSym && !lstat2.isDirectory())
        this.cache[abs] = "FILE";
      else
        entries = this._readdir(abs, false);
      return entries;
    };
    GlobSync.prototype._readdir = function(abs, inGlobStar) {
      var entries;
      if (inGlobStar && !ownProp(this.symlinks, abs))
        return this._readdirInGlobStar(abs);
      if (ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (!c || c === "FILE")
          return null;
        if (Array.isArray(c))
          return c;
      }
      try {
        return this._readdirEntries(abs, fs6.readdirSync(abs));
      } catch (er) {
        this._readdirError(abs, er);
        return null;
      }
    };
    GlobSync.prototype._readdirEntries = function(abs, entries) {
      if (!this.mark && !this.stat) {
        for (var i = 0; i < entries.length; i++) {
          var e = entries[i];
          if (abs === "/")
            e = abs + e;
          else
            e = abs + "/" + e;
          this.cache[e] = true;
        }
      }
      this.cache[abs] = entries;
      return entries;
    };
    GlobSync.prototype._readdirError = function(f, er) {
      switch (er.code) {
        case "ENOTSUP":
        case "ENOTDIR":
          this.cache[this._makeAbs(f)] = "FILE";
          break;
        case "ENOENT":
        case "ELOOP":
        case "ENAMETOOLONG":
        case "UNKNOWN":
          this.cache[this._makeAbs(f)] = false;
          break;
        default:
          this.cache[this._makeAbs(f)] = false;
          if (this.strict)
            throw er;
          if (!this.silent)
            console.error("glob error", er);
          break;
      }
    };
    GlobSync.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar) {
      var entries = this._readdir(abs, inGlobStar);
      if (!entries)
        return;
      var remainWithoutGlobStar = remain.slice(1);
      var gspref = prefix ? [prefix] : [];
      var noGlobStar = gspref.concat(remainWithoutGlobStar);
      this._process(noGlobStar, index, false);
      var len = entries.length;
      var isSym = this.symlinks[abs];
      if (isSym && inGlobStar)
        return;
      for (var i = 0; i < len; i++) {
        var e = entries[i];
        if (e.charAt(0) === "." && !this.dot)
          continue;
        var instead = gspref.concat(entries[i], remainWithoutGlobStar);
        this._process(instead, index, true);
        var below = gspref.concat(entries[i], remain);
        this._process(below, index, true);
      }
    };
    GlobSync.prototype._processSimple = function(prefix, index) {
      var exists = this._stat(prefix);
      if (!this.matches[index])
        this.matches[index] = /* @__PURE__ */ Object.create(null);
      if (!exists)
        return;
      if (prefix && isAbsolute(prefix) && !this.nomount) {
        var trail = /[\/\\]$/.test(prefix);
        if (prefix.charAt(0) === "/") {
          prefix = path4.join(this.root, prefix);
        } else {
          prefix = path4.resolve(this.root, prefix);
          if (trail)
            prefix += "/";
        }
      }
      if (process.platform === "win32")
        prefix = prefix.replace(/\\/g, "/");
      this.matches[index][prefix] = true;
    };
    GlobSync.prototype._stat = function(f) {
      var abs = this._makeAbs(f);
      var needDir = f.slice(-1) === "/";
      if (f.length > this.maxLength)
        return false;
      if (!this.stat && ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (Array.isArray(c))
          c = "DIR";
        if (!needDir || c === "DIR")
          return c;
        if (needDir && c === "FILE")
          return false;
      }
      var exists;
      var stat = this.statCache[abs];
      if (!stat) {
        var lstat2;
        try {
          lstat2 = fs6.lstatSync(abs);
        } catch (er) {
          return false;
        }
        if (lstat2.isSymbolicLink()) {
          try {
            stat = fs6.statSync(abs);
          } catch (er) {
            stat = lstat2;
          }
        } else {
          stat = lstat2;
        }
      }
      this.statCache[abs] = stat;
      var c = stat.isDirectory() ? "DIR" : "FILE";
      this.cache[abs] = this.cache[abs] || c;
      if (needDir && c !== "DIR")
        return false;
      return c;
    };
    GlobSync.prototype._mark = function(p) {
      return common.mark(this, p);
    };
    GlobSync.prototype._makeAbs = function(f) {
      return common.makeAbs(this, f);
    };
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports2, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports2, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/inflight/inflight.js
var require_inflight = __commonJS({
  "node_modules/inflight/inflight.js"(exports2, module2) {
    var wrappy = require_wrappy();
    var reqs = /* @__PURE__ */ Object.create(null);
    var once = require_once();
    module2.exports = wrappy(inflight);
    function inflight(key, cb) {
      if (reqs[key]) {
        reqs[key].push(cb);
        return null;
      } else {
        reqs[key] = [cb];
        return makeres(key);
      }
    }
    function makeres(key) {
      return once(function RES() {
        var cbs = reqs[key];
        var len = cbs.length;
        var args = slice(arguments);
        try {
          for (var i = 0; i < len; i++) {
            cbs[i].apply(null, args);
          }
        } finally {
          if (cbs.length > len) {
            cbs.splice(0, len);
            process.nextTick(function() {
              RES.apply(null, args);
            });
          } else {
            delete reqs[key];
          }
        }
      });
    }
    function slice(args) {
      var length = args.length;
      var array = [];
      for (var i = 0; i < length; i++)
        array[i] = args[i];
      return array;
    }
  }
});

// node_modules/mv/node_modules/glob/glob.js
var require_glob = __commonJS({
  "node_modules/mv/node_modules/glob/glob.js"(exports2, module2) {
    module2.exports = glob2;
    var fs6 = require("fs");
    var minimatch2 = require_minimatch();
    var Minimatch2 = minimatch2.Minimatch;
    var inherits = require_inherits();
    var EE = require("events").EventEmitter;
    var path4 = require("path");
    var assert = require("assert");
    var isAbsolute = require_path_is_absolute();
    var globSync2 = require_sync();
    var common = require_common2();
    var alphasort = common.alphasort;
    var alphasorti = common.alphasorti;
    var setopts = common.setopts;
    var ownProp = common.ownProp;
    var inflight = require_inflight();
    var util = require("util");
    var childrenIgnored = common.childrenIgnored;
    var isIgnored = common.isIgnored;
    var once = require_once();
    function glob2(pattern, options, cb) {
      if (typeof options === "function")
        cb = options, options = {};
      if (!options)
        options = {};
      if (options.sync) {
        if (cb)
          throw new TypeError("callback provided to sync glob");
        return globSync2(pattern, options);
      }
      return new Glob2(pattern, options, cb);
    }
    glob2.sync = globSync2;
    var GlobSync = glob2.GlobSync = globSync2.GlobSync;
    glob2.glob = glob2;
    function extend(origin, add) {
      if (add === null || typeof add !== "object") {
        return origin;
      }
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    glob2.hasMagic = function(pattern, options_) {
      var options = extend({}, options_);
      options.noprocess = true;
      var g = new Glob2(pattern, options);
      var set = g.minimatch.set;
      if (set.length > 1)
        return true;
      for (var j = 0; j < set[0].length; j++) {
        if (typeof set[0][j] !== "string")
          return true;
      }
      return false;
    };
    glob2.Glob = Glob2;
    inherits(Glob2, EE);
    function Glob2(pattern, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = null;
      }
      if (options && options.sync) {
        if (cb)
          throw new TypeError("callback provided to sync glob");
        return new GlobSync(pattern, options);
      }
      if (!(this instanceof Glob2))
        return new Glob2(pattern, options, cb);
      setopts(this, pattern, options);
      this._didRealPath = false;
      var n = this.minimatch.set.length;
      this.matches = new Array(n);
      if (typeof cb === "function") {
        cb = once(cb);
        this.on("error", cb);
        this.on("end", function(matches) {
          cb(null, matches);
        });
      }
      var self2 = this;
      var n = this.minimatch.set.length;
      this._processing = 0;
      this.matches = new Array(n);
      this._emitQueue = [];
      this._processQueue = [];
      this.paused = false;
      if (this.noprocess)
        return this;
      if (n === 0)
        return done();
      for (var i = 0; i < n; i++) {
        this._process(this.minimatch.set[i], i, false, done);
      }
      function done() {
        --self2._processing;
        if (self2._processing <= 0)
          self2._finish();
      }
    }
    Glob2.prototype._finish = function() {
      assert(this instanceof Glob2);
      if (this.aborted)
        return;
      if (this.realpath && !this._didRealpath)
        return this._realpath();
      common.finish(this);
      this.emit("end", this.found);
    };
    Glob2.prototype._realpath = function() {
      if (this._didRealpath)
        return;
      this._didRealpath = true;
      var n = this.matches.length;
      if (n === 0)
        return this._finish();
      var self2 = this;
      for (var i = 0; i < this.matches.length; i++)
        this._realpathSet(i, next);
      function next() {
        if (--n === 0)
          self2._finish();
      }
    };
    Glob2.prototype._realpathSet = function(index, cb) {
      var matchset = this.matches[index];
      if (!matchset)
        return cb();
      var found = Object.keys(matchset);
      var self2 = this;
      var n = found.length;
      if (n === 0)
        return cb();
      var set = this.matches[index] = /* @__PURE__ */ Object.create(null);
      found.forEach(function(p, i) {
        p = self2._makeAbs(p);
        fs6.realpath(p, self2.realpathCache, function(er, real) {
          if (!er)
            set[real] = true;
          else if (er.syscall === "stat")
            set[p] = true;
          else
            self2.emit("error", er);
          if (--n === 0) {
            self2.matches[index] = set;
            cb();
          }
        });
      });
    };
    Glob2.prototype._mark = function(p) {
      return common.mark(this, p);
    };
    Glob2.prototype._makeAbs = function(f) {
      return common.makeAbs(this, f);
    };
    Glob2.prototype.abort = function() {
      this.aborted = true;
      this.emit("abort");
    };
    Glob2.prototype.pause = function() {
      if (!this.paused) {
        this.paused = true;
        this.emit("pause");
      }
    };
    Glob2.prototype.resume = function() {
      if (this.paused) {
        this.emit("resume");
        this.paused = false;
        if (this._emitQueue.length) {
          var eq = this._emitQueue.slice(0);
          this._emitQueue.length = 0;
          for (var i = 0; i < eq.length; i++) {
            var e = eq[i];
            this._emitMatch(e[0], e[1]);
          }
        }
        if (this._processQueue.length) {
          var pq = this._processQueue.slice(0);
          this._processQueue.length = 0;
          for (var i = 0; i < pq.length; i++) {
            var p = pq[i];
            this._processing--;
            this._process(p[0], p[1], p[2], p[3]);
          }
        }
      }
    };
    Glob2.prototype._process = function(pattern, index, inGlobStar, cb) {
      assert(this instanceof Glob2);
      assert(typeof cb === "function");
      if (this.aborted)
        return;
      this._processing++;
      if (this.paused) {
        this._processQueue.push([pattern, index, inGlobStar, cb]);
        return;
      }
      var n = 0;
      while (typeof pattern[n] === "string") {
        n++;
      }
      var prefix;
      switch (n) {
        case pattern.length:
          this._processSimple(pattern.join("/"), index, cb);
          return;
        case 0:
          prefix = null;
          break;
        default:
          prefix = pattern.slice(0, n).join("/");
          break;
      }
      var remain = pattern.slice(n);
      var read;
      if (prefix === null)
        read = ".";
      else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
        if (!prefix || !isAbsolute(prefix))
          prefix = "/" + prefix;
        read = prefix;
      } else
        read = prefix;
      var abs = this._makeAbs(read);
      if (childrenIgnored(this, read))
        return cb();
      var isGlobStar = remain[0] === minimatch2.GLOBSTAR;
      if (isGlobStar)
        this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);
      else
        this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
    };
    Glob2.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar, cb) {
      var self2 = this;
      this._readdir(abs, inGlobStar, function(er, entries) {
        return self2._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
      });
    };
    Glob2.prototype._processReaddir2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
      if (!entries)
        return cb();
      var pn = remain[0];
      var negate = !!this.minimatch.negate;
      var rawGlob = pn._glob;
      var dotOk = this.dot || rawGlob.charAt(0) === ".";
      var matchedEntries = [];
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (e.charAt(0) !== "." || dotOk) {
          var m;
          if (negate && !prefix) {
            m = !e.match(pn);
          } else {
            m = e.match(pn);
          }
          if (m)
            matchedEntries.push(e);
        }
      }
      var len = matchedEntries.length;
      if (len === 0)
        return cb();
      if (remain.length === 1 && !this.mark && !this.stat) {
        if (!this.matches[index])
          this.matches[index] = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < len; i++) {
          var e = matchedEntries[i];
          if (prefix) {
            if (prefix !== "/")
              e = prefix + "/" + e;
            else
              e = prefix + e;
          }
          if (e.charAt(0) === "/" && !this.nomount) {
            e = path4.join(this.root, e);
          }
          this._emitMatch(index, e);
        }
        return cb();
      }
      remain.shift();
      for (var i = 0; i < len; i++) {
        var e = matchedEntries[i];
        var newPattern;
        if (prefix) {
          if (prefix !== "/")
            e = prefix + "/" + e;
          else
            e = prefix + e;
        }
        this._process([e].concat(remain), index, inGlobStar, cb);
      }
      cb();
    };
    Glob2.prototype._emitMatch = function(index, e) {
      if (this.aborted)
        return;
      if (this.matches[index][e])
        return;
      if (isIgnored(this, e))
        return;
      if (this.paused) {
        this._emitQueue.push([index, e]);
        return;
      }
      var abs = this._makeAbs(e);
      if (this.nodir) {
        var c = this.cache[abs];
        if (c === "DIR" || Array.isArray(c))
          return;
      }
      if (this.mark)
        e = this._mark(e);
      this.matches[index][e] = true;
      var st = this.statCache[abs];
      if (st)
        this.emit("stat", e, st);
      this.emit("match", e);
    };
    Glob2.prototype._readdirInGlobStar = function(abs, cb) {
      if (this.aborted)
        return;
      if (this.follow)
        return this._readdir(abs, false, cb);
      var lstatkey = "lstat\0" + abs;
      var self2 = this;
      var lstatcb = inflight(lstatkey, lstatcb_);
      if (lstatcb)
        fs6.lstat(abs, lstatcb);
      function lstatcb_(er, lstat2) {
        if (er)
          return cb();
        var isSym = lstat2.isSymbolicLink();
        self2.symlinks[abs] = isSym;
        if (!isSym && !lstat2.isDirectory()) {
          self2.cache[abs] = "FILE";
          cb();
        } else
          self2._readdir(abs, false, cb);
      }
    };
    Glob2.prototype._readdir = function(abs, inGlobStar, cb) {
      if (this.aborted)
        return;
      cb = inflight("readdir\0" + abs + "\0" + inGlobStar, cb);
      if (!cb)
        return;
      if (inGlobStar && !ownProp(this.symlinks, abs))
        return this._readdirInGlobStar(abs, cb);
      if (ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (!c || c === "FILE")
          return cb();
        if (Array.isArray(c))
          return cb(null, c);
      }
      var self2 = this;
      fs6.readdir(abs, readdirCb(this, abs, cb));
    };
    function readdirCb(self2, abs, cb) {
      return function(er, entries) {
        if (er)
          self2._readdirError(abs, er, cb);
        else
          self2._readdirEntries(abs, entries, cb);
      };
    }
    Glob2.prototype._readdirEntries = function(abs, entries, cb) {
      if (this.aborted)
        return;
      if (!this.mark && !this.stat) {
        for (var i = 0; i < entries.length; i++) {
          var e = entries[i];
          if (abs === "/")
            e = abs + e;
          else
            e = abs + "/" + e;
          this.cache[e] = true;
        }
      }
      this.cache[abs] = entries;
      return cb(null, entries);
    };
    Glob2.prototype._readdirError = function(f, er, cb) {
      if (this.aborted)
        return;
      switch (er.code) {
        case "ENOTSUP":
        case "ENOTDIR":
          this.cache[this._makeAbs(f)] = "FILE";
          break;
        case "ENOENT":
        case "ELOOP":
        case "ENAMETOOLONG":
        case "UNKNOWN":
          this.cache[this._makeAbs(f)] = false;
          break;
        default:
          this.cache[this._makeAbs(f)] = false;
          if (this.strict) {
            this.emit("error", er);
            this.abort();
          }
          if (!this.silent)
            console.error("glob error", er);
          break;
      }
      return cb();
    };
    Glob2.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar, cb) {
      var self2 = this;
      this._readdir(abs, inGlobStar, function(er, entries) {
        self2._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
      });
    };
    Glob2.prototype._processGlobStar2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
      if (!entries)
        return cb();
      var remainWithoutGlobStar = remain.slice(1);
      var gspref = prefix ? [prefix] : [];
      var noGlobStar = gspref.concat(remainWithoutGlobStar);
      this._process(noGlobStar, index, false, cb);
      var isSym = this.symlinks[abs];
      var len = entries.length;
      if (isSym && inGlobStar)
        return cb();
      for (var i = 0; i < len; i++) {
        var e = entries[i];
        if (e.charAt(0) === "." && !this.dot)
          continue;
        var instead = gspref.concat(entries[i], remainWithoutGlobStar);
        this._process(instead, index, true, cb);
        var below = gspref.concat(entries[i], remain);
        this._process(below, index, true, cb);
      }
      cb();
    };
    Glob2.prototype._processSimple = function(prefix, index, cb) {
      var self2 = this;
      this._stat(prefix, function(er, exists) {
        self2._processSimple2(prefix, index, er, exists, cb);
      });
    };
    Glob2.prototype._processSimple2 = function(prefix, index, er, exists, cb) {
      if (!this.matches[index])
        this.matches[index] = /* @__PURE__ */ Object.create(null);
      if (!exists)
        return cb();
      if (prefix && isAbsolute(prefix) && !this.nomount) {
        var trail = /[\/\\]$/.test(prefix);
        if (prefix.charAt(0) === "/") {
          prefix = path4.join(this.root, prefix);
        } else {
          prefix = path4.resolve(this.root, prefix);
          if (trail)
            prefix += "/";
        }
      }
      if (process.platform === "win32")
        prefix = prefix.replace(/\\/g, "/");
      this._emitMatch(index, prefix);
      cb();
    };
    Glob2.prototype._stat = function(f, cb) {
      var abs = this._makeAbs(f);
      var needDir = f.slice(-1) === "/";
      if (f.length > this.maxLength)
        return cb();
      if (!this.stat && ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (Array.isArray(c))
          c = "DIR";
        if (!needDir || c === "DIR")
          return cb(null, c);
        if (needDir && c === "FILE")
          return cb();
      }
      var exists;
      var stat = this.statCache[abs];
      if (stat !== void 0) {
        if (stat === false)
          return cb(null, stat);
        else {
          var type = stat.isDirectory() ? "DIR" : "FILE";
          if (needDir && type === "FILE")
            return cb();
          else
            return cb(null, type, stat);
        }
      }
      var self2 = this;
      var statcb = inflight("stat\0" + abs, lstatcb_);
      if (statcb)
        fs6.lstat(abs, statcb);
      function lstatcb_(er, lstat2) {
        if (lstat2 && lstat2.isSymbolicLink()) {
          return fs6.stat(abs, function(er2, stat2) {
            if (er2)
              self2._stat2(f, abs, null, lstat2, cb);
            else
              self2._stat2(f, abs, er2, stat2, cb);
          });
        } else {
          self2._stat2(f, abs, er, lstat2, cb);
        }
      }
    };
    Glob2.prototype._stat2 = function(f, abs, er, stat, cb) {
      if (er) {
        this.statCache[abs] = false;
        return cb();
      }
      var needDir = f.slice(-1) === "/";
      this.statCache[abs] = stat;
      if (abs.slice(-1) === "/" && !stat.isDirectory())
        return cb(null, false, stat);
      var c = stat.isDirectory() ? "DIR" : "FILE";
      this.cache[abs] = this.cache[abs] || c;
      if (needDir && c !== "DIR")
        return cb();
      return cb(null, c, stat);
    };
  }
});

// node_modules/mv/node_modules/rimraf/rimraf.js
var require_rimraf = __commonJS({
  "node_modules/mv/node_modules/rimraf/rimraf.js"(exports2, module2) {
    module2.exports = rimraf;
    rimraf.sync = rimrafSync;
    var assert = require("assert");
    var path4 = require("path");
    var fs6 = require("fs");
    var glob2 = require_glob();
    var globOpts = {
      nosort: true,
      nocomment: true,
      nonegate: true,
      silent: true
    };
    var timeout = 0;
    var isWindows = process.platform === "win32";
    function defaults2(options) {
      var methods = [
        "unlink",
        "chmod",
        "stat",
        "lstat",
        "rmdir",
        "readdir"
      ];
      methods.forEach(function(m) {
        options[m] = options[m] || fs6[m];
        m = m + "Sync";
        options[m] = options[m] || fs6[m];
      });
      options.maxBusyTries = options.maxBusyTries || 3;
      options.emfileWait = options.emfileWait || 1e3;
      options.disableGlob = options.disableGlob || false;
    }
    function rimraf(p, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      assert(p, "rimraf: missing path");
      assert.equal(typeof p, "string", "rimraf: path should be a string");
      assert(options, "rimraf: missing options");
      assert.equal(typeof options, "object", "rimraf: options should be object");
      assert.equal(typeof cb, "function", "rimraf: callback function required");
      defaults2(options);
      var busyTries = 0;
      var errState = null;
      var n = 0;
      if (options.disableGlob || !glob2.hasMagic(p))
        return afterGlob(null, [p]);
      fs6.lstat(p, function(er, stat) {
        if (!er)
          return afterGlob(null, [p]);
        glob2(p, globOpts, afterGlob);
      });
      function next(er) {
        errState = errState || er;
        if (--n === 0)
          cb(errState);
      }
      function afterGlob(er, results) {
        if (er)
          return cb(er);
        n = results.length;
        if (n === 0)
          return cb();
        results.forEach(function(p2) {
          rimraf_(p2, options, function CB(er2) {
            if (er2) {
              if (isWindows && (er2.code === "EBUSY" || er2.code === "ENOTEMPTY" || er2.code === "EPERM") && busyTries < options.maxBusyTries) {
                busyTries++;
                var time = busyTries * 100;
                return setTimeout(function() {
                  rimraf_(p2, options, CB);
                }, time);
              }
              if (er2.code === "EMFILE" && timeout < options.emfileWait) {
                return setTimeout(function() {
                  rimraf_(p2, options, CB);
                }, timeout++);
              }
              if (er2.code === "ENOENT")
                er2 = null;
            }
            timeout = 0;
            next(er2);
          });
        });
      }
    }
    function rimraf_(p, options, cb) {
      assert(p);
      assert(options);
      assert(typeof cb === "function");
      options.lstat(p, function(er, st) {
        if (er && er.code === "ENOENT")
          return cb(null);
        if (st && st.isDirectory())
          return rmdir(p, options, er, cb);
        options.unlink(p, function(er2) {
          if (er2) {
            if (er2.code === "ENOENT")
              return cb(null);
            if (er2.code === "EPERM")
              return isWindows ? fixWinEPERM(p, options, er2, cb) : rmdir(p, options, er2, cb);
            if (er2.code === "EISDIR")
              return rmdir(p, options, er2, cb);
          }
          return cb(er2);
        });
      });
    }
    function fixWinEPERM(p, options, er, cb) {
      assert(p);
      assert(options);
      assert(typeof cb === "function");
      if (er)
        assert(er instanceof Error);
      options.chmod(p, 666, function(er2) {
        if (er2)
          cb(er2.code === "ENOENT" ? null : er);
        else
          options.stat(p, function(er3, stats) {
            if (er3)
              cb(er3.code === "ENOENT" ? null : er);
            else if (stats.isDirectory())
              rmdir(p, options, er, cb);
            else
              options.unlink(p, cb);
          });
      });
    }
    function fixWinEPERMSync(p, options, er) {
      assert(p);
      assert(options);
      if (er)
        assert(er instanceof Error);
      try {
        options.chmodSync(p, 666);
      } catch (er2) {
        if (er2.code === "ENOENT")
          return;
        else
          throw er;
      }
      try {
        var stats = options.statSync(p);
      } catch (er3) {
        if (er3.code === "ENOENT")
          return;
        else
          throw er;
      }
      if (stats.isDirectory())
        rmdirSync(p, options, er);
      else
        options.unlinkSync(p);
    }
    function rmdir(p, options, originalEr, cb) {
      assert(p);
      assert(options);
      if (originalEr)
        assert(originalEr instanceof Error);
      assert(typeof cb === "function");
      options.rmdir(p, function(er) {
        if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
          rmkids(p, options, cb);
        else if (er && er.code === "ENOTDIR")
          cb(originalEr);
        else
          cb(er);
      });
    }
    function rmkids(p, options, cb) {
      assert(p);
      assert(options);
      assert(typeof cb === "function");
      options.readdir(p, function(er, files) {
        if (er)
          return cb(er);
        var n = files.length;
        if (n === 0)
          return options.rmdir(p, cb);
        var errState;
        files.forEach(function(f) {
          rimraf(path4.join(p, f), options, function(er2) {
            if (errState)
              return;
            if (er2)
              return cb(errState = er2);
            if (--n === 0)
              options.rmdir(p, cb);
          });
        });
      });
    }
    function rimrafSync(p, options) {
      options = options || {};
      defaults2(options);
      assert(p, "rimraf: missing path");
      assert.equal(typeof p, "string", "rimraf: path should be a string");
      assert(options, "rimraf: missing options");
      assert.equal(typeof options, "object", "rimraf: options should be object");
      var results;
      if (options.disableGlob || !glob2.hasMagic(p)) {
        results = [p];
      } else {
        try {
          fs6.lstatSync(p);
          results = [p];
        } catch (er) {
          results = glob2.sync(p, globOpts);
        }
      }
      if (!results.length)
        return;
      for (var i = 0; i < results.length; i++) {
        var p = results[i];
        try {
          var st = options.lstatSync(p);
        } catch (er) {
          if (er.code === "ENOENT")
            return;
        }
        try {
          if (st && st.isDirectory())
            rmdirSync(p, options, null);
          else
            options.unlinkSync(p);
        } catch (er) {
          if (er.code === "ENOENT")
            return;
          if (er.code === "EPERM")
            return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
          if (er.code !== "EISDIR")
            throw er;
          rmdirSync(p, options, er);
        }
      }
    }
    function rmdirSync(p, options, originalEr) {
      assert(p);
      assert(options);
      if (originalEr)
        assert(originalEr instanceof Error);
      try {
        options.rmdirSync(p);
      } catch (er) {
        if (er.code === "ENOENT")
          return;
        if (er.code === "ENOTDIR")
          throw originalEr;
        if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
          rmkidsSync(p, options);
      }
    }
    function rmkidsSync(p, options) {
      assert(p);
      assert(options);
      options.readdirSync(p).forEach(function(f) {
        rimrafSync(path4.join(p, f), options);
      });
      options.rmdirSync(p, options);
    }
  }
});

// node_modules/mkdirp/index.js
var require_mkdirp = __commonJS({
  "node_modules/mkdirp/index.js"(exports2, module2) {
    var path4 = require("path");
    var fs6 = require("fs");
    var _0777 = parseInt("0777", 8);
    module2.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;
    function mkdirP(p, opts, f, made) {
      if (typeof opts === "function") {
        f = opts;
        opts = {};
      } else if (!opts || typeof opts !== "object") {
        opts = { mode: opts };
      }
      var mode = opts.mode;
      var xfs = opts.fs || fs6;
      if (mode === void 0) {
        mode = _0777;
      }
      if (!made)
        made = null;
      var cb = f || function() {
      };
      p = path4.resolve(p);
      xfs.mkdir(p, mode, function(er) {
        if (!er) {
          made = made || p;
          return cb(null, made);
        }
        switch (er.code) {
          case "ENOENT":
            if (path4.dirname(p) === p)
              return cb(er);
            mkdirP(path4.dirname(p), opts, function(er2, made2) {
              if (er2)
                cb(er2, made2);
              else
                mkdirP(p, opts, cb, made2);
            });
            break;
          default:
            xfs.stat(p, function(er2, stat) {
              if (er2 || !stat.isDirectory())
                cb(er, made);
              else
                cb(null, made);
            });
            break;
        }
      });
    }
    mkdirP.sync = function sync2(p, opts, made) {
      if (!opts || typeof opts !== "object") {
        opts = { mode: opts };
      }
      var mode = opts.mode;
      var xfs = opts.fs || fs6;
      if (mode === void 0) {
        mode = _0777;
      }
      if (!made)
        made = null;
      p = path4.resolve(p);
      try {
        xfs.mkdirSync(p, mode);
        made = made || p;
      } catch (err0) {
        switch (err0.code) {
          case "ENOENT":
            made = sync2(path4.dirname(p), opts, made);
            sync2(p, opts, made);
            break;
          default:
            var stat;
            try {
              stat = xfs.statSync(p);
            } catch (err1) {
              throw err0;
            }
            if (!stat.isDirectory())
              throw err0;
            break;
        }
      }
      return made;
    };
  }
});

// node_modules/mv/index.js
var require_mv = __commonJS({
  "node_modules/mv/index.js"(exports2, module2) {
    var fs6 = require("fs");
    var ncp = require_ncp().ncp;
    var path4 = require("path");
    var rimraf = require_rimraf();
    var mkdirp = require_mkdirp();
    module2.exports = mv;
    function mv(source, dest, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      var shouldMkdirp = !!options.mkdirp;
      var clobber = options.clobber !== false;
      var limit = options.limit || 16;
      if (shouldMkdirp) {
        mkdirs();
      } else {
        doRename();
      }
      function mkdirs() {
        mkdirp(path4.dirname(dest), function(err) {
          if (err)
            return cb(err);
          doRename();
        });
      }
      function doRename() {
        if (clobber) {
          fs6.rename(source, dest, function(err) {
            if (!err)
              return cb();
            if (err.code !== "EXDEV")
              return cb(err);
            moveFileAcrossDevice(source, dest, clobber, limit, cb);
          });
        } else {
          fs6.link(source, dest, function(err) {
            if (err) {
              if (err.code === "EXDEV") {
                moveFileAcrossDevice(source, dest, clobber, limit, cb);
                return;
              }
              if (err.code === "EISDIR" || err.code === "EPERM") {
                moveDirAcrossDevice(source, dest, clobber, limit, cb);
                return;
              }
              cb(err);
              return;
            }
            fs6.unlink(source, cb);
          });
        }
      }
    }
    function moveFileAcrossDevice(source, dest, clobber, limit, cb) {
      var outFlags = clobber ? "w" : "wx";
      var ins = fs6.createReadStream(source);
      var outs = fs6.createWriteStream(dest, { flags: outFlags });
      ins.on("error", function(err) {
        ins.destroy();
        outs.destroy();
        outs.removeListener("close", onClose);
        if (err.code === "EISDIR" || err.code === "EPERM") {
          moveDirAcrossDevice(source, dest, clobber, limit, cb);
        } else {
          cb(err);
        }
      });
      outs.on("error", function(err) {
        ins.destroy();
        outs.destroy();
        outs.removeListener("close", onClose);
        cb(err);
      });
      outs.once("close", onClose);
      ins.pipe(outs);
      function onClose() {
        fs6.unlink(source, cb);
      }
    }
    function moveDirAcrossDevice(source, dest, clobber, limit, cb) {
      var options = {
        stopOnErr: true,
        clobber: false,
        limit
      };
      if (clobber) {
        rimraf(dest, { disableGlob: true }, function(err) {
          if (err)
            return cb(err);
          startNcp();
        });
      } else {
        startNcp();
      }
      function startNcp() {
        ncp(source, dest, options, function(errList) {
          if (errList)
            return cb(errList[0]);
          rimraf(source, { disableGlob: true }, cb);
        });
      }
    }
  }
});

// node_modules/bunyan/lib/bunyan.js
var require_bunyan = __commonJS({
  "node_modules/bunyan/lib/bunyan.js"(exports2, module2) {
    var VERSION = "1.8.12";
    var LOG_VERSION = 0;
    var xxx = function xxx2(s) {
      var args = ["XXX: " + s].concat(
        Array.prototype.slice.call(arguments, 1)
      );
      console.error.apply(this, args);
    };
    var xxx = function xxx2() {
    };
    var runtimeEnv;
    if (typeof process !== "undefined" && process.versions) {
      if (process.versions.nw) {
        runtimeEnv = "nw";
      } else if (process.versions.node) {
        runtimeEnv = "node";
      }
    }
    if (!runtimeEnv && typeof window !== "undefined" && window.window === window) {
      runtimeEnv = "browser";
    }
    if (!runtimeEnv) {
      throw new Error("unknown runtime environment");
    }
    var os;
    var fs6;
    var dtrace;
    if (runtimeEnv === "browser") {
      os = {
        hostname: function() {
          return window.location.host;
        }
      };
      fs6 = {};
      dtrace = null;
    } else {
      os = require("os");
      fs6 = require("fs");
      try {
        dtrace = require("dtrace-provider");
      } catch (e) {
        dtrace = null;
      }
    }
    var util = require("util");
    var assert = require("assert");
    var EventEmitter2 = require("events").EventEmitter;
    var stream2 = require("stream");
    try {
      safeJsonStringify = require_safe_json_stringify();
    } catch (e) {
      safeJsonStringify = null;
    }
    var safeJsonStringify;
    if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
      safeJsonStringify = null;
    }
    try {
      mv = require_mv();
    } catch (e) {
      mv = null;
    }
    var mv;
    try {
      sourceMapSupport = require("source-map-support");
    } catch (_) {
      sourceMapSupport = null;
    }
    var sourceMapSupport;
    function objCopy(obj) {
      if (obj == null) {
        return obj;
      } else if (Array.isArray(obj)) {
        return obj.slice();
      } else if (typeof obj === "object") {
        var copy = {};
        Object.keys(obj).forEach(function(k) {
          copy[k] = obj[k];
        });
        return copy;
      } else {
        return obj;
      }
    }
    var format = util.format;
    if (!format) {
      inspect = util.inspect;
      formatRegExp = /%[sdj%]/g;
      format = function format2(f) {
        if (typeof f !== "string") {
          var objects = [];
          for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect(arguments[i]));
          }
          return objects.join(" ");
        }
        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function(x2) {
          if (i >= len)
            return x2;
          switch (x2) {
            case "%s":
              return String(args[i++]);
            case "%d":
              return Number(args[i++]);
            case "%j":
              return fastAndSafeJsonStringify(args[i++]);
            case "%%":
              return "%";
            default:
              return x2;
          }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
          if (x === null || typeof x !== "object") {
            str += " " + x;
          } else {
            str += " " + inspect(x);
          }
        }
        return str;
      };
    }
    var inspect;
    var formatRegExp;
    function getCaller3Info() {
      if (this === void 0) {
        return;
      }
      var obj = {};
      var saveLimit = Error.stackTraceLimit;
      var savePrepare = Error.prepareStackTrace;
      Error.stackTraceLimit = 3;
      Error.prepareStackTrace = function(_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
          caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
          obj.func = func;
      };
      Error.captureStackTrace(this, getCaller3Info);
      this.stack;
      Error.stackTraceLimit = saveLimit;
      Error.prepareStackTrace = savePrepare;
      return obj;
    }
    function _indent(s, indent) {
      if (!indent)
        indent = "    ";
      var lines = s.split(/\r?\n/g);
      return indent + lines.join("\n" + indent);
    }
    function _warn(msg, dedupKey) {
      assert.ok(msg);
      if (dedupKey) {
        if (_warned[dedupKey]) {
          return;
        }
        _warned[dedupKey] = true;
      }
      process.stderr.write(msg + "\n");
    }
    function _haveWarned(dedupKey) {
      return _warned[dedupKey];
    }
    var _warned = {};
    function ConsoleRawStream() {
    }
    ConsoleRawStream.prototype.write = function(rec) {
      if (rec.level < INFO) {
        console.log(rec);
      } else if (rec.level < WARN) {
        console.info(rec);
      } else if (rec.level < ERROR2) {
        console.warn(rec);
      } else {
        console.error(rec);
      }
    };
    var TRACE = 10;
    var DEBUG = 20;
    var INFO = 30;
    var WARN = 40;
    var ERROR2 = 50;
    var FATAL = 60;
    var levelFromName = {
      "trace": TRACE,
      "debug": DEBUG,
      "info": INFO,
      "warn": WARN,
      "error": ERROR2,
      "fatal": FATAL
    };
    var nameFromLevel = {};
    Object.keys(levelFromName).forEach(function(name) {
      nameFromLevel[levelFromName[name]] = name;
    });
    var dtp = void 0;
    var probes = dtrace && {};
    function resolveLevel(nameOrNum) {
      var level;
      var type = typeof nameOrNum;
      if (type === "string") {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
          throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
      } else if (type !== "number") {
        throw new TypeError(format(
          "cannot resolve level: invalid arg (%s):",
          type,
          nameOrNum
        ));
      } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format(
          "level is not a positive integer: %s",
          nameOrNum
        ));
      } else {
        level = nameOrNum;
      }
      return level;
    }
    function isWritable2(obj) {
      if (obj instanceof stream2.Writable) {
        return true;
      }
      return typeof obj.write === "function";
    }
    function Logger3(options, _childOptions, _childSimple) {
      xxx("Logger start:", options);
      if (!(this instanceof Logger3)) {
        return new Logger3(options, _childOptions);
      }
      var parent;
      if (_childOptions !== void 0) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger3)) {
          throw new TypeError(
            "invalid Logger creation: do not pass a second arg"
          );
        }
      }
      if (!options) {
        throw new TypeError("options (object) is required");
      }
      if (!parent) {
        if (!options.name) {
          throw new TypeError("options.name (string) is required");
        }
      } else {
        if (options.name) {
          throw new TypeError(
            "invalid options.name: child cannot set logger name"
          );
        }
      }
      if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
      }
      if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError("invalid options.streams: must be an array");
      }
      if (options.serializers && (typeof options.serializers !== "object" || Array.isArray(options.serializers))) {
        throw new TypeError("invalid options.serializers: must be an object");
      }
      EventEmitter2.call(this);
      if (parent && _childSimple) {
        this._isSimpleChild = true;
        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
          var name = parentFieldNames[i];
          fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
          var name = names[i];
          fields[name] = options[name];
        }
        return;
      }
      var self2 = this;
      if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
          var s = objCopy(parent.streams[i]);
          s.closeOnExit = false;
          this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
          this.level(options.level);
        }
      } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
      }
      if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider("bunyan");
        for (var level in levelFromName) {
          var probe;
          probes[levelFromName[level]] = probe = dtp.addProbe("log-" + level, "char *");
          probe.dtp = dtp;
        }
        dtp.enable();
      }
      if (options.stream) {
        self2.addStream({
          type: "stream",
          stream: options.stream,
          closeOnExit: false,
          level: options.level
        });
      } else if (options.streams) {
        options.streams.forEach(function(s2) {
          self2.addStream(s2, options.level);
        });
      } else if (parent && options.level) {
        this.level(options.level);
      } else if (!parent) {
        if (runtimeEnv === "browser") {
          self2.addStream({
            type: "raw",
            stream: new ConsoleRawStream(),
            closeOnExit: false,
            level: options.level
          });
        } else {
          self2.addStream({
            type: "stream",
            stream: process.stdout,
            closeOnExit: false,
            level: options.level
          });
        }
      }
      if (options.serializers) {
        self2.addSerializers(options.serializers);
      }
      if (options.src) {
        this.src = true;
      }
      xxx("Logger: ", self2);
      var fields = objCopy(options);
      delete fields.stream;
      delete fields.level;
      delete fields.streams;
      delete fields.serializers;
      delete fields.src;
      if (this.serializers) {
        this._applySerializers(fields);
      }
      if (!fields.hostname && !self2.fields.hostname) {
        fields.hostname = os.hostname();
      }
      if (!fields.pid) {
        fields.pid = process.pid;
      }
      Object.keys(fields).forEach(function(k) {
        self2.fields[k] = fields[k];
      });
    }
    util.inherits(Logger3, EventEmitter2);
    Logger3.prototype.addStream = function addStream(s, defaultLevel) {
      var self2 = this;
      if (defaultLevel === null || defaultLevel === void 0) {
        defaultLevel = INFO;
      }
      s = objCopy(s);
      if (!s.type) {
        if (s.stream) {
          s.type = "stream";
        } else if (s.path) {
          s.type = "file";
        }
      }
      s.raw = s.type === "raw";
      if (s.level !== void 0) {
        s.level = resolveLevel(s.level);
      } else {
        s.level = resolveLevel(defaultLevel);
      }
      if (s.level < self2._level) {
        self2._level = s.level;
      }
      switch (s.type) {
        case "stream":
          assert.ok(
            isWritable2(s.stream),
            '"stream" stream is not writable: ' + util.inspect(s.stream)
          );
          if (!s.closeOnExit) {
            s.closeOnExit = false;
          }
          break;
        case "file":
          if (s.reemitErrorEvents === void 0) {
            s.reemitErrorEvents = true;
          }
          if (!s.stream) {
            s.stream = fs6.createWriteStream(
              s.path,
              { flags: "a", encoding: "utf8" }
            );
            if (!s.closeOnExit) {
              s.closeOnExit = true;
            }
          } else {
            if (!s.closeOnExit) {
              s.closeOnExit = false;
            }
          }
          break;
        case "rotating-file":
          assert.ok(
            !s.stream,
            '"rotating-file" stream should not give a "stream"'
          );
          assert.ok(s.path);
          assert.ok(mv, '"rotating-file" stream type is not supported: missing "mv" module');
          s.stream = new RotatingFileStream(s);
          if (!s.closeOnExit) {
            s.closeOnExit = true;
          }
          break;
        case "raw":
          if (!s.closeOnExit) {
            s.closeOnExit = false;
          }
          break;
        default:
          throw new TypeError('unknown stream type "' + s.type + '"');
      }
      if (s.reemitErrorEvents && typeof s.stream.on === "function") {
        s.stream.on("error", function onStreamError(err) {
          self2.emit("error", err, s);
        });
      }
      self2.streams.push(s);
      delete self2.haveNonRawStreams;
    };
    Logger3.prototype.addSerializers = function addSerializers(serializers) {
      var self2 = this;
      if (!self2.serializers) {
        self2.serializers = {};
      }
      Object.keys(serializers).forEach(function(field) {
        var serializer = serializers[field];
        if (typeof serializer !== "function") {
          throw new TypeError(format(
            'invalid serializer for "%s" field: must be a function',
            field
          ));
        } else {
          self2.serializers[field] = serializer;
        }
      });
    };
    Logger3.prototype.child = function(options, simple) {
      return new this.constructor(this, options || {}, simple);
    };
    Logger3.prototype.reopenFileStreams = function() {
      var self2 = this;
      self2.streams.forEach(function(s) {
        if (s.type === "file") {
          if (s.stream) {
            s.stream.end();
            s.stream.destroySoon();
            delete s.stream;
          }
          s.stream = fs6.createWriteStream(
            s.path,
            { flags: "a", encoding: "utf8" }
          );
          s.stream.on("error", function(err) {
            self2.emit("error", err, s);
          });
        }
      });
    };
    Logger3.prototype.level = function level(value) {
      if (value === void 0) {
        return this._level;
      }
      var newLevel = resolveLevel(value);
      var len = this.streams.length;
      for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
      }
      this._level = newLevel;
    };
    Logger3.prototype.levels = function levels(name, value) {
      if (name === void 0) {
        assert.equal(value, void 0);
        return this.streams.map(
          function(s2) {
            return s2.level;
          }
        );
      }
      var stream3;
      if (typeof name === "number") {
        stream3 = this.streams[name];
        if (stream3 === void 0) {
          throw new Error("invalid stream index: " + name);
        }
      } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
          var s = this.streams[i];
          if (s.name === name) {
            stream3 = s;
            break;
          }
        }
        if (!stream3) {
          throw new Error(format('no stream with name "%s"', name));
        }
      }
      if (value === void 0) {
        return stream3.level;
      } else {
        var newLevel = resolveLevel(value);
        stream3.level = newLevel;
        if (newLevel < this._level) {
          this._level = newLevel;
        }
      }
    };
    Logger3.prototype._applySerializers = function(fields, excludeFields) {
      var self2 = this;
      xxx("_applySerializers: excludeFields", excludeFields);
      Object.keys(this.serializers).forEach(function(name) {
        if (fields[name] === void 0 || excludeFields && excludeFields[name]) {
          return;
        }
        xxx('_applySerializers; apply to "%s" key', name);
        try {
          fields[name] = self2.serializers[name](fields[name]);
        } catch (err) {
          _warn(format(
            'bunyan: ERROR: Exception thrown from the "%s" Bunyan serializer. This should never happen. This is a bug in that serializer function.\n%s',
            name,
            err.stack || err
          ));
          fields[name] = format('(Error in Bunyan log "%s" serializer broke field. See stderr for details.)', name);
        }
      });
    };
    Logger3.prototype._emit = function(rec, noemit) {
      var i;
      if (this.haveNonRawStreams === void 0) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
          if (!this.streams[i].raw) {
            this.haveNonRawStreams = true;
            break;
          }
        }
      }
      var str;
      if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + "\n";
      }
      if (noemit)
        return str;
      var level = rec.level;
      for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
          xxx(
            'writing log rec "%s" to "%s" stream (%d <= %d): %j',
            rec.msg,
            s.type,
            s.level,
            level,
            rec
          );
          s.stream.write(s.raw ? rec : str);
        }
      }
      ;
      return str;
    };
    function mkRecord(log, minLevel, args) {
      var excludeFields, fields, msgArgs;
      if (args[0] instanceof Error) {
        fields = {
          // Use this Logger's err serializer, if defined.
          err: log.serializers && log.serializers.err ? log.serializers.err(args[0]) : Logger3.stdSerializers.err(args[0])
        };
        excludeFields = { err: true };
        if (args.length === 1) {
          msgArgs = [fields.err.message];
        } else {
          msgArgs = args.slice(1);
        }
      } else if (typeof args[0] !== "object" || Array.isArray(args[0])) {
        fields = null;
        msgArgs = args.slice();
      } else if (Buffer.isBuffer(args[0])) {
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
      } else {
        fields = args[0];
        if (fields && args.length === 1 && fields.err && fields.err instanceof Error) {
          msgArgs = [fields.err.message];
        } else {
          msgArgs = args.slice(1);
        }
      }
      var rec = objCopy(log.fields);
      var level = rec.level = minLevel;
      var recFields = fields ? objCopy(fields) : null;
      if (recFields) {
        if (log.serializers) {
          log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function(k) {
          rec[k] = recFields[k];
        });
      }
      rec.msg = format.apply(log, msgArgs);
      if (!rec.time) {
        rec.time = /* @__PURE__ */ new Date();
      }
      if (log.src && !rec.src) {
        rec.src = getCaller3Info();
      }
      rec.v = LOG_VERSION;
      return rec;
    }
    function mkProbeArgs(str, log, minLevel, msgArgs) {
      return [str || log._emit(mkRecord(log, minLevel, msgArgs), true)];
    }
    function mkLogEmitter(minLevel) {
      return function() {
        var log = this;
        var str = null;
        var rec = null;
        if (!this._emit) {
          var dedupKey = "unbound";
          if (!_haveWarned[dedupKey]) {
            var caller = getCaller3Info();
            _warn(
              format(
                "bunyan usage error: %s:%s: attempt to log with an unbound log method: `this` is: %s",
                caller.file,
                caller.line,
                util.inspect(this)
              ),
              dedupKey
            );
          }
          return;
        } else if (arguments.length === 0) {
          return this._level <= minLevel;
        }
        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
          msgArgs[i] = arguments[i];
        }
        if (this._level <= minLevel) {
          rec = mkRecord(log, minLevel, msgArgs);
          str = this._emit(rec);
        }
        if (probes) {
          probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
      };
    }
    Logger3.prototype.trace = mkLogEmitter(TRACE);
    Logger3.prototype.debug = mkLogEmitter(DEBUG);
    Logger3.prototype.info = mkLogEmitter(INFO);
    Logger3.prototype.warn = mkLogEmitter(WARN);
    Logger3.prototype.error = mkLogEmitter(ERROR2);
    Logger3.prototype.fatal = mkLogEmitter(FATAL);
    Logger3.stdSerializers = {};
    Logger3.stdSerializers.req = function(req) {
      if (!req || !req.connection)
        return req;
      return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
      };
    };
    Logger3.stdSerializers.res = function(res) {
      if (!res || !res.statusCode)
        return res;
      return {
        statusCode: res.statusCode,
        header: res._header
      };
    };
    function getFullErrorStack(ex) {
      var ret = ex.stack || ex.toString();
      if (ex.cause && typeof ex.cause === "function") {
        var cex = ex.cause();
        if (cex) {
          ret += "\nCaused by: " + getFullErrorStack(cex);
        }
      }
      return ret;
    }
    var errSerializer2 = Logger3.stdSerializers.err = function(err) {
      if (!err || !err.stack)
        return err;
      var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
      };
      return obj;
    };
    function safeCyclesSet() {
      var seen = /* @__PURE__ */ new Set();
      return function(key, val) {
        if (!val || typeof val !== "object") {
          return val;
        }
        if (seen.has(val)) {
          return "[Circular]";
        }
        seen.add(val);
        return val;
      };
    }
    function safeCyclesArray() {
      var seen = [];
      return function(key, val) {
        if (!val || typeof val !== "object") {
          return val;
        }
        if (seen.indexOf(val) !== -1) {
          return "[Circular]";
        }
        seen.push(val);
        return val;
      };
    }
    var safeCycles = typeof Set !== "undefined" ? safeCyclesSet : safeCyclesArray;
    function fastAndSafeJsonStringify(rec) {
      try {
        return JSON.stringify(rec);
      } catch (ex) {
        try {
          return JSON.stringify(rec, safeCycles());
        } catch (e) {
          if (safeJsonStringify) {
            return safeJsonStringify(rec);
          } else {
            var dedupKey = e.stack.split(/\n/g, 3).join("\n");
            _warn(
              'bunyan: ERROR: Exception in `JSON.stringify(rec)`. You can install the "safe-json-stringify" module to have Bunyan fallback to safer stringification. Record:\n' + _indent(format("%s\n%s", util.inspect(rec), e.stack)),
              dedupKey
            );
            return format("(Exception in JSON.stringify(rec): %j. See stderr for details.)", e.message);
          }
        }
      }
    }
    var RotatingFileStream = null;
    if (mv) {
      RotatingFileStream = function RotatingFileStream2(options) {
        this.path = options.path;
        this.count = options.count == null ? 10 : options.count;
        assert.equal(
          typeof this.count,
          "number",
          format(
            'rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count,
            typeof this.count,
            this
          )
        );
        assert.ok(
          this.count >= 0,
          format(
            'rotating-file stream "count" is not >= 0: %j in %j',
            this.count,
            this
          )
        );
        if (options.period) {
          var period = {
            "hourly": "1h",
            "daily": "1d",
            "weekly": "1w",
            "monthly": "1m",
            "yearly": "1y"
          }[options.period] || options.period;
          var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
          if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
          }
          this.periodNum = Number(m[1]);
          this.periodScope = m[2];
        } else {
          this.periodNum = 1;
          this.periodScope = "d";
        }
        var lastModified = null;
        try {
          var fileInfo = fs6.statSync(this.path);
          lastModified = fileInfo.mtime.getTime();
        } catch (err) {
        }
        var rotateAfterOpen = false;
        if (lastModified) {
          var lastRotTime = this._calcRotTime(0);
          if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
          }
        }
        this.stream = fs6.createWriteStream(
          this.path,
          { flags: "a", encoding: "utf8" }
        );
        this.rotQueue = [];
        this.rotating = false;
        if (rotateAfterOpen) {
          this._debug("rotateAfterOpen -> call rotate()");
          this.rotate();
        } else {
          this._setupNextRot();
        }
      };
      util.inherits(RotatingFileStream, EventEmitter2);
      RotatingFileStream.prototype._debug = function() {
        if (false) {
          if (arguments.length === 0) {
            return true;
          }
          var args = Array.prototype.slice.call(arguments);
          args[0] = "[" + (/* @__PURE__ */ new Date()).toISOString() + ", " + this.path + "] " + args[0];
          console.log.apply(this, args);
        } else {
          return false;
        }
      };
      RotatingFileStream.prototype._setupNextRot = function() {
        this.rotAt = this._calcRotTime(1);
        this._setRotationTimer();
      };
      RotatingFileStream.prototype._setRotationTimer = function() {
        var self2 = this;
        var delay = this.rotAt - Date.now();
        var TIMEOUT_MAX = 2147483647;
        if (delay > TIMEOUT_MAX) {
          delay = TIMEOUT_MAX;
        }
        this.timeout = setTimeout(
          function() {
            self2._debug("_setRotationTimer timeout -> call rotate()");
            self2.rotate();
          },
          delay
        );
        if (typeof this.timeout.unref === "function") {
          this.timeout.unref();
        }
      };
      RotatingFileStream.prototype._calcRotTime = function _calcRotTime(periodOffset) {
        this._debug("_calcRotTime: %s%s", this.periodNum, this.periodScope);
        var d = /* @__PURE__ */ new Date();
        this._debug("  now local: %s", d);
        this._debug("    now utc: %s", d.toISOString());
        var rotAt;
        switch (this.periodScope) {
          case "ms":
            if (this.rotAt) {
              rotAt = this.rotAt + this.periodNum * periodOffset;
            } else {
              rotAt = Date.now() + this.periodNum * periodOffset;
            }
            break;
          case "h":
            if (this.rotAt) {
              rotAt = this.rotAt + this.periodNum * 60 * 60 * 1e3 * periodOffset;
            } else {
              rotAt = Date.UTC(
                d.getUTCFullYear(),
                d.getUTCMonth(),
                d.getUTCDate(),
                d.getUTCHours() + periodOffset
              );
            }
            break;
          case "d":
            if (this.rotAt) {
              rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1e3 * periodOffset;
            } else {
              rotAt = Date.UTC(
                d.getUTCFullYear(),
                d.getUTCMonth(),
                d.getUTCDate() + periodOffset
              );
            }
            break;
          case "w":
            if (this.rotAt) {
              rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1e3 * periodOffset;
            } else {
              var dayOffset = 7 - d.getUTCDay();
              if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
              }
              if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
              }
              rotAt = Date.UTC(
                d.getUTCFullYear(),
                d.getUTCMonth(),
                d.getUTCDate() + dayOffset
              );
            }
            break;
          case "m":
            if (this.rotAt) {
              rotAt = Date.UTC(
                d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset,
                1
              );
            } else {
              rotAt = Date.UTC(
                d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset,
                1
              );
            }
            break;
          case "y":
            if (this.rotAt) {
              rotAt = Date.UTC(
                d.getUTCFullYear() + this.periodNum * periodOffset,
                0,
                1
              );
            } else {
              rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
            }
            break;
          default:
            assert.fail(format('invalid period scope: "%s"', this.periodScope));
        }
        if (this._debug()) {
          this._debug(
            "  **rotAt**: %s (utc: %s)",
            rotAt,
            new Date(rotAt).toUTCString()
          );
          var now = Date.now();
          this._debug(
            "        now: %s (%sms == %smin == %sh to go)",
            now,
            rotAt - now,
            (rotAt - now) / 1e3 / 60,
            (rotAt - now) / 1e3 / 60 / 60
          );
        }
        return rotAt;
      };
      RotatingFileStream.prototype.rotate = function rotate() {
        var self2 = this;
        if (self2.rotAt && self2.rotAt > Date.now()) {
          return self2._setRotationTimer();
        }
        this._debug("rotate");
        if (self2.rotating) {
          throw new TypeError("cannot start a rotation when already rotating");
        }
        self2.rotating = true;
        self2.stream.end();
        function del() {
          var toDel = self2.path + "." + String(n - 1);
          if (n === 0) {
            toDel = self2.path;
          }
          n -= 1;
          self2._debug("  rm %s", toDel);
          fs6.unlink(toDel, function(delErr) {
            moves();
          });
        }
        function moves() {
          if (self2.count === 0 || n < 0) {
            return finish();
          }
          var before = self2.path;
          var after = self2.path + "." + String(n);
          if (n > 0) {
            before += "." + String(n - 1);
          }
          n -= 1;
          fs6.exists(before, function(exists) {
            if (!exists) {
              moves();
            } else {
              self2._debug("  mv %s %s", before, after);
              mv(before, after, function(mvErr) {
                if (mvErr) {
                  self2.emit("error", mvErr);
                  finish();
                } else {
                  moves();
                }
              });
            }
          });
        }
        function finish() {
          self2._debug("  open %s", self2.path);
          self2.stream = fs6.createWriteStream(
            self2.path,
            { flags: "a", encoding: "utf8" }
          );
          var q = self2.rotQueue, len = q.length;
          for (var i = 0; i < len; i++) {
            self2.stream.write(q[i]);
          }
          self2.rotQueue = [];
          self2.rotating = false;
          self2.emit("drain");
          self2._setupNextRot();
        }
        var n = this.count;
        del();
      };
      RotatingFileStream.prototype.write = function write(s) {
        if (this.rotating) {
          this.rotQueue.push(s);
          return false;
        } else {
          return this.stream.write(s);
        }
      };
      RotatingFileStream.prototype.end = function end(s) {
        this.stream.end();
      };
      RotatingFileStream.prototype.destroy = function destroy(s) {
        this.stream.destroy();
      };
      RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
        this.stream.destroySoon();
      };
    }
    function RingBuffer(options) {
      this.limit = options && options.limit ? options.limit : 100;
      this.writable = true;
      this.records = [];
      EventEmitter2.call(this);
    }
    util.inherits(RingBuffer, EventEmitter2);
    RingBuffer.prototype.write = function(record) {
      if (!this.writable)
        throw new Error("RingBuffer has been ended already");
      this.records.push(record);
      if (this.records.length > this.limit)
        this.records.shift();
      return true;
    };
    RingBuffer.prototype.end = function() {
      if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
      this.writable = false;
    };
    RingBuffer.prototype.destroy = function() {
      this.writable = false;
      this.emit("close");
    };
    RingBuffer.prototype.destroySoon = function() {
      this.destroy();
    };
    module2.exports = Logger3;
    module2.exports.TRACE = TRACE;
    module2.exports.DEBUG = DEBUG;
    module2.exports.INFO = INFO;
    module2.exports.WARN = WARN;
    module2.exports.ERROR = ERROR2;
    module2.exports.FATAL = FATAL;
    module2.exports.resolveLevel = resolveLevel;
    module2.exports.levelFromName = levelFromName;
    module2.exports.nameFromLevel = nameFromLevel;
    module2.exports.VERSION = VERSION;
    module2.exports.LOG_VERSION = LOG_VERSION;
    module2.exports.createLogger = function createLogger(options) {
      return new Logger3(options);
    };
    module2.exports.RingBuffer = RingBuffer;
    module2.exports.RotatingFileStream = RotatingFileStream;
    module2.exports.safeCycles = safeCycles;
  }
});

// node_modules/xtend/node_modules/object-keys/foreach.js
var require_foreach = __commonJS({
  "node_modules/xtend/node_modules/object-keys/foreach.js"(exports2, module2) {
    var hasOwn = Object.prototype.hasOwnProperty;
    var toString = Object.prototype.toString;
    var isFunction = function(fn) {
      var isFunc = typeof fn === "function" && !(fn instanceof RegExp) || toString.call(fn) === "[object Function]";
      if (!isFunc && typeof window !== "undefined") {
        isFunc = fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt;
      }
      return isFunc;
    };
    module2.exports = function forEach(obj, fn) {
      if (!isFunction(fn)) {
        throw new TypeError("iterator must be a function");
      }
      var i, k, isString = typeof obj === "string", l = obj.length, context = arguments.length > 2 ? arguments[2] : null;
      if (l === +l) {
        for (i = 0; i < l; i++) {
          if (context === null) {
            fn(isString ? obj.charAt(i) : obj[i], i, obj);
          } else {
            fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
          }
        }
      } else {
        for (k in obj) {
          if (hasOwn.call(obj, k)) {
            if (context === null) {
              fn(obj[k], k, obj);
            } else {
              fn.call(context, obj[k], k, obj);
            }
          }
        }
      }
    };
  }
});

// node_modules/xtend/node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/xtend/node_modules/object-keys/isArguments.js"(exports2, module2) {
    var toString = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toString.call(value);
      var isArguments2 = str === "[object Arguments]";
      if (!isArguments2) {
        isArguments2 = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toString.call(value.callee) === "[object Function]";
      }
      return isArguments2;
    };
  }
});

// node_modules/xtend/node_modules/object-keys/shim.js
var require_shim = __commonJS({
  "node_modules/xtend/node_modules/object-keys/shim.js"(exports2, module2) {
    (function() {
      "use strict";
      var has = Object.prototype.hasOwnProperty, toString = Object.prototype.toString, forEach = require_foreach(), isArgs = require_isArguments(), hasDontEnumBug = !{ "toString": null }.propertyIsEnumerable("toString"), hasProtoEnumBug = function() {
      }.propertyIsEnumerable("prototype"), dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ], keysShim;
      keysShim = function keys(object2) {
        var isObject = object2 !== null && typeof object2 === "object", isFunction = toString.call(object2) === "[object Function]", isArguments = isArgs(object2), theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        if (isArguments) {
          forEach(object2, function(value) {
            theKeys.push(value);
          });
        } else {
          var name, skipProto = hasProtoEnumBug && isFunction;
          for (name in object2) {
            if (!(skipProto && name === "prototype") && has.call(object2, name)) {
              theKeys.push(name);
            }
          }
        }
        if (hasDontEnumBug) {
          var ctor = object2.constructor, skipConstructor = ctor && ctor.prototype === object2;
          forEach(dontEnums, function(dontEnum) {
            if (!(skipConstructor && dontEnum === "constructor") && has.call(object2, dontEnum)) {
              theKeys.push(dontEnum);
            }
          });
        }
        return theKeys;
      };
      module2.exports = keysShim;
    })();
  }
});

// node_modules/xtend/node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/xtend/node_modules/object-keys/index.js"(exports2, module2) {
    module2.exports = Object.keys || require_shim();
  }
});

// node_modules/xtend/has-keys.js
var require_has_keys = __commonJS({
  "node_modules/xtend/has-keys.js"(exports2, module2) {
    module2.exports = hasKeys;
    function hasKeys(source) {
      return source !== null && (typeof source === "object" || typeof source === "function");
    }
  }
});

// node_modules/xtend/index.js
var require_xtend = __commonJS({
  "node_modules/xtend/index.js"(exports2, module2) {
    var Keys = require_object_keys();
    var hasKeys = require_has_keys();
    module2.exports = extend;
    function extend() {
      var target = {};
      for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];
        if (!hasKeys(source)) {
          continue;
        }
        var keys = Keys(source);
        for (var j = 0; j < keys.length; j++) {
          var name = keys[j];
          target[name] = source[name];
        }
      }
      return target;
    }
  }
});

// node_modules/ansicolors/ansicolors.js
var require_ansicolors = __commonJS({
  "node_modules/ansicolors/ansicolors.js"(exports2, module2) {
    "use strict";
    var colorNums = {
      white: 37,
      black: 30,
      blue: 34,
      cyan: 36,
      green: 32,
      magenta: 35,
      red: 31,
      yellow: 33,
      brightBlack: 90,
      brightRed: 91,
      brightGreen: 92,
      brightYellow: 93,
      brightBlue: 94,
      brightMagenta: 95,
      brightCyan: 96,
      brightWhite: 97
    };
    var backgroundColorNums = {
      bgBlack: 40,
      bgRed: 41,
      bgGreen: 42,
      bgYellow: 43,
      bgBlue: 44,
      bgMagenta: 45,
      bgCyan: 46,
      bgWhite: 47,
      bgBrightBlack: 100,
      bgBrightRed: 101,
      bgBrightGreen: 102,
      bgBrightYellow: 103,
      bgBrightBlue: 104,
      bgBrightMagenta: 105,
      bgBrightCyan: 106,
      bgBrightWhite: 107
    };
    var colors = {};
    Object.keys(colorNums).forEach(function(k) {
      colors[k] = function(s) {
        return "\x1B[" + colorNums[k] + "m" + s + "\x1B[39m";
      };
    });
    Object.keys(backgroundColorNums).forEach(function(k) {
      colors[k] = function(s) {
        return "\x1B[" + backgroundColorNums[k] + "m" + s + "\x1B[49m";
      };
    });
    module2.exports = colors;
  }
});

// node_modules/ansistyles/ansistyles.js
var require_ansistyles = __commonJS({
  "node_modules/ansistyles/ansistyles.js"(exports2, module2) {
    "use strict";
    var styleNums = {
      reset: [0, 22],
      bright: [1, 22],
      dim: [2, 22],
      italic: [3, 23],
      underline: [4, 24],
      blink: [5, 25],
      inverse: [7, 27]
    };
    var styles = {};
    Object.keys(styleNums).forEach(function(k) {
      styles[k] = function(s) {
        var open = styleNums[k][0], close = styleNums[k][1];
        return "\x1B[" + open + "m" + s + "\x1B[" + close + "m";
      };
    });
    module2.exports = styles;
  }
});

// node_modules/bunyan-format/lib/format-record.js
var require_format_record = __commonJS({
  "node_modules/bunyan-format/lib/format-record.js"(exports2, module2) {
    "use strict";
    var util = require("util");
    var format = util.format;
    var http = require("http");
    var xtend = require_xtend();
    var ansicolors = require_ansicolors();
    var ansistyles = require_ansistyles();
    var styles = xtend(ansistyles, ansicolors);
    var OM_LONG = 1;
    var OM_JSON = 2;
    var OM_INSPECT = 3;
    var OM_SIMPLE = 4;
    var OM_SHORT = 5;
    var OM_BUNYAN = 6;
    var OM_FROM_NAME = {
      "long": OM_LONG,
      "json": OM_JSON,
      "inspect": OM_INSPECT,
      "simple": OM_SIMPLE,
      "short": OM_SHORT,
      "bunyan": OM_BUNYAN
    };
    var TRACE = 10;
    var DEBUG = 20;
    var INFO = 30;
    var WARN = 40;
    var ERROR2 = 50;
    var FATAL = 60;
    var levelFromName = {
      "trace": TRACE,
      "debug": DEBUG,
      "info": INFO,
      "warn": WARN,
      "error": ERROR2,
      "fatal": FATAL
    };
    var nameFromLevel = {};
    var upperNameFromLevel = {};
    var upperPaddedNameFromLevel = {};
    Object.keys(levelFromName).forEach(function(name) {
      var lvl = levelFromName[name];
      nameFromLevel[lvl] = name;
      upperNameFromLevel[lvl] = name.toUpperCase();
      upperPaddedNameFromLevel[lvl] = (name.length === 4 ? " " : "") + name.toUpperCase();
    });
    function isValidRecord(rec) {
      if (rec.v === null || rec.level === null || rec.name === null || rec.hostname === null || rec.pid === null || rec.time === null || rec.msg === null) {
        return false;
      } else {
        return true;
      }
    }
    function indent(s) {
      return "  " + s.split(/\r?\n/).join("\n  ");
    }
    function stylizeWithColor(s, color) {
      if (!s)
        return "";
      var fn = styles[color];
      return fn ? fn(s) : s;
    }
    function stylizeWithoutColor(str, color) {
      return str;
    }
    function mapLevelToName(level) {
      switch (level) {
        case TRACE:
          return "TRACE";
        case DEBUG:
          return "DEBUG";
        case INFO:
          return "INFO";
        case WARN:
          return "WARN";
        case ERROR2:
          return "ERROR";
        case FATAL:
          return "FATAL";
      }
    }
    module2.exports = function formatRecord(rec, opts) {
      function _res(res) {
        var s2 = "";
        if (res.header) {
          s2 += res.header.trimRight();
        } else if (res.headers) {
          if (res.statusCode) {
            s2 += format(
              "HTTP/1.1 %s %s\n",
              res.statusCode,
              http.STATUS_CODES[res.statusCode]
            );
          }
          var headers2 = res.headers;
          s2 += Object.keys(headers2).map(
            function(h) {
              return h + ": " + headers2[h];
            }
          ).join("\n");
        }
        delete res.header;
        delete res.headers;
        delete res.statusCode;
        if (res.body) {
          s2 += "\n\n" + (typeof res.body === "object" ? JSON.stringify(res.body, null, 2) : res.body);
          delete res.body;
        }
        if (res.trailer) {
          s2 += "\n" + res.trailer;
        }
        delete res.trailer;
        if (s2) {
          details.push(indent(s2));
        }
        Object.keys(res).forEach(function(k) {
          rec["res." + k] = res[k];
        });
      }
      var short = false;
      var time;
      var line = rec.line;
      var stylize = opts.color ? stylizeWithColor : stylizeWithoutColor;
      var outputMode = isNaN(opts.outputMode) ? OM_FROM_NAME[opts.outputMode] : opts.outputMode;
      switch (outputMode) {
        case OM_SHORT:
          short = true;
        case OM_LONG:
          if (!isValidRecord(rec)) {
            return line + "\n";
          }
          delete rec.v;
          if (short && rec.time[10] == "T") {
            time = rec.time.substr(11);
            time = stylize(time, "brightBlack");
          } else {
            time = stylize("[" + rec.time + "]", "brightBlack");
          }
          delete rec.time;
          var nameStr = rec.name;
          delete rec.name;
          if (rec.component) {
            nameStr += "/" + rec.component;
          }
          delete rec.component;
          if (!short)
            nameStr += "/" + rec.pid;
          delete rec.pid;
          var level = upperPaddedNameFromLevel[rec.level] || "LVL" + rec.level;
          if (opts.color) {
            var colorFromLevel = opts.colorFromLevel || {
              10: "brightBlack",
              // TRACE
              20: "brightBlack",
              // DEBUG
              30: "cyan",
              // INFO
              40: "magenta",
              // WARN
              50: "red",
              // ERROR
              60: "inverse"
              // FATAL
            };
            level = stylize(level, colorFromLevel[rec.level]);
          }
          delete rec.level;
          var src = "";
          var s;
          var headers;
          var hostHeaderLine = "";
          if (rec.src && rec.src.file) {
            s = rec.src;
            if (s.func) {
              src = format(" (%s:%d in %s)", s.file, s.line, s.func);
            } else {
              src = format(" (%s:%d)", s.file, s.line);
            }
            src = stylize(src, "green");
          }
          delete rec.src;
          var hostname = rec.hostname;
          delete rec.hostname;
          var extras = [];
          var details = [];
          if (rec.req_id) {
            extras.push("req_id=" + rec.req_id);
          }
          delete rec.req_id;
          var onelineMsg;
          if (rec.msg.indexOf("\n") !== -1) {
            onelineMsg = "";
            details.push(indent(stylize(rec.msg, "cyan")));
          } else {
            onelineMsg = " " + stylize(rec.msg, "cyan");
          }
          delete rec.msg;
          if (rec.req && typeof rec.req === "object") {
            var req = rec.req;
            delete rec.req;
            headers = req.headers;
            s = format(
              "%s %s HTTP/%s%s",
              req.method,
              req.url,
              req.httpVersion || "1.1",
              headers ? "\n" + Object.keys(headers).map(function(h) {
                return h + ": " + headers[h];
              }).join("\n") : ""
            );
            delete req.url;
            delete req.method;
            delete req.httpVersion;
            delete req.headers;
            if (req.body) {
              s += "\n\n" + (typeof req.body === "object" ? JSON.stringify(req.body, null, 2) : req.body);
              delete req.body;
            }
            if (req.trailers && Object.keys(req.trailers) > 0) {
              s += "\n" + Object.keys(req.trailers).map(function(t) {
                return t + ": " + req.trailers[t];
              }).join("\n");
            }
            delete req.trailers;
            details.push(indent(s));
            Object.keys(req).forEach(function(k) {
              rec["req." + k] = req[k];
            });
          }
          if (rec.client_req && typeof rec.client_req === "object") {
            var client_req = rec.client_req;
            delete rec.client_req;
            headers = client_req.headers;
            s = "";
            if (client_req.address) {
              hostHeaderLine = "Host: " + client_req.address;
              if (client_req.port)
                hostHeaderLine += ":" + client_req.port;
              hostHeaderLine += "\n";
            }
            delete client_req.headers;
            delete client_req.address;
            delete client_req.port;
            s += format(
              "%s %s HTTP/%s\n%s%s",
              client_req.method,
              client_req.url,
              client_req.httpVersion || "1.1",
              hostHeaderLine,
              headers ? Object.keys(headers).map(
                function(h) {
                  return h + ": " + headers[h];
                }
              ).join("\n") : ""
            );
            delete client_req.method;
            delete client_req.url;
            delete client_req.httpVersion;
            if (client_req.body) {
              s += "\n\n" + (typeof client_req.body === "object" ? JSON.stringify(client_req.body, null, 2) : client_req.body);
              delete client_req.body;
            }
            Object.keys(client_req).forEach(function(k) {
              rec["client_req." + k] = client_req[k];
            });
            details.push(indent(s));
          }
          if (rec.res && typeof rec.res === "object") {
            _res(rec.res);
            delete rec.res;
          }
          if (rec.client_res && typeof rec.client_res === "object") {
            _res(rec.client_res);
            delete rec.res;
          }
          if (rec.err && rec.err.stack) {
            details.push(indent(rec.err.stack));
            delete rec.err;
          }
          var leftover = Object.keys(rec);
          for (var i = 0; i < leftover.length; i++) {
            var key = leftover[i];
            var value = rec[key];
            var stringified = false;
            if (typeof value !== "string") {
              value = JSON.stringify(value, null, 2);
              stringified = true;
            }
            if (value.indexOf("\n") !== -1 || value.length > 50) {
              details.push(indent(key + ": " + value));
            } else if (!stringified && (value.indexOf(" ") != -1 || value.length === 0)) {
              extras.push(key + "=" + JSON.stringify(value));
            } else {
              extras.push(key + "=" + value);
            }
          }
          extras = stylize(
            extras.length ? " (" + extras.join(", ") + ")" : "",
            "brightBlack"
          );
          details = stylize(
            details.length ? details.join("\n  --\n") + "\n" : "",
            "brightBlack"
          );
          if (!short)
            return format(
              "%s %s: %s on %s%s:%s%s\n%s",
              time,
              level,
              nameStr,
              hostname || "<no-hostname>",
              src,
              onelineMsg,
              extras,
              details
            );
          else
            return format(
              "%s %s %s:%s%s\n%s",
              time,
              level,
              nameStr,
              onelineMsg,
              extras,
              details
            );
          break;
        case OM_INSPECT:
          return util.inspect(rec, false, Infinity, true) + "\n";
        case OM_BUNYAN:
          if (opts.levelInString) {
            rec.level = mapLevelToName(rec.level);
          }
          return JSON.stringify(rec, null, 0) + "\n";
        case OM_JSON:
          if (opts.levelInString) {
            rec.level = mapLevelToName(rec.level);
          }
          return JSON.stringify(rec, null, opts.jsonIndent) + "\n";
        case OM_SIMPLE:
          if (!isValidRecord(rec)) {
            return line + "\n";
          }
          return format(
            "%s - %s\n",
            upperNameFromLevel[rec.level] || "LVL" + rec.level,
            rec.msg
          );
        default:
          throw new Error("unknown output mode: " + opts.outputMode);
      }
    };
  }
});

// node_modules/bunyan-format/index.js
var require_bunyan_format = __commonJS({
  "node_modules/bunyan-format/index.js"(exports2, module2) {
    "use strict";
    var stream2 = require("stream");
    var util = require("util");
    var formatRecord = require_format_record();
    var xtend = require_xtend();
    var Writable = stream2.Writable;
    module2.exports = BunyanFormatWritable;
    util.inherits(BunyanFormatWritable, Writable);
    function BunyanFormatWritable(opts, out) {
      if (!(this instanceof BunyanFormatWritable))
        return new BunyanFormatWritable(opts, out);
      opts = opts || {};
      opts.objectMode = true;
      Writable.call(this, opts);
      this.opts = xtend({
        outputMode: "short",
        color: true,
        colorFromLevel: {
          10: "brightBlack",
          // TRACE
          20: "brightBlack",
          // DEBUG
          30: "green",
          // INFO
          40: "magenta",
          // WARN
          50: "red",
          // ERROR
          60: "brightRed"
          // FATAL
        }
      }, opts);
      this.out = out || process.stdout;
    }
    BunyanFormatWritable.prototype._write = function(chunk, encoding, cb) {
      var rec;
      try {
        rec = JSON.parse(chunk);
        this.out.write(formatRecord(rec, this.opts));
      } catch (e) {
        this.out.write(chunk);
      }
      cb();
    };
  }
});

// node_modules/ms/index.js
var require_ms2 = __commonJS({
  "node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match2) {
        return;
      }
      var n = parseFloat(match2[1]);
      var type = (match2[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/@testquality/sdk/node_modules/debug/src/common.js
var require_common3 = __commonJS({
  "node_modules/@testquality/sdk/node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env2) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms2();
      createDebug.destroy = destroy;
      Object.keys(env2).forEach((key) => {
        createDebug[key] = env2[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug4(...args) {
          if (!debug4.enabled) {
            return;
          }
          const self2 = debug4;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match2, format) => {
            if (match2 === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match2 = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match2;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug4.namespace = namespace;
        debug4.useColors = createDebug.useColors();
        debug4.color = createDebug.selectColor(namespace);
        debug4.extend = extend;
        debug4.destroy = createDebug.destroy;
        Object.defineProperty(debug4, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug4);
        }
        return debug4;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/@testquality/sdk/node_modules/debug/src/browser.js
var require_browser2 = __commonJS({
  "node_modules/@testquality/sdk/node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = /* @__PURE__ */ (() => {
      let warned2 = false;
      return () => {
        if (!warned2) {
          warned2 = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match2) => {
        if (match2 === "%%") {
          return;
        }
        index++;
        if (match2 === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common3()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/@testquality/sdk/node_modules/debug/src/node.js
var require_node2 = __commonJS({
  "node_modules/@testquality/sdk/node_modules/debug/src/node.js"(exports2, module2) {
    var tty = require("tty");
    var util = require("util");
    exports2.init = init;
    exports2.log = log;
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug4) {
      debug4.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug4.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common3()(exports2);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/@testquality/sdk/node_modules/debug/src/index.js
var require_src2 = __commonJS({
  "node_modules/@testquality/sdk/node_modules/debug/src/index.js"(exports2, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser2();
    } else {
      module2.exports = require_node2();
    }
  }
});

// node_modules/@testquality/sdk/dist/exceptions/ApiException.js
var require_ApiException = __commonJS({
  "node_modules/@testquality/sdk/dist/exceptions/ApiException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/exceptions/HttpError.js
var require_HttpError = __commonJS({
  "node_modules/@testquality/sdk/dist/exceptions/HttpError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpError = void 0;
    var HttpError = class extends Error {
      constructor(message, id, title, status, code, url, trace) {
        super(message);
        this.id = id;
        this.title = title;
        this.status = status;
        this.code = code;
        this.url = url;
        this.trace = trace;
      }
    };
    exports2.HttpError = HttpError;
  }
});

// node_modules/@testquality/sdk/dist/exceptions/GeneralError.js
var require_GeneralError = __commonJS({
  "node_modules/@testquality/sdk/dist/exceptions/GeneralError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GeneralError = exports2.TOKEN = exports2.AUTH = exports2.VERIFICATION = void 0;
    var HttpError_1 = require_HttpError();
    exports2.VERIFICATION = "1001";
    exports2.AUTH = "1002";
    exports2.TOKEN = "1003";
    var GeneralError = class extends HttpError_1.HttpError {
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    exports2.GeneralError = GeneralError;
  }
});

// node_modules/@testquality/sdk/dist/exceptions/ServerError.js
var require_ServerError = __commonJS({
  "node_modules/@testquality/sdk/dist/exceptions/ServerError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  "node_modules/delayed-stream/lib/delayed_stream.js"(exports2, module2) {
    var Stream2 = require("stream").Stream;
    var util = require("util");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util.inherits(DelayedStream, Stream2);
    DelayedStream.create = function(source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on("error", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, "readable", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream2.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this.emit("error", new Error(message));
    };
  }
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  "node_modules/combined-stream/lib/combined_stream.js"(exports2, module2) {
    var util = require("util");
    var Stream2 = require("stream").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util.inherits(CombinedStream, Stream2);
    CombinedStream.create = function(options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream2) {
      return typeof stream2 !== "function" && typeof stream2 !== "string" && typeof stream2 !== "boolean" && typeof stream2 !== "number" && !Buffer.isBuffer(stream2);
    };
    CombinedStream.prototype.append = function(stream2) {
      var isStreamLike = CombinedStream.isStreamLike(stream2);
      if (isStreamLike) {
        if (!(stream2 instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream2, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream2.on("data", this._checkDataSize.bind(this));
          stream2 = newStream;
        }
        this._handleErrors(stream2);
        if (this.pauseStreams) {
          stream2.pause();
        }
      }
      this._streams.push(stream2);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options) {
      Stream2.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream2 = this._streams.shift();
      if (typeof stream2 == "undefined") {
        this.end();
        return;
      }
      if (typeof stream2 !== "function") {
        this._pipeNext(stream2);
        return;
      }
      var getStream = stream2;
      getStream(function(stream3) {
        var isStreamLike = CombinedStream.isStreamLike(stream3);
        if (isStreamLike) {
          stream3.on("data", this._checkDataSize.bind(this));
          this._handleErrors(stream3);
        }
        this._pipeNext(stream3);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream2) {
      this._currentStream = stream2;
      var isStreamLike = CombinedStream.isStreamLike(stream2);
      if (isStreamLike) {
        stream2.on("end", this._getNext.bind(this));
        stream2.pipe(this, { end: false });
        return;
      }
      var value = stream2;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream2) {
      var self2 = this;
      stream2.on("error", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit("data", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
        this._currentStream.pause();
      this.emit("pause");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
        this._currentStream.resume();
      this.emit("resume");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit("end");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit("close");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream2) {
        if (!stream2.dataSize) {
          return;
        }
        self2.dataSize += stream2.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit("error", err);
    };
  }
});

// node_modules/mime-db/db.json
var require_db = __commonJS({
  "node_modules/mime-db/db.json"(exports2, module2) {
    module2.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["ecma", "es"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true
      },
      "application/fhir+json": {
        source: "iana",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana"
      },
      "application/news-groupinfo": {
        source: "iana"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana"
      },
      "application/nss": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana"
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana"
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["keynote"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana"
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana"
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "apache",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana"
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana"
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana"
      },
      "image/avcs": {
        source: "iana"
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana",
        compressible: false
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shex": {
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana"
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vp8": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "node_modules/mime-db/index.js"(exports2, module2) {
    module2.exports = require_db();
  }
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "node_modules/mime-types/index.js"(exports2) {
    "use strict";
    var db = require_mime_db();
    var extname = require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports2.charset = charset;
    exports2.charsets = { lookup: charset };
    exports2.contentType = contentType;
    exports2.extension = extension;
    exports2.extensions = /* @__PURE__ */ Object.create(null);
    exports2.lookup = lookup;
    exports2.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports2.extensions, exports2.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match2 = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match2 && db[match2[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match2 && TEXT_TYPE_REGEXP.test(match2[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports2.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports2.charset(mime);
        if (charset2)
          mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match2 = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match2 && exports2.extensions[match2[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path4) {
      if (!path4 || typeof path4 !== "string") {
        return false;
      }
      var extension2 = extname("x." + path4).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports2.types[extension2] || false;
    }
    function populateMaps(extensions, types2) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types2[extension2]) {
            var from = preference.indexOf(db[types2[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types2[extension2] !== "application/octet-stream" && (from > to || from === to && types2[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types2[extension2] = type;
        }
      });
    }
  }
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  "node_modules/asynckit/lib/defer.js"(exports2, module2) {
    module2.exports = defer2;
    function defer2(fn) {
      var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  "node_modules/asynckit/lib/async.js"(exports2, module2) {
    var defer2 = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer2(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer2(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  "node_modules/asynckit/lib/abort.js"(exports2, module2) {
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == "function") {
        this.jobs[key]();
      }
    }
  }
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  "node_modules/asynckit/lib/iterate.js"(exports2, module2) {
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate2;
    function iterate2(list, iterator, state, callback) {
      var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  "node_modules/asynckit/lib/state.js"(exports2, module2) {
    module2.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list[a], list[b]);
        });
      }
      return initState;
    }
  }
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  "node_modules/asynckit/lib/terminator.js"(exports2, module2) {
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  "node_modules/asynckit/parallel.js"(exports2, module2) {
    var iterate2 = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state["keyedList"] || list).length) {
        iterate2(list, iterator, state, function(error, result) {
          if (error) {
            callback(error, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  "node_modules/asynckit/serialOrdered.js"(exports2, module2) {
    var iterate2 = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate2(list, iterator, state, function iteratorHandler(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        state.index++;
        if (state.index < (state["keyedList"] || list).length) {
          iterate2(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS({
  "node_modules/asynckit/serial.js"(exports2, module2) {
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  }
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  "node_modules/asynckit/index.js"(exports2, module2) {
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  "node_modules/form-data/lib/populate.js"(exports2, module2) {
    module2.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  "node_modules/form-data/lib/form_data.js"(exports2, module2) {
    var CombinedStream = require_combined_stream();
    var util = require("util");
    var path4 = require("path");
    var http = require("http");
    var https = require("https");
    var parseUrl = require("url").parse;
    var fs6 = require("fs");
    var Stream2 = require("stream").Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData6;
    util.inherits(FormData6, CombinedStream);
    function FormData6(options) {
      if (!(this instanceof FormData6)) {
        return new FormData6(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData6.LINE_BREAK = "\r\n";
    FormData6.DEFAULT_CONTENT_TYPE = "application/octet-stream";
    FormData6.prototype.append = function(field, value, options) {
      options = options || {};
      if (typeof options == "string") {
        options = { filename: options };
      }
      var append = CombinedStream.prototype.append.bind(this);
      if (typeof value == "number") {
        value = "" + value;
      }
      if (util.isArray(value)) {
        this._error(new Error("Arrays are not supported."));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append(header);
      append(value);
      append(footer);
      this._trackLength(header, value, options);
    };
    FormData6.prototype._trackLength = function(header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData6.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream2)) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData6.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty("fd")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs6.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty("httpVersion")) {
        callback(null, +value.headers["content-length"]);
      } else if (value.hasOwnProperty("httpModule")) {
        value.on("response", function(response) {
          value.pause();
          callback(null, +response.headers["content-length"]);
        });
        value.resume();
      } else {
        callback("Unknown stream");
      }
    };
    FormData6.prototype._multiPartHeader = function(field, value, options) {
      if (typeof options.header == "string") {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = "";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        "Content-Type": [].concat(contentType || [])
      };
      if (typeof options.header == "object") {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop))
          continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData6.LINE_BREAK;
        }
      }
      return "--" + this.getBoundary() + FormData6.LINE_BREAK + contents + FormData6.LINE_BREAK;
    };
    FormData6.prototype._getContentDisposition = function(value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === "string") {
        filename = path4.normalize(options.filepath).replace(/\\/g, "/");
      } else if (options.filename || value.name || value.path) {
        filename = path4.basename(options.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty("httpVersion")) {
        filename = path4.basename(value.client._httpMessage.path || "");
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData6.prototype._getContentType = function(value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
        contentType = value.headers["content-type"];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == "object") {
        contentType = FormData6.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData6.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData6.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData6.prototype._lastBoundary = function() {
      return "--" + this.getBoundary() + "--" + FormData6.LINE_BREAK;
    };
    FormData6.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData6.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData6.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData6.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== "function") {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
          }
          if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData6.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData6.prototype._generateBoundary = function() {
      var boundary = "--------------------------";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData6.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error("Cannot calculate proper length in synchronous way."));
      }
      return knownLength;
    };
    FormData6.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData6.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData6.prototype.submit = function(params, cb) {
      var request, options, defaults2 = { method: "post" };
      if (typeof params == "string") {
        params = parseUrl(params);
        options = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults2);
      } else {
        options = populate(params, defaults2);
        if (!options.port) {
          options.port = options.protocol == "https:" ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == "https:") {
        request = https.request(options);
      } else {
        request = http.request(options);
      }
      this.getLength(function(err, length) {
        if (err && err !== "Unknown stream") {
          this._error(err);
          return;
        }
        if (length) {
          request.setHeader("Content-Length", length);
        }
        this.pipe(request);
        if (cb) {
          var onResponse;
          var callback = function(error, responce) {
            request.removeListener("error", callback);
            request.removeListener("response", onResponse);
            return cb.call(this, error, responce);
          };
          onResponse = callback.bind(this, null);
          request.on("error", callback);
          request.on("response", onResponse);
        }
      }.bind(this));
      return request;
    };
    FormData6.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
      }
    };
    FormData6.prototype.toString = function() {
      return "[object FormData]";
    };
  }
});

// node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS({
  "node_modules/proxy-from-env/index.js"(exports2) {
    "use strict";
    var parseUrl = require("url").parse;
    var DEFAULT_PORTS = {
      ftp: 21,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var stringEndsWith = String.prototype.endsWith || function(s) {
      return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
    };
    function getProxyForUrl(url) {
      var parsedUrl = typeof url === "string" ? parseUrl(url) : url || {};
      var proto = parsedUrl.protocol;
      var hostname = parsedUrl.host;
      var port = parsedUrl.port;
      if (typeof hostname !== "string" || !hostname || typeof proto !== "string") {
        return "";
      }
      proto = proto.split(":", 1)[0];
      hostname = hostname.replace(/:\d*$/, "");
      port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
      if (!shouldProxy(hostname, port)) {
        return "";
      }
      var proxy = getEnv("npm_config_" + proto + "_proxy") || getEnv(proto + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
      if (proxy && proxy.indexOf("://") === -1) {
        proxy = proto + "://" + proxy;
      }
      return proxy;
    }
    function shouldProxy(hostname, port) {
      var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
      if (!NO_PROXY) {
        return true;
      }
      if (NO_PROXY === "*") {
        return false;
      }
      return NO_PROXY.split(/[,\s]/).every(function(proxy) {
        if (!proxy) {
          return true;
        }
        var parsedProxy = proxy.match(/^(.+):(\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
          return true;
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
          return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === "*") {
          parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        return !stringEndsWith.call(hostname, parsedProxyHostname);
      });
    }
    function getEnv(key) {
      return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || "";
    }
    exports2.getProxyForUrl = getProxyForUrl;
  }
});

// node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  "node_modules/follow-redirects/debug.js"(exports2, module2) {
    var debug4;
    module2.exports = function() {
      if (!debug4) {
        try {
          debug4 = require_src()("follow-redirects");
        } catch (error) {
        }
        if (typeof debug4 !== "function") {
          debug4 = function() {
          };
        }
      }
      debug4.apply(null, arguments);
    };
  }
});

// node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  "node_modules/follow-redirects/index.js"(exports2, module2) {
    var url = require("url");
    var URL2 = url.URL;
    var http = require("http");
    var https = require("https");
    var Writable = require("stream").Writable;
    var assert = require("assert");
    var debug4 = require_debug();
    var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      "ERR_INVALID_URL",
      "Invalid URL",
      TypeError
    );
    var RedirectionError = createErrorType(
      "ERR_FR_REDIRECTION_FAILURE",
      "Redirected request failed"
    );
    var TooManyRedirectsError = createErrorType(
      "ERR_FR_TOO_MANY_REDIRECTS",
      "Maximum number of redirects exceeded"
    );
    var MaxBodyLengthExceededError = createErrorType(
      "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
      "Request body larger than maxBodyLength limit"
    );
    var WriteAfterEndError = createErrorType(
      "ERR_STREAM_WRITE_AFTER_END",
      "write after end"
    );
    var destroy = Writable.prototype.destroy || noop;
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on("response", responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function(response) {
        self2._processResponse(response);
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      destroyRequest(this._currentRequest);
      this._currentRequest.abort();
      this.emit("abort");
    };
    RedirectableRequest.prototype.destroy = function(error) {
      destroyRequest(this._currentRequest, error);
      destroy.call(this, error);
      return this;
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (isFunction(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self2 = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self2._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self2 = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }
      function startTimer(socket) {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
        }
        self2._timeout = setTimeout(function() {
          self2.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
          self2._timeout = null;
        }
        self2.removeListener("abort", clearTimer);
        self2.removeListener("error", clearTimer);
        self2.removeListener("response", clearTimer);
        self2.removeListener("close", clearTimer);
        if (callback) {
          self2.removeListener("timeout", callback);
        }
        if (!self2.socket) {
          self2._currentRequest.removeListener("socket", startTimer);
        }
      }
      if (callback) {
        this.on("timeout", callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once("socket", startTimer);
      }
      this.on("socket", destroyOnTimeout);
      this.on("abort", clearTimer);
      this.on("error", clearTimer);
      this.on("response", clearTimer);
      this.on("close", clearTimer);
      return this;
    };
    [
      "flushHeaders",
      "getHeader",
      "setNoDelay",
      "setSocketKeepAlive"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    ["aborted", "connection", "socket"].forEach(function(property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
          return this._currentRequest[property];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit("error", new TypeError("Unsupported protocol " + protocol));
        return;
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
        // When making a request to a proxy, […]
        // a client MUST send the target URI in absolute-form […].
        this._options.path
      );
      if (this._isRedirect) {
        var i = 0;
        var self2 = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self2._currentRequest) {
            if (error) {
              self2.emit("error", error);
            } else if (i < buffers.length) {
              var buffer = buffers[i++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self2._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        this._requestBodyBuffers = [];
        return;
      }
      destroyRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        this.emit("error", new TooManyRedirectsError());
        return;
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign({
          // The Host header was set by nativeProtocol.request
          Host: response.req.getHeader("host")
        }, this._options.headers);
      }
      var method = this._options.method;
      if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
      var currentUrlParts = url.parse(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl;
      try {
        redirectUrl = url.resolve(currentUrl, location);
      } catch (cause) {
        this.emit("error", new RedirectionError({ cause }));
        return;
      }
      debug4("redirecting to", redirectUrl);
      this._isRedirect = true;
      var redirectUrlParts = url.parse(redirectUrl);
      Object.assign(this._options, redirectUrlParts);
      if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
        removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
      }
      if (isFunction(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders
        };
        try {
          beforeRedirect(this._options, responseDetails, requestDetails);
        } catch (err) {
          this.emit("error", err);
          return;
        }
        this._sanitizeOptions(this._options);
      }
      try {
        this._performRequest();
      } catch (cause) {
        this.emit("error", new RedirectionError({ cause }));
      }
    };
    function wrap(protocols) {
      var exports3 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports3[scheme] = Object.create(nativeProtocol);
        function request(input, options, callback) {
          if (isString(input)) {
            var parsed;
            try {
              parsed = urlToOptions(new URL2(input));
            } catch (err) {
              parsed = url.parse(input);
            }
            if (!isString(parsed.protocol)) {
              throw new InvalidUrlError({ input });
            }
            input = parsed;
          } else if (URL2 && input instanceof URL2) {
            input = urlToOptions(input);
          } else {
            callback = options;
            options = input;
            input = { protocol };
          }
          if (isFunction(options)) {
            callback = options;
            options = null;
          }
          options = Object.assign({
            maxRedirects: exports3.maxRedirects,
            maxBodyLength: exports3.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          if (!isString(options.host) && !isString(options.hostname)) {
            options.hostname = "::1";
          }
          assert.equal(options.protocol, protocol, "protocol mismatch");
          debug4("options", options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports3;
    }
    function noop() {
    }
    function urlToOptions(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith("[") ? (
          /* istanbul ignore next */
          urlObject.hostname.slice(1, -1)
        ) : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href
      };
      if (urlObject.port !== "") {
        options.port = Number(urlObject.port);
      }
      return options;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        Error.captureStackTrace(this, this.constructor);
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = "Error [" + code + "]";
      return CustomError;
    }
    function destroyRequest(request, error) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on("error", noop);
      request.destroy(error);
    }
    function isSubdomain(subdomain, domain) {
      assert(isString(subdomain) && isString(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
    }
    function isString(value) {
      return typeof value === "string" || value instanceof String;
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function isBuffer(value) {
      return typeof value === "object" && "length" in value;
    }
    module2.exports = wrap({ http, https });
    module2.exports.wrap = wrap;
  }
});

// node_modules/axios/dist/node/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/node/axios.cjs"(exports2, module2) {
    "use strict";
    var FormData$1 = require_form_data();
    var url = require("url");
    var proxyFromEnv = require_proxy_from_env();
    var http = require("http");
    var https = require("https");
    var util = require("util");
    var followRedirects = require_follow_redirects();
    var zlib = require("zlib");
    var stream2 = require("stream");
    var EventEmitter2 = require("events");
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var FormData__default = /* @__PURE__ */ _interopDefaultLegacy(FormData$1);
    var url__default = /* @__PURE__ */ _interopDefaultLegacy(url);
    var http__default = /* @__PURE__ */ _interopDefaultLegacy(http);
    var https__default = /* @__PURE__ */ _interopDefaultLegacy(https);
    var util__default = /* @__PURE__ */ _interopDefaultLegacy(util);
    var followRedirects__default = /* @__PURE__ */ _interopDefaultLegacy(followRedirects);
    var zlib__default = /* @__PURE__ */ _interopDefaultLegacy(zlib);
    var stream__default = /* @__PURE__ */ _interopDefaultLegacy(stream2);
    var EventEmitter__default = /* @__PURE__ */ _interopDefaultLegacy(EventEmitter2);
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView2(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream2 = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var utils = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView: isArrayBufferView2,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream: isStream2,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable
    };
    function AxiosError(message, code, config2, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config2 && (this.config = config2);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config2, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config2, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    function isVisitable(thing) {
      return utils.isPlainObject(thing) || utils.isArray(thing);
    }
    function removeBrackets(key) {
      return utils.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path4, key, dots) {
      if (!path4)
        return key;
      return path4.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils.toFlatObject(utils, {}, null, function filter2(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new (FormData__default["default"] || FormData)();
      options = utils.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils.isSpecCompliantForm(formData);
      if (!utils.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path4) {
        let arr = value;
        if (value && !path4 && typeof value === "object") {
          if (utils.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils.isArray(value) && isFlatArray(value) || (utils.isFileList(value) || utils.endsWith(key, "[]")) && (arr = utils.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path4, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path4) {
        if (utils.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path4.join("."));
        }
        stack.push(value);
        utils.forEach(value, function each(el, key) {
          const result = !(utils.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils.isString(key) ? key.trim() : key,
            path4,
            exposedHelpers
          );
          if (result === true) {
            build(el, path4 ? path4.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match2) {
        return charMap[match2];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url2, params, options) {
      if (!params) {
        return url2;
      }
      const _encode = options && options.encode || encode;
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url2.indexOf("#");
        if (hashmarkIndex !== -1) {
          url2 = url2.slice(0, hashmarkIndex);
        }
        url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url2;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams = url__default["default"].URLSearchParams;
    var platform = {
      isNode: true,
      classes: {
        URLSearchParams,
        FormData: FormData__default["default"],
        Blob: typeof Blob !== "undefined" && Blob || null
      },
      protocols: ["http", "https", "file", "data"]
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path4, helpers) {
          if (utils.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils.matchAll(/\w+|\[(\w*)]/g, name).map((match2) => {
        return match2[0] === "[]" ? "" : match2[1] || match2[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path4, value, target, index) {
        let name = path4[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path4.length;
        name = !name && utils.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path4, value, target[name], index);
        if (result && utils.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
        const obj = {};
        utils.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults2 = {
      transitional: transitionalDefaults,
      adapter: "http",
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils.isObject(data);
        if (isObjectPayload && utils.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils.isFormData(data);
        if (isFormData2) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults2.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults2.headers[method] = {};
    });
    var defaults$1 = defaults2;
    var ignoreDuplicateOf = utils.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match2;
      while (match2 = tokensRE.exec(str)) {
        tokens[match2[1]] = match2[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
      if (utils.isFunction(filter2)) {
        return filter2.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils.isString(value))
        return;
      if (utils.isString(filter2)) {
        return value.indexOf(filter2) !== -1;
      }
      if (utils.isRegExp(filter2)) {
        return filter2.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils.forEach(this, (value, header) => {
          const key = utils.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config2 = this || defaults$1;
      const context = response || config2;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(config2, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config2, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config2, request);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve3, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve3(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function isAbsoluteURL(url2) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var VERSION = "1.5.0";
    function parseProtocol(url2) {
      const match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
      return match2 && match2[1] || "";
    }
    var DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
    function fromDataURI(uri, asBlob, options) {
      const _Blob = options && options.Blob || platform.classes.Blob;
      const protocol = parseProtocol(uri);
      if (asBlob === void 0 && _Blob) {
        asBlob = true;
      }
      if (protocol === "data") {
        uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
        const match2 = DATA_URL_PATTERN.exec(uri);
        if (!match2) {
          throw new AxiosError("Invalid URL", AxiosError.ERR_INVALID_URL);
        }
        const mime = match2[1];
        const isBase64 = match2[2];
        const body = match2[3];
        const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
        if (asBlob) {
          if (!_Blob) {
            throw new AxiosError("Blob is not supported", AxiosError.ERR_NOT_SUPPORT);
          }
          return new _Blob([buffer], { type: mime });
        }
        return buffer;
      }
      throw new AxiosError("Unsupported protocol " + protocol, AxiosError.ERR_NOT_SUPPORT);
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      const threshold = 1e3 / freq;
      let timer = null;
      return function throttled(force, args) {
        const now = Date.now();
        if (force || now - timestamp > threshold) {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          timestamp = now;
          return fn.apply(null, args);
        }
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            timestamp = Date.now();
            return fn.apply(null, args);
          }, threshold - (now - timestamp));
        }
      };
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    var kInternals = Symbol("internals");
    var AxiosTransformStream = class extends stream__default["default"].Transform {
      constructor(options) {
        options = utils.toFlatObject(options, {
          maxRate: 0,
          chunkSize: 64 * 1024,
          minChunkSize: 100,
          timeWindow: 500,
          ticksRate: 2,
          samplesCount: 15
        }, null, (prop, source) => {
          return !utils.isUndefined(source[prop]);
        });
        super({
          readableHighWaterMark: options.chunkSize
        });
        const self2 = this;
        const internals = this[kInternals] = {
          length: options.length,
          timeWindow: options.timeWindow,
          ticksRate: options.ticksRate,
          chunkSize: options.chunkSize,
          maxRate: options.maxRate,
          minChunkSize: options.minChunkSize,
          bytesSeen: 0,
          isCaptured: false,
          notifiedBytesLoaded: 0,
          ts: Date.now(),
          bytes: 0,
          onReadCallback: null
        };
        const _speedometer = speedometer(internals.ticksRate * options.samplesCount, internals.timeWindow);
        this.on("newListener", (event) => {
          if (event === "progress") {
            if (!internals.isCaptured) {
              internals.isCaptured = true;
            }
          }
        });
        let bytesNotified = 0;
        internals.updateProgress = throttle(function throttledHandler() {
          const totalBytes = internals.length;
          const bytesTransferred = internals.bytesSeen;
          const progressBytes = bytesTransferred - bytesNotified;
          if (!progressBytes || self2.destroyed)
            return;
          const rate = _speedometer(progressBytes);
          bytesNotified = bytesTransferred;
          process.nextTick(() => {
            self2.emit("progress", {
              "loaded": bytesTransferred,
              "total": totalBytes,
              "progress": totalBytes ? bytesTransferred / totalBytes : void 0,
              "bytes": progressBytes,
              "rate": rate ? rate : void 0,
              "estimated": rate && totalBytes && bytesTransferred <= totalBytes ? (totalBytes - bytesTransferred) / rate : void 0
            });
          });
        }, internals.ticksRate);
        const onFinish = () => {
          internals.updateProgress(true);
        };
        this.once("end", onFinish);
        this.once("error", onFinish);
      }
      _read(size) {
        const internals = this[kInternals];
        if (internals.onReadCallback) {
          internals.onReadCallback();
        }
        return super._read(size);
      }
      _transform(chunk, encoding, callback) {
        const self2 = this;
        const internals = this[kInternals];
        const maxRate = internals.maxRate;
        const readableHighWaterMark = this.readableHighWaterMark;
        const timeWindow = internals.timeWindow;
        const divider = 1e3 / timeWindow;
        const bytesThreshold = maxRate / divider;
        const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
        function pushChunk(_chunk, _callback) {
          const bytes = Buffer.byteLength(_chunk);
          internals.bytesSeen += bytes;
          internals.bytes += bytes;
          if (internals.isCaptured) {
            internals.updateProgress();
          }
          if (self2.push(_chunk)) {
            process.nextTick(_callback);
          } else {
            internals.onReadCallback = () => {
              internals.onReadCallback = null;
              process.nextTick(_callback);
            };
          }
        }
        const transformChunk = (_chunk, _callback) => {
          const chunkSize = Buffer.byteLength(_chunk);
          let chunkRemainder = null;
          let maxChunkSize = readableHighWaterMark;
          let bytesLeft;
          let passed = 0;
          if (maxRate) {
            const now = Date.now();
            if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
              internals.ts = now;
              bytesLeft = bytesThreshold - internals.bytes;
              internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
              passed = 0;
            }
            bytesLeft = bytesThreshold - internals.bytes;
          }
          if (maxRate) {
            if (bytesLeft <= 0) {
              return setTimeout(() => {
                _callback(null, _chunk);
              }, timeWindow - passed);
            }
            if (bytesLeft < maxChunkSize) {
              maxChunkSize = bytesLeft;
            }
          }
          if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
            chunkRemainder = _chunk.subarray(maxChunkSize);
            _chunk = _chunk.subarray(0, maxChunkSize);
          }
          pushChunk(_chunk, chunkRemainder ? () => {
            process.nextTick(_callback, null, chunkRemainder);
          } : _callback);
        };
        transformChunk(chunk, function transformNextChunk(err, _chunk) {
          if (err) {
            return callback(err);
          }
          if (_chunk) {
            transformChunk(_chunk, transformNextChunk);
          } else {
            callback(null);
          }
        });
      }
      setLength(length) {
        this[kInternals].length = +length;
        return this;
      }
    };
    var AxiosTransformStream$1 = AxiosTransformStream;
    var { asyncIterator } = Symbol;
    var readBlob = async function* (blob) {
      if (blob.stream) {
        yield* blob.stream();
      } else if (blob.arrayBuffer) {
        yield await blob.arrayBuffer();
      } else if (blob[asyncIterator]) {
        yield* blob[asyncIterator]();
      } else {
        yield blob;
      }
    };
    var readBlob$1 = readBlob;
    var BOUNDARY_ALPHABET = utils.ALPHABET.ALPHA_DIGIT + "-_";
    var textEncoder = new util.TextEncoder();
    var CRLF = "\r\n";
    var CRLF_BYTES = textEncoder.encode(CRLF);
    var CRLF_BYTES_COUNT = 2;
    var FormDataPart = class {
      constructor(name, value) {
        const { escapeName } = this.constructor;
        const isStringValue = utils.isString(value);
        let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
        if (isStringValue) {
          value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
        } else {
          headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
        }
        this.headers = textEncoder.encode(headers + CRLF);
        this.contentLength = isStringValue ? value.byteLength : value.size;
        this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
        this.name = name;
        this.value = value;
      }
      async *encode() {
        yield this.headers;
        const { value } = this;
        if (utils.isTypedArray(value)) {
          yield value;
        } else {
          yield* readBlob$1(value);
        }
        yield CRLF_BYTES;
      }
      static escapeName(name) {
        return String(name).replace(/[\r\n"]/g, (match2) => ({
          "\r": "%0D",
          "\n": "%0A",
          '"': "%22"
        })[match2]);
      }
    };
    var formDataToStream = (form, headersHandler, options) => {
      const {
        tag = "form-data-boundary",
        size = 25,
        boundary = tag + "-" + utils.generateString(size, BOUNDARY_ALPHABET)
      } = options || {};
      if (!utils.isFormData(form)) {
        throw TypeError("FormData instance required");
      }
      if (boundary.length < 1 || boundary.length > 70) {
        throw Error("boundary must be 10-70 characters long");
      }
      const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
      const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF + CRLF);
      let contentLength = footerBytes.byteLength;
      const parts = Array.from(form.entries()).map(([name, value]) => {
        const part = new FormDataPart(name, value);
        contentLength += part.size;
        return part;
      });
      contentLength += boundaryBytes.byteLength * parts.length;
      contentLength = utils.toFiniteNumber(contentLength);
      const computedHeaders = {
        "Content-Type": `multipart/form-data; boundary=${boundary}`
      };
      if (Number.isFinite(contentLength)) {
        computedHeaders["Content-Length"] = contentLength;
      }
      headersHandler && headersHandler(computedHeaders);
      return stream2.Readable.from(async function* () {
        for (const part of parts) {
          yield boundaryBytes;
          yield* part.encode();
        }
        yield footerBytes;
      }());
    };
    var formDataToStream$1 = formDataToStream;
    var ZlibHeaderTransformStream = class extends stream__default["default"].Transform {
      __transform(chunk, encoding, callback) {
        this.push(chunk);
        callback();
      }
      _transform(chunk, encoding, callback) {
        if (chunk.length !== 0) {
          this._transform = this.__transform;
          if (chunk[0] !== 120) {
            const header = Buffer.alloc(2);
            header[0] = 120;
            header[1] = 156;
            this.push(header, encoding);
          }
        }
        this.__transform(chunk, encoding, callback);
      }
    };
    var ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;
    var callbackify = (fn, reducer) => {
      return utils.isAsyncFn(fn) ? function(...args) {
        const cb = args.pop();
        fn.apply(this, args).then((value) => {
          try {
            reducer ? cb(null, ...reducer(value)) : cb(null, value);
          } catch (err) {
            cb(err);
          }
        }, cb);
      } : fn;
    };
    var callbackify$1 = callbackify;
    var zlibOptions = {
      flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
      finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
    };
    var brotliOptions = {
      flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
      finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
    };
    var isBrotliSupported = utils.isFunction(zlib__default["default"].createBrotliDecompress);
    var { http: httpFollow, https: httpsFollow } = followRedirects__default["default"];
    var isHttps = /https:?/;
    var supportedProtocols = platform.protocols.map((protocol) => {
      return protocol + ":";
    });
    function dispatchBeforeRedirect(options) {
      if (options.beforeRedirects.proxy) {
        options.beforeRedirects.proxy(options);
      }
      if (options.beforeRedirects.config) {
        options.beforeRedirects.config(options);
      }
    }
    function setProxy(options, configProxy, location) {
      let proxy = configProxy;
      if (!proxy && proxy !== false) {
        const proxyUrl = proxyFromEnv.getProxyForUrl(location);
        if (proxyUrl) {
          proxy = new URL(proxyUrl);
        }
      }
      if (proxy) {
        if (proxy.username) {
          proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
        }
        if (proxy.auth) {
          if (proxy.auth.username || proxy.auth.password) {
            proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
          }
          const base64 = Buffer.from(proxy.auth, "utf8").toString("base64");
          options.headers["Proxy-Authorization"] = "Basic " + base64;
        }
        options.headers.host = options.hostname + (options.port ? ":" + options.port : "");
        const proxyHost = proxy.hostname || proxy.host;
        options.hostname = proxyHost;
        options.host = proxyHost;
        options.port = proxy.port;
        options.path = location;
        if (proxy.protocol) {
          options.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
        }
      }
      options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
        setProxy(redirectOptions, configProxy, redirectOptions.href);
      };
    }
    var isHttpAdapterSupported = typeof process !== "undefined" && utils.kindOf(process) === "process";
    var wrapAsync = (asyncExecutor) => {
      return new Promise((resolve3, reject) => {
        let onDone;
        let isDone;
        const done = (value, isRejected) => {
          if (isDone)
            return;
          isDone = true;
          onDone && onDone(value, isRejected);
        };
        const _resolve = (value) => {
          done(value);
          resolve3(value);
        };
        const _reject = (reason) => {
          done(reason, true);
          reject(reason);
        };
        asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
      });
    };
    var httpAdapter = isHttpAdapterSupported && function httpAdapter2(config2) {
      return wrapAsync(async function dispatchHttpRequest(resolve3, reject, onDone) {
        let { data, lookup, family } = config2;
        const { responseType, responseEncoding } = config2;
        const method = config2.method.toUpperCase();
        let isDone;
        let rejected = false;
        let req;
        if (lookup && utils.isAsyncFn(lookup)) {
          lookup = callbackify$1(lookup, (entry) => {
            if (utils.isString(entry)) {
              entry = [entry, entry.indexOf(".") < 0 ? 6 : 4];
            } else if (!utils.isArray(entry)) {
              throw new TypeError("lookup async function must return an array [ip: string, family: number]]");
            }
            return entry;
          });
        }
        const emitter = new EventEmitter__default["default"]();
        const onFinished = () => {
          if (config2.cancelToken) {
            config2.cancelToken.unsubscribe(abort);
          }
          if (config2.signal) {
            config2.signal.removeEventListener("abort", abort);
          }
          emitter.removeAllListeners();
        };
        onDone((value, isRejected) => {
          isDone = true;
          if (isRejected) {
            rejected = true;
            onFinished();
          }
        });
        function abort(reason) {
          emitter.emit("abort", !reason || reason.type ? new CanceledError(null, config2, req) : reason);
        }
        emitter.once("abort", reject);
        if (config2.cancelToken || config2.signal) {
          config2.cancelToken && config2.cancelToken.subscribe(abort);
          if (config2.signal) {
            config2.signal.aborted ? abort() : config2.signal.addEventListener("abort", abort);
          }
        }
        const fullPath = buildFullPath(config2.baseURL, config2.url);
        const parsed = new URL(fullPath, "http://localhost");
        const protocol = parsed.protocol || supportedProtocols[0];
        if (protocol === "data:") {
          let convertedData;
          if (method !== "GET") {
            return settle(resolve3, reject, {
              status: 405,
              statusText: "method not allowed",
              headers: {},
              config: config2
            });
          }
          try {
            convertedData = fromDataURI(config2.url, responseType === "blob", {
              Blob: config2.env && config2.env.Blob
            });
          } catch (err) {
            throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config2);
          }
          if (responseType === "text") {
            convertedData = convertedData.toString(responseEncoding);
            if (!responseEncoding || responseEncoding === "utf8") {
              convertedData = utils.stripBOM(convertedData);
            }
          } else if (responseType === "stream") {
            convertedData = stream__default["default"].Readable.from(convertedData);
          }
          return settle(resolve3, reject, {
            data: convertedData,
            status: 200,
            statusText: "OK",
            headers: new AxiosHeaders$1(),
            config: config2
          });
        }
        if (supportedProtocols.indexOf(protocol) === -1) {
          return reject(new AxiosError(
            "Unsupported protocol " + protocol,
            AxiosError.ERR_BAD_REQUEST,
            config2
          ));
        }
        const headers = AxiosHeaders$1.from(config2.headers).normalize();
        headers.set("User-Agent", "axios/" + VERSION, false);
        const onDownloadProgress = config2.onDownloadProgress;
        const onUploadProgress = config2.onUploadProgress;
        const maxRate = config2.maxRate;
        let maxUploadRate = void 0;
        let maxDownloadRate = void 0;
        if (utils.isSpecCompliantForm(data)) {
          const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
          data = formDataToStream$1(data, (formHeaders) => {
            headers.set(formHeaders);
          }, {
            tag: `axios-${VERSION}-boundary`,
            boundary: userBoundary && userBoundary[1] || void 0
          });
        } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {
          headers.set(data.getHeaders());
          if (!headers.hasContentLength()) {
            try {
              const knownLength = await util__default["default"].promisify(data.getLength).call(data);
              Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
            } catch (e) {
            }
          }
        } else if (utils.isBlob(data)) {
          data.size && headers.setContentType(data.type || "application/octet-stream");
          headers.setContentLength(data.size || 0);
          data = stream__default["default"].Readable.from(readBlob$1(data));
        } else if (data && !utils.isStream(data)) {
          if (Buffer.isBuffer(data))
            ;
          else if (utils.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils.isString(data)) {
            data = Buffer.from(data, "utf-8");
          } else {
            return reject(new AxiosError(
              "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
              AxiosError.ERR_BAD_REQUEST,
              config2
            ));
          }
          headers.setContentLength(data.length, false);
          if (config2.maxBodyLength > -1 && data.length > config2.maxBodyLength) {
            return reject(new AxiosError(
              "Request body larger than maxBodyLength limit",
              AxiosError.ERR_BAD_REQUEST,
              config2
            ));
          }
        }
        const contentLength = utils.toFiniteNumber(headers.getContentLength());
        if (utils.isArray(maxRate)) {
          maxUploadRate = maxRate[0];
          maxDownloadRate = maxRate[1];
        } else {
          maxUploadRate = maxDownloadRate = maxRate;
        }
        if (data && (onUploadProgress || maxUploadRate)) {
          if (!utils.isStream(data)) {
            data = stream__default["default"].Readable.from(data, { objectMode: false });
          }
          data = stream__default["default"].pipeline([data, new AxiosTransformStream$1({
            length: contentLength,
            maxRate: utils.toFiniteNumber(maxUploadRate)
          })], utils.noop);
          onUploadProgress && data.on("progress", (progress) => {
            onUploadProgress(Object.assign(progress, {
              upload: true
            }));
          });
        }
        let auth = void 0;
        if (config2.auth) {
          const username = config2.auth.username || "";
          const password = config2.auth.password || "";
          auth = username + ":" + password;
        }
        if (!auth && parsed.username) {
          const urlUsername = parsed.username;
          const urlPassword = parsed.password;
          auth = urlUsername + ":" + urlPassword;
        }
        auth && headers.delete("authorization");
        let path4;
        try {
          path4 = buildURL(
            parsed.pathname + parsed.search,
            config2.params,
            config2.paramsSerializer
          ).replace(/^\?/, "");
        } catch (err) {
          const customErr = new Error(err.message);
          customErr.config = config2;
          customErr.url = config2.url;
          customErr.exists = true;
          return reject(customErr);
        }
        headers.set(
          "Accept-Encoding",
          "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""),
          false
        );
        const options = {
          path: path4,
          method,
          headers: headers.toJSON(),
          agents: { http: config2.httpAgent, https: config2.httpsAgent },
          auth,
          protocol,
          family,
          beforeRedirect: dispatchBeforeRedirect,
          beforeRedirects: {}
        };
        !utils.isUndefined(lookup) && (options.lookup = lookup);
        if (config2.socketPath) {
          options.socketPath = config2.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
          setProxy(options, config2.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
        }
        let transport;
        const isHttpsRequest = isHttps.test(options.protocol);
        options.agent = isHttpsRequest ? config2.httpsAgent : config2.httpAgent;
        if (config2.transport) {
          transport = config2.transport;
        } else if (config2.maxRedirects === 0) {
          transport = isHttpsRequest ? https__default["default"] : http__default["default"];
        } else {
          if (config2.maxRedirects) {
            options.maxRedirects = config2.maxRedirects;
          }
          if (config2.beforeRedirect) {
            options.beforeRedirects.config = config2.beforeRedirect;
          }
          transport = isHttpsRequest ? httpsFollow : httpFollow;
        }
        if (config2.maxBodyLength > -1) {
          options.maxBodyLength = config2.maxBodyLength;
        } else {
          options.maxBodyLength = Infinity;
        }
        if (config2.insecureHTTPParser) {
          options.insecureHTTPParser = config2.insecureHTTPParser;
        }
        req = transport.request(options, function handleResponse(res) {
          if (req.destroyed)
            return;
          const streams = [res];
          const responseLength = +res.headers["content-length"];
          if (onDownloadProgress) {
            const transformStream = new AxiosTransformStream$1({
              length: utils.toFiniteNumber(responseLength),
              maxRate: utils.toFiniteNumber(maxDownloadRate)
            });
            onDownloadProgress && transformStream.on("progress", (progress) => {
              onDownloadProgress(Object.assign(progress, {
                download: true
              }));
            });
            streams.push(transformStream);
          }
          let responseStream = res;
          const lastRequest = res.req || req;
          if (config2.decompress !== false && res.headers["content-encoding"]) {
            if (method === "HEAD" || res.statusCode === 204) {
              delete res.headers["content-encoding"];
            }
            switch (res.headers["content-encoding"]) {
              case "gzip":
              case "x-gzip":
              case "compress":
              case "x-compress":
                streams.push(zlib__default["default"].createUnzip(zlibOptions));
                delete res.headers["content-encoding"];
                break;
              case "deflate":
                streams.push(new ZlibHeaderTransformStream$1());
                streams.push(zlib__default["default"].createUnzip(zlibOptions));
                delete res.headers["content-encoding"];
                break;
              case "br":
                if (isBrotliSupported) {
                  streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
                  delete res.headers["content-encoding"];
                }
            }
          }
          responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils.noop) : streams[0];
          const offListeners = stream__default["default"].finished(responseStream, () => {
            offListeners();
            onFinished();
          });
          const response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: new AxiosHeaders$1(res.headers),
            config: config2,
            request: lastRequest
          };
          if (responseType === "stream") {
            response.data = responseStream;
            settle(resolve3, reject, response);
          } else {
            const responseBuffer = [];
            let totalResponseBytes = 0;
            responseStream.on("data", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;
              if (config2.maxContentLength > -1 && totalResponseBytes > config2.maxContentLength) {
                rejected = true;
                responseStream.destroy();
                reject(new AxiosError(
                  "maxContentLength size of " + config2.maxContentLength + " exceeded",
                  AxiosError.ERR_BAD_RESPONSE,
                  config2,
                  lastRequest
                ));
              }
            });
            responseStream.on("aborted", function handlerStreamAborted() {
              if (rejected) {
                return;
              }
              const err = new AxiosError(
                "maxContentLength size of " + config2.maxContentLength + " exceeded",
                AxiosError.ERR_BAD_RESPONSE,
                config2,
                lastRequest
              );
              responseStream.destroy(err);
              reject(err);
            });
            responseStream.on("error", function handleStreamError(err) {
              if (req.destroyed)
                return;
              reject(AxiosError.from(err, null, config2, lastRequest));
            });
            responseStream.on("end", function handleStreamEnd() {
              try {
                let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                if (responseType !== "arraybuffer") {
                  responseData = responseData.toString(responseEncoding);
                  if (!responseEncoding || responseEncoding === "utf8") {
                    responseData = utils.stripBOM(responseData);
                  }
                }
                response.data = responseData;
              } catch (err) {
                reject(AxiosError.from(err, null, config2, response.request, response));
              }
              settle(resolve3, reject, response);
            });
          }
          emitter.once("abort", (err) => {
            if (!responseStream.destroyed) {
              responseStream.emit("error", err);
              responseStream.destroy();
            }
          });
        });
        emitter.once("abort", (err) => {
          reject(err);
          req.destroy(err);
        });
        req.on("error", function handleRequestError(err) {
          reject(AxiosError.from(err, null, config2, req));
        });
        req.on("socket", function handleRequestSocket(socket) {
          socket.setKeepAlive(true, 1e3 * 60);
        });
        if (config2.timeout) {
          const timeout = parseInt(config2.timeout, 10);
          if (isNaN(timeout)) {
            reject(new AxiosError(
              "error trying to parse `config.timeout` to int",
              AxiosError.ERR_BAD_OPTION_VALUE,
              config2,
              req
            ));
            return;
          }
          req.setTimeout(timeout, function handleRequestTimeout() {
            if (isDone)
              return;
            let timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
            const transitional = config2.transitional || transitionalDefaults;
            if (config2.timeoutErrorMessage) {
              timeoutErrorMessage = config2.timeoutErrorMessage;
            }
            reject(new AxiosError(
              timeoutErrorMessage,
              transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
              config2,
              req
            ));
            abort();
          });
        }
        if (utils.isStream(data)) {
          let ended = false;
          let errored = false;
          data.on("end", () => {
            ended = true;
          });
          data.once("error", (err) => {
            errored = true;
            req.destroy(err);
          });
          data.on("close", () => {
            if (!ended && !errored) {
              abort(new CanceledError("Request stream has been aborted", config2, req));
            }
          });
          data.pipe(req);
        } else {
          req.end(data);
        }
      });
    };
    var cookies = platform.isStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      /* @__PURE__ */ function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path4, domain, secure) {
            const cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path4)) {
              cookie.push("path=" + path4);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            const match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match2 ? decodeURIComponent(match2[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
    var isURLSameOrigin = platform.isStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url2) {
          let href = url2;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    function progressEventReducer(listener, isDownloadStream) {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return (e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
      };
    }
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config2) {
      return new Promise(function dispatchXhrRequest(resolve3, reject) {
        let requestData = config2.data;
        const requestHeaders = AxiosHeaders$1.from(config2.headers).normalize();
        const responseType = config2.responseType;
        let onCanceled;
        function done() {
          if (config2.cancelToken) {
            config2.cancelToken.unsubscribe(onCanceled);
          }
          if (config2.signal) {
            config2.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {
            requestHeaders.setContentType(false);
          } else {
            requestHeaders.setContentType("multipart/form-data;", false);
          }
        }
        let request = new XMLHttpRequest();
        if (config2.auth) {
          const username = config2.auth.username || "";
          const password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
          requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = buildFullPath(config2.baseURL, config2.url);
        request.open(config2.method.toUpperCase(), buildURL(fullPath, config2.params, config2.paramsSerializer), true);
        request.timeout = config2.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config2,
            request
          };
          settle(function _resolve(value) {
            resolve3(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config2, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config2, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = config2.transitional || transitionalDefaults;
          if (config2.timeoutErrorMessage) {
            timeoutErrorMessage = config2.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config2,
            request
          ));
          request = null;
        };
        if (platform.isStandardBrowserEnv) {
          const xsrfValue = (config2.withCredentials || isURLSameOrigin(fullPath)) && config2.xsrfCookieName && cookies.read(config2.xsrfCookieName);
          if (xsrfValue) {
            requestHeaders.set(config2.xsrfHeaderName, xsrfValue);
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils.isUndefined(config2.withCredentials)) {
          request.withCredentials = !!config2.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config2.responseType;
        }
        if (typeof config2.onDownloadProgress === "function") {
          request.addEventListener("progress", progressEventReducer(config2.onDownloadProgress, true));
        }
        if (typeof config2.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", progressEventReducer(config2.onUploadProgress));
        }
        if (config2.cancelToken || config2.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config2, request) : cancel);
            request.abort();
            request = null;
          };
          config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
          if (config2.signal) {
            config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config2));
          return;
        }
        request.send(requestData || null);
      });
    };
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter
    };
    utils.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          if (adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
            break;
          }
        }
        if (!adapter) {
          if (adapter === false) {
            throw new AxiosError(
              `Adapter ${nameOrAdapter} is not supported by the environment`,
              "ERR_NOT_SUPPORT"
            );
          }
          throw new Error(
            utils.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
          );
        }
        if (!utils.isFunction(adapter)) {
          throw new TypeError("adapter is not a function");
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config2) {
      if (config2.cancelToken) {
        config2.cancelToken.throwIfRequested();
      }
      if (config2.signal && config2.signal.aborted) {
        throw new CanceledError(null, config2);
      }
    }
    function dispatchRequest(config2) {
      throwIfCancellationRequested(config2);
      config2.headers = AxiosHeaders$1.from(config2.headers);
      config2.data = transformData.call(
        config2,
        config2.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
        config2.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config2.adapter || defaults$1.adapter);
      return adapter(config2).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config2);
        response.data = transformData.call(
          config2,
          config2.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config2);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config2,
              config2.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config3 = {};
      function getMergedValue(target, source, caseless) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge.call({ caseless }, target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, caseless) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(void 0, a, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
      };
      utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
      });
      return config3;
    }
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema2, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema2[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      request(configOrUrl, config2) {
        if (typeof configOrUrl === "string") {
          config2 = config2 || {};
          config2.url = configOrUrl;
        } else {
          config2 = configOrUrl || {};
        }
        config2 = mergeConfig(this.defaults, config2);
        const { transitional, paramsSerializer, headers } = config2;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils.isFunction(paramsSerializer)) {
            config2.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils.merge(
          headers.common,
          headers[config2.method]
        );
        headers && utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config2.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config2);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config2;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config2) {
        config2 = mergeConfig(this.defaults, config2);
        const fullPath = buildFullPath(config2.baseURL, config2.url);
        return buildURL(fullPath, config2.params, config2.paramsSerializer);
      }
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url2, config2) {
        return this.request(mergeConfig(config2 || {}, {
          method,
          url: url2,
          data: (config2 || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url2, data, config2) {
          return this.request(mergeConfig(config2 || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url: url2,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve3) {
          resolvePromise = resolve3;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve3) => {
            token.subscribe(resolve3);
            _resolve = resolve3;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config2, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config2, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module2.exports = axios;
  }
});

// node_modules/@testquality/sdk/dist/common/APIWorkerInterface.js
var require_APIWorkerInterface = __commonJS({
  "node_modules/@testquality/sdk/dist/common/APIWorkerInterface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/common/LoggerBase.js
var require_LoggerBase = __commonJS({
  "node_modules/@testquality/sdk/dist/common/LoggerBase.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LoggerBase = void 0;
    var LoggerBase = class _LoggerBase {
      static parsePathToScope(filepath) {
        if (filepath) {
          const sp = filepath.split("/");
          const len = sp.length;
          const filename = sp[len - 1];
          return filename;
        }
        return filepath;
      }
      constructor(scope) {
        this.scope = _LoggerBase.parsePathToScope(scope !== null && scope !== void 0 ? scope : _LoggerBase.DEFAULT_SCOPE);
      }
      debug(message, ...args) {
        this.log("debug", message, ...args);
      }
      info(message, ...args) {
        this.log("info", message, ...args);
      }
      warn(message, ...args) {
        this.log("warn", message, ...args);
      }
      error(message, ...args) {
        this.log("error", message, ...args);
      }
      formatScope() {
        return this.scope !== void 0 ? `[${this.scope}]` : "";
      }
    };
    exports2.LoggerBase = LoggerBase;
    LoggerBase.DEFAULT_SCOPE = "app";
  }
});

// node_modules/@testquality/sdk/dist/common/EmptyLogger.js
var require_EmptyLogger = __commonJS({
  "node_modules/@testquality/sdk/dist/common/EmptyLogger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmptyLogger = void 0;
    var LoggerBase_1 = require_LoggerBase();
    var EmptyLogger = class extends LoggerBase_1.LoggerBase {
      log() {
      }
    };
    exports2.EmptyLogger = EmptyLogger;
  }
});

// node_modules/@testquality/sdk/dist/common/LoggerInterface.js
var require_LoggerInterface = __commonJS({
  "node_modules/@testquality/sdk/dist/common/LoggerInterface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/common/index.js
var require_common4 = __commonJS({
  "node_modules/@testquality/sdk/dist/common/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_APIWorkerInterface(), exports2);
    __exportStar(require_EmptyLogger(), exports2);
    __exportStar(require_LoggerBase(), exports2);
    __exportStar(require_LoggerInterface(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/ClientSdk.js
var require_ClientSdk = __commonJS({
  "node_modules/@testquality/sdk/dist/ClientSdk.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getGlobalClient = exports2.setGlobalClient = exports2.ClientSdk = exports2._client = void 0;
    var axios_1 = __importDefault(require_axios());
    var debug_1 = __importDefault(require_src2());
    var common_1 = require_common4();
    var auth_1 = require_auth2();
    var debug4 = (0, debug_1.default)("tq:sdk:client");
    var ClientSdk2 = class {
      constructor(options) {
        var _a2, _b, _c, _d;
        this.id = Math.random();
        this.errorHandlerDefault = (newError) => {
          this.logger.error(newError.stack ? newError.stack : newError.message, newError.title, newError.status, newError.code, newError.trace);
        };
        this.errorHandler = this.errorHandlerDefault;
        debug4("constructor", { id: this.id, versions: 1, options });
        const baseUrl = (_a2 = options.baseUrl) !== null && _a2 !== void 0 ? _a2 : "https://api.testquality.com";
        this.logger = (_b = options.logger) !== null && _b !== void 0 ? _b : new common_1.EmptyLogger();
        this.api = (_c = options.api) !== null && _c !== void 0 ? _c : axios_1.default.create({
          baseURL: `${baseUrl}/api`,
          timeout: 1e6,
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          transformResponse: [
            function transformResponse(data, headers) {
              if (headers["content-type"] === "application/json") {
                return JSON.parse(data, (_, value) => value === null ? void 0 : value);
              }
              return data;
            }
          ]
        });
        this.apiWorker = options.apiWorker;
        this.clientId = options.clientId;
        this.clientSecret = options.clientSecret;
        this.debug = !!options.debug;
        if (options.errorHandler) {
          this.errorHandler = options.errorHandler;
        }
        this.persistentStorage = options.persistentStorage;
        this.tokenStorage = (_d = options.tokenStorage) !== null && _d !== void 0 ? _d : new auth_1.TokenStorageImpl(options.persistentStorage);
        this.auth = new auth_1.Auth(this.tokenStorage, this, options.authCallback);
      }
      getAuth(authCallback) {
        if (authCallback) {
          console.warn("Param authCallback has been deprecated since version 1.12.11");
        }
        return this.auth;
      }
      /**
       * @deprecated since version 1.12.11
       */
      setAuth() {
        console.warn("Method has been deprecated since version 1.12.11");
        return this.getAuth();
      }
      setErrorHandler(errorHandler) {
        this.errorHandler = errorHandler;
      }
      setAPIWorker(apiWorker) {
        debug4("setAPIWorker");
        if (!this.apiWorker) {
          this.apiWorker = apiWorker;
        }
      }
    };
    exports2.ClientSdk = ClientSdk2;
    function setGlobalClient2(client) {
      exports2._client = client;
    }
    exports2.setGlobalClient = setGlobalClient2;
    function getGlobalClient() {
      if (!exports2._client) {
        throw new Error("No global client has been set up");
      }
      return exports2._client;
    }
    exports2.getGlobalClient = getGlobalClient;
  }
});

// node_modules/@testquality/sdk/dist/exceptions/handleHttpError.js
var require_handleHttpError = __commonJS({
  "node_modules/@testquality/sdk/dist/exceptions/handleHttpError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.showNotificationError = exports2.getHttpResponse = exports2.VALIDATION_FAILED_EXCEPTION = exports2.USER_NOT_FOUND_EXCEPTION = exports2.USER_NOT_AUTHORIZED_EXCEPTION = exports2.USER_CREATE_EXCEPTION = exports2.UPDATE_EXCEPTION = exports2.RUN_CREATE_EXCEPTION = exports2.RESOURCE_STORE_FAILED_EXCEPTION = exports2.PRIMARY_KEY_VIOLATION_EXCEPTION = exports2.PASSWORD_STRENGTH_EXCEPTION = exports2.NO_TOKEN_EXCEPTION = exports2.MAIL_CHIMP_EXCEPTION = exports2.INVALID_TOKEN_EXCEPTION = exports2.INTEGRATION_JIRA_EXCEPTION = exports2.INTEGRATION_EXCEPTION = exports2.INTEGRATION_AUTH_EXCEPTION = exports2.GITHUB_PURCHASE_ALREADY_ALLOCATED_EXCEPTION = exports2.CREATED_BY_INMUTABLE_EXCEPTION = exports2.CLIENT_ID_INMUTABLE_EXCEPTION = exports2.CHANGE_PASSWORD_FAILURE_EXCEPTION = exports2.EXPIRED_USER_EXCEPTION = exports2.EMAIL_VERIFICATION_ERROR = exports2.VALIDATION_ERROR = exports2.UNAUTHORIZED = exports2.REFRESH_TOKEN_ERROR = exports2.NO_REFRESH_TOKEN = exports2.NO_ACCESS_TOKEN = exports2.UNKNOWN_ERROR = void 0;
    var HttpError_1 = require_HttpError();
    var ClientSdk_1 = require_ClientSdk();
    exports2.UNKNOWN_ERROR = "UNKNOWN_ERROR";
    exports2.NO_ACCESS_TOKEN = "NO_ACCESS_TOKEN";
    exports2.NO_REFRESH_TOKEN = "NO_REFRESH_TOKEN";
    exports2.REFRESH_TOKEN_ERROR = "REFRESH_TOKEN_ERROR";
    exports2.UNAUTHORIZED = "UNAUTHORIZED";
    exports2.VALIDATION_ERROR = "VALIDATION_ERROR";
    exports2.EMAIL_VERIFICATION_ERROR = "EMAIL_VERIFICATION_ERROR";
    exports2.EXPIRED_USER_EXCEPTION = "EXPIRED_USER_EXCEPTION";
    exports2.CHANGE_PASSWORD_FAILURE_EXCEPTION = "CHANGE_PASSWORD_FAILURE_EXCEPTION";
    exports2.CLIENT_ID_INMUTABLE_EXCEPTION = "CLIENT_ID_INMUTABLE_EXCEPTION";
    exports2.CREATED_BY_INMUTABLE_EXCEPTION = "CREATED_BY_INMUTABLE_EXCEPTION";
    exports2.GITHUB_PURCHASE_ALREADY_ALLOCATED_EXCEPTION = "GITHUB_PURCHASE_ALREADY_ALLOCATED_EXCEPTION";
    exports2.INTEGRATION_AUTH_EXCEPTION = "INTEGRATION_AUTH_EXCEPTION";
    exports2.INTEGRATION_EXCEPTION = "INTEGRATION_EXCEPTION";
    exports2.INTEGRATION_JIRA_EXCEPTION = "INTEGRATION_JIRA_EXCEPTION";
    exports2.INVALID_TOKEN_EXCEPTION = "INVALID_TOKEN_EXCEPTION";
    exports2.MAIL_CHIMP_EXCEPTION = "MAIL_CHIMP_EXCEPTION";
    exports2.NO_TOKEN_EXCEPTION = "NO_TOKEN_EXCEPTION";
    exports2.PASSWORD_STRENGTH_EXCEPTION = "PASSWORD_STRENGTH_EXCEPTION";
    exports2.PRIMARY_KEY_VIOLATION_EXCEPTION = "PRIMARY_KEY_VIOLATION_EXCEPTION";
    exports2.RESOURCE_STORE_FAILED_EXCEPTION = "RESOURCE_STORE_FAILED_EXCEPTION";
    exports2.RUN_CREATE_EXCEPTION = "RUN_CREATE_EXCEPTION";
    exports2.UPDATE_EXCEPTION = "UPDATE_EXCEPTION";
    exports2.USER_CREATE_EXCEPTION = "USER_CREATE_EXCEPTION";
    exports2.USER_NOT_AUTHORIZED_EXCEPTION = "USER_NOT_AUTHORIZED_EXCEPTION";
    exports2.USER_NOT_FOUND_EXCEPTION = "USER_NOT_FOUND_EXCEPTION";
    exports2.VALIDATION_FAILED_EXCEPTION = "VALIDATION_FAILED_EXCEPTION";
    function getHttpResponse(response) {
      var _a2, _b, _c, _d, _e, _f, _g, _h;
      if (response === void 0 || response.status === -1) {
        if (response === void 0 || response.data === null) {
          return new HttpError_1.HttpError("Oops, Could not obtain data from server due to network problem.", exports2.UNKNOWN_ERROR, "Network Error", 500, void 0, (_a2 = response === null || response === void 0 ? void 0 : response.config) === null || _a2 === void 0 ? void 0 : _a2.url);
        }
      } else if (response.status === 400 && ((_b = response.data) === null || _b === void 0 ? void 0 : _b.validation_errors)) {
        return new HttpError_1.HttpError(getMessage(response), exports2.VALIDATION_ERROR, response.data.validation_errors, response.status, response.data.code, (_c = response === null || response === void 0 ? void 0 : response.config) === null || _c === void 0 ? void 0 : _c.url, response.data.trace);
      }
      return new HttpError_1.HttpError(getMessage(response), (_d = response === null || response === void 0 ? void 0 : response.data) === null || _d === void 0 ? void 0 : _d.id, (_e = response === null || response === void 0 ? void 0 : response.data) === null || _e === void 0 ? void 0 : _e.title, response === null || response === void 0 ? void 0 : response.status, (_f = response === null || response === void 0 ? void 0 : response.data) === null || _f === void 0 ? void 0 : _f.code, (_g = response === null || response === void 0 ? void 0 : response.config) === null || _g === void 0 ? void 0 : _g.url, (_h = response === null || response === void 0 ? void 0 : response.data) === null || _h === void 0 ? void 0 : _h.trace);
    }
    exports2.getHttpResponse = getHttpResponse;
    function showNotificationError(newError, client = ClientSdk_1._client) {
      if (!client) {
        throw new Error("No global client has been set up");
      }
      client.errorHandler(newError);
      return newError;
    }
    exports2.showNotificationError = showNotificationError;
    function getMessage(error) {
      var _a2, _b, _c, _d, _e, _f, _g;
      if (!error)
        return "Trouble communicating with server, please try again later.";
      let message = "";
      if (error.exception && !error.data) {
        error.data = error.exception;
      }
      if (error.status === 404 && !((_a2 = error === null || error === void 0 ? void 0 : error.data) === null || _a2 === void 0 ? void 0 : _a2.message)) {
        message = "Resource Not Found.";
      } else if (error.status === -1 && error.data === null) {
        message = "Oops, Could not obtain data from server due to network problem.";
      } else if (((_b = error.data) === null || _b === void 0 ? void 0 : _b.code) === "23505") {
        error.data.title = "Duplicate";
        message = "Name already exists, try a different name.";
      } else if ((_d = (_c = error.data) === null || _c === void 0 ? void 0 : _c.validation_errors) === null || _d === void 0 ? void 0 : _d.email) {
        if (Array.isArray(error.data.validation_errors.email)) {
          message = error.data.validation_errors.email.join(", \n");
        } else {
          message = error.data.validation_errors.email;
        }
      } else if ((_e = error.data) === null || _e === void 0 ? void 0 : _e.message) {
        if (typeof error.data.message === "string") {
          message = error.data.message;
        } else if (typeof error.data.message === "object") {
          for (const key in error.data.message) {
            if (Object.prototype.hasOwnProperty.call(error.data.message, key)) {
              if (Array.isArray(error.data.message[key])) {
                message = error.data.message[key].join(", \n");
              } else {
                message = error.data.message[key];
              }
            }
          }
        } else {
          message = JSON.stringify(error.data.message);
        }
        if (error.data.errors) {
          message += Object.entries(error.data.errors).map(([, value]) => `
${value}`).join("");
        }
      } else if ((_f = error.data) === null || _f === void 0 ? void 0 : _f.error) {
        message = error.data.error;
      } else if ((_g = error.data) === null || _g === void 0 ? void 0 : _g.detail) {
        message = error.data.detail;
      } else if (error.statusText) {
        message = error.statusText;
      } else if (error.message) {
        message = error.message;
      } else if (error.status === 401) {
        message = "Failed to authenticate.";
      } else {
        message = "Something went wrong";
      }
      return message;
    }
  }
});

// node_modules/@testquality/sdk/dist/exceptions/index.js
var require_exceptions = __commonJS({
  "node_modules/@testquality/sdk/dist/exceptions/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_ApiException(), exports2);
    __exportStar(require_GeneralError(), exports2);
    __exportStar(require_HttpError(), exports2);
    __exportStar(require_ServerError(), exports2);
    __exportStar(require_handleHttpError(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/gen/actions/DataParams.js
var require_DataParams = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/actions/DataParams.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/actions/LookupIntegrationParams.js
var require_LookupIntegrationParams = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/actions/LookupIntegrationParams.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/actions/MessageResponse.js
var require_MessageResponse = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/actions/MessageResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/actions/QueryParams.js
var require_QueryParams = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/actions/QueryParams.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasListProperty = void 0;
    function hasListProperty(queryParams) {
      return "list" in queryParams;
    }
    exports2.hasListProperty = hasListProperty;
  }
});

// node_modules/@testquality/sdk/dist/gen/actions/TQRequestParameters.js
var require_TQRequestParameters = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/actions/TQRequestParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/actions/getResponse.js
var require_getResponse = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/actions/getResponse.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve3) {
          resolve3(value);
        });
      }
      return new (P || (P = Promise))(function(resolve3, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve3(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResponse = void 0;
    var QueryParams_1 = require_QueryParams();
    function getResponse7(api, queryParams) {
      var _a2;
      return __awaiter(this, void 0, void 0, function* () {
        if (!api) {
          throw new Error("No clientSkd.api provided");
        }
        const resp = yield api.request({
          method: (_a2 = queryParams.method) !== null && _a2 !== void 0 ? _a2 : "get",
          url: queryParams.url,
          params: queryParams.params,
          data: (0, QueryParams_1.hasListProperty)(queryParams) ? queryParams.list : queryParams.data,
          headers: queryParams.headers
        });
        if (resp && resp.data) {
          return resp.data;
        }
        throw new Error("No response was provided");
      });
    }
    exports2.getResponse = getResponse7;
  }
});

// node_modules/@testquality/sdk/dist/gen/actions/index.js
var require_actions = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/actions/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_DataParams(), exports2);
    __exportStar(require_LookupIntegrationParams(), exports2);
    __exportStar(require_MessageResponse(), exports2);
    __exportStar(require_QueryParams(), exports2);
    __exportStar(require_TQRequestParameters(), exports2);
    __exportStar(require_getResponse(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/services/auth/getSubscriptionEntitlement.js
var require_getSubscriptionEntitlement = __commonJS({
  "node_modules/@testquality/sdk/dist/services/auth/getSubscriptionEntitlement.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSubscriptionEntitlement = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getSubscriptionEntitlement = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/entitlement",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getSubscriptionEntitlement = getSubscriptionEntitlement;
  }
});

// node_modules/@testquality/sdk/dist/services/auth/index.js
var require_auth = __commonJS({
  "node_modules/@testquality/sdk/dist/services/auth/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_getSubscriptionEntitlement(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/auth/Auth.js
var require_Auth = __commonJS({
  "node_modules/@testquality/sdk/dist/auth/Auth.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve3) {
          resolve3(value);
        });
      }
      return new (P || (P = Promise))(function(resolve3, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve3(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Auth = exports2.AuthCallbackActions = void 0;
    var debug_1 = __importDefault(require_src2());
    var exceptions_1 = require_exceptions();
    var auth_1 = require_auth();
    var debug4 = (0, debug_1.default)("tq:sdk:Auth");
    var grantPath = "/oauth/access_token";
    var ssoPath = "/sso";
    var doesNotRequireAuth = [
      "auth/login",
      "auth/register",
      "email-verification/check",
      "email-verification/error",
      "oauth/access_token",
      "system/auth/begin_password_reset",
      "system/auth/complete_invite_user",
      "system/auth/complete_password_reset",
      "system/create_client",
      "system/github/authorize",
      "system/sign_up_with_email",
      "system/validate_site_name",
      "system/auth/complete_share_invite",
      "system/auth/complete_magic_share_invite"
    ];
    var AuthCallbackActions;
    (function(AuthCallbackActions2) {
      AuthCallbackActions2[AuthCallbackActions2["Connected"] = 1] = "Connected";
      AuthCallbackActions2[AuthCallbackActions2["Refreshed"] = 2] = "Refreshed";
      AuthCallbackActions2[AuthCallbackActions2["Unauthorized"] = 3] = "Unauthorized";
      AuthCallbackActions2[AuthCallbackActions2["SubscriptionExpired"] = 4] = "SubscriptionExpired";
      AuthCallbackActions2[AuthCallbackActions2["TrialExpired"] = 5] = "TrialExpired";
      AuthCallbackActions2[AuthCallbackActions2["TokenUpdated"] = 6] = "TokenUpdated";
    })(AuthCallbackActions || (exports2.AuthCallbackActions = AuthCallbackActions = {}));
    var Auth = class _Auth {
      static validateTokenPayload(token) {
        debug4("validateTokenPayload: %j", token);
        if (token === null || token === void 0 ? void 0 : token.error) {
          throw new exceptions_1.GeneralError(token.error, exceptions_1.TOKEN);
        } else if (token === null || token === void 0 ? void 0 : token.message) {
          throw new exceptions_1.GeneralError(token.message, exceptions_1.TOKEN);
        } else if (token === null || token === void 0 ? void 0 : token.verification_ended_at) {
          throw new exceptions_1.GeneralError("Email verification is required to login", exceptions_1.VERIFICATION);
        } else if (!(token === null || token === void 0 ? void 0 : token.access_token)) {
          throw new exceptions_1.GeneralError("Auth failed", exceptions_1.AUTH);
        }
        debug4("validateTokenPayload: ok");
      }
      static urlRequiresAuth(url) {
        if (!url)
          return false;
        for (let i = 0; i < doesNotRequireAuth.length; i += 1) {
          if (url.match(new RegExp(doesNotRequireAuth[i]))) {
            return false;
          }
        }
        return true;
      }
      constructor(tokenStorage, client, authCallback) {
        this.tokenStorage = tokenStorage;
        this.client = client;
        this.authCallback = authCallback;
        this.disableHandler = false;
        this.id = Math.random();
        this.remember = true;
        this.setAuthCallback(authCallback);
        this.addInterceptors();
      }
      setAuthCallback(authCallback) {
        this.authCallback = authCallback;
        if (this.client.apiWorker) {
          this.client.apiWorker.setAuthCallback((action, token) => __awaiter(this, void 0, void 0, function* () {
            if (action === AuthCallbackActions.TokenUpdated) {
              debug4("token updated in apiWorker");
              yield this.tokenStorage.setToken(token);
            }
            if (this.authCallback) {
              yield this.authCallback(action, token);
            }
          }));
        }
      }
      passwordRecovery(email) {
        return this.client.api.get(`/system/auth/begin_password_reset/${email}`, {
          params: {
            is_web: true
          }
        });
      }
      passwordReset(email, password, token) {
        return this.client.api.post("/system/auth/complete_password_reset", {
          email,
          password,
          token
        });
      }
      login(username, password, remember = false, share, properties) {
        this.remember = remember;
        return this.client.api.post(grantPath, Object.assign({
          grant_type: "password",
          client_id: this.client.clientId,
          client_secret: this.client.clientSecret,
          username,
          password,
          share
        }, properties)).then((res) => this.performLogin(res.data));
      }
      loginSSO(username, callbackUrl, share) {
        return this.client.api.post(`${ssoPath}/openid`, {
          client_id: this.client.clientId,
          client_secret: this.client.clientSecret,
          username,
          callbackUrl,
          share
        }).then((res) => ({ redirect_url: res.data.redirect_url }));
      }
      loginGithub(callbackUrl, verificationToken, appVersion, type, share) {
        return this.client.api.post(`${ssoPath}/github`, {
          callbackUrl,
          verificationToken,
          appVersion,
          type,
          share
        }).then((res) => ({ redirect_url: res.data.redirect_url }));
      }
      loginGoogle(callbackUrl, verificationToken, type, share) {
        return this.client.api.post(`${ssoPath}/google`, {
          callbackUrl,
          verificationToken,
          type,
          share
        }).then((res) => ({ redirect_url: res.data.redirect_url }));
      }
      loginAtlassian(callbackUrl, type, share) {
        return this.client.api.post(`${ssoPath}/atlassian`, { callbackUrl, type, share }).then((res) => ({ redirect_url: res.data.redirect_url }));
      }
      performLogin(token) {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.setToken(token, this.remember);
          yield this.handleExpired(token);
          this.client.logger.info("Logged In");
          if (this.authCallback) {
            yield this.authCallback(AuthCallbackActions.Connected, token, this);
          }
          return token;
        });
      }
      logout() {
        return this.setToken(void 0, void 0);
      }
      register(email, password, recaptcha) {
        return this.client.api.post("auth/register", {
          client_id: this.client.clientId,
          email,
          g_recaptcha_response: recaptcha,
          password_confirmation: password,
          password,
          is_web: true
        });
      }
      registerSite(email, password, site, recaptcha, type) {
        return this.client.api.post("/system/create_client", {
          name: site,
          development: false,
          g_recaptcha_response: recaptcha,
          is_web: true,
          type,
          user: {
            email,
            password,
            password_confirmation: password,
            g_recaptcha_response: recaptcha
          }
        });
      }
      signUpWithEmail(data, config2) {
        return this.client.api.post("/system/sign_up_with_email", data, config2).then((res) => this.performLogin(res.data));
      }
      refresh(refreshToken) {
        var _a2;
        return __awaiter(this, void 0, void 0, function* () {
          if (this.refreshRequest) {
            debug4("refresh: in process");
            return yield this.refreshRequest.then(({ data }) => __awaiter(this, void 0, void 0, function* () {
              debug4("refresh: resolved");
              return data;
            })).catch((err) => {
              debug4("refresh: error", err);
              return void 0;
            });
          }
          let token = refreshToken;
          if (!token) {
            if (!(yield this.isLoggedIn())) {
              debug4("refresh: not authenticated");
              return void 0;
            }
            token = (_a2 = yield this.getToken()) === null || _a2 === void 0 ? void 0 : _a2.refresh_token;
            if (!token) {
              yield this.logout();
              return yield Promise.reject(new exceptions_1.HttpError("No refresh token found.", exceptions_1.NO_REFRESH_TOKEN, "Token Error", 400, exceptions_1.NO_REFRESH_TOKEN));
            }
          }
          debug4("refreshRequest: starting", token);
          this.refreshRequest = this.client.api.request({
            method: "post",
            url: grantPath,
            data: {
              grant_type: "refresh_token",
              client_id: this.client.clientId,
              client_secret: this.client.clientSecret,
              refresh_token: token
            }
          });
          return yield this.refreshRequest.then((response) => __awaiter(this, void 0, void 0, function* () {
            const data = response.data;
            yield this.setToken(data, this.remember);
            yield this.handleExpired(data);
            if (this.authCallback) {
              yield this.authCallback(AuthCallbackActions.Refreshed, data, this);
            }
            debug4("refreshRequest: ok");
            return data;
          })).catch((error) => __awaiter(this, void 0, void 0, function* () {
            var _b;
            yield this.logout();
            debug4("refreshRequest error:", (_b = error === null || error === void 0 ? void 0 : error.message) !== null && _b !== void 0 ? _b : error);
            return yield Promise.reject(new exceptions_1.HttpError("Could not refresh token.", exceptions_1.REFRESH_TOKEN_ERROR, "Refresh Token Error", 400, exceptions_1.REFRESH_TOKEN_ERROR));
          })).finally(() => {
            debug4("refreshRequest: finished");
            this.refreshRequest = void 0;
          });
        });
      }
      getAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
          let token = yield this.getToken();
          if (token) {
            if (token.expires_at) {
              const expiresAt = new Date(token.expires_at);
              const diff = expiresAt.getTime() - (/* @__PURE__ */ new Date()).getTime();
              if (diff < 0) {
                debug4("getAccessToken: token expired, refreshing");
                token = yield this.refresh();
              }
            }
            return token === null || token === void 0 ? void 0 : token.access_token;
          }
          return void 0;
        });
      }
      checkSubscription() {
        return __awaiter(this, void 0, void 0, function* () {
          const accessToken = yield this.getAccessToken();
          if (!accessToken) {
            return void 0;
          }
          const token = yield this.getToken();
          if (!token) {
            return void 0;
          }
          const entitlement = yield (0, auth_1.getSubscriptionEntitlement)({
            headers: { Authorization: `Bearer ${accessToken}` }
          });
          if ((token === null || token === void 0 ? void 0 : token.subscription_ends_at) !== (entitlement === null || entitlement === void 0 ? void 0 : entitlement.subscription_ends_at)) {
            debug4("checkSubscription: subscription_ends_at has changed");
            return yield this.refresh();
          }
          if ((token === null || token === void 0 ? void 0 : token.trial_ends_at) !== (entitlement === null || entitlement === void 0 ? void 0 : entitlement.trial_ends_at)) {
            debug4("checkSubscription: trial_ends_at has changed");
            return yield this.refresh();
          }
          return void 0;
        });
      }
      refreshTokenIfSubscriptionStaled() {
        return __awaiter(this, void 0, void 0, function* () {
          if (!this.checkSubscriptionRequest) {
            debug4("refreshTokenIfSubscriptionStaled: starting");
            this.checkSubscriptionRequest = this.checkSubscription().finally(() => {
              debug4("refreshTokenIfSubscriptionStaled: finished");
              this.checkSubscriptionRequest = void 0;
            });
            return yield this.checkSubscriptionRequest;
          }
          debug4("refreshTokenIfSubscriptionStaled: in process");
          return yield this.checkSubscriptionRequest;
        });
      }
      isLoggedIn() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.getToken()) !== void 0;
        });
      }
      getRemember() {
        return __awaiter(this, void 0, void 0, function* () {
          return yield this.tokenStorage.getRemember();
        });
      }
      getToken() {
        return __awaiter(this, void 0, void 0, function* () {
          return yield this.tokenStorage.getToken();
        });
      }
      setToken(token, remember) {
        return __awaiter(this, void 0, void 0, function* () {
          debug4("setToken: %j", { token, remember });
          if (token) {
            _Auth.validateTokenPayload(token);
          }
          if ((token === null || token === void 0 ? void 0 : token.expires_in) && !(token === null || token === void 0 ? void 0 : token.expires_at)) {
            const now = /* @__PURE__ */ new Date();
            now.setSeconds(now.getSeconds() + (token.expires_in - 15));
            token.expires_at = JSON.parse(JSON.stringify(now));
          }
          if (this.authCallback) {
            yield this.authCallback(AuthCallbackActions.TokenUpdated, token, this);
          }
          if (this.client.apiWorker) {
            yield this.client.apiWorker.setToken(token);
          }
          return yield this.tokenStorage.setToken(token, remember);
        });
      }
      setPat(pat) {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.setToken({ access_token: pat });
          return this;
        });
      }
      isExpired(token) {
        var _a2;
        return (_a2 = token === null || token === void 0 ? void 0 : token.is_expired) !== null && _a2 !== void 0 ? _a2 : false;
      }
      isSubscriptionExpired(token) {
        if (!token) {
          return false;
        }
        const now = Date.now();
        if (token.subscription_ends_at) {
          return new Date(token.subscription_ends_at).getTime() < now;
        }
        if (token.subscription_ended_at) {
          return new Date(token.subscription_ended_at).getTime() < now;
        }
        return false;
      }
      isTrialExpired(token) {
        if (!token) {
          return false;
        }
        const now = Date.now();
        if (token.trial_ends_at) {
          return new Date(token.trial_ends_at).getTime() < now;
        }
        if (token.trial_ended_at) {
          return new Date(token.trial_ended_at).getTime() < now;
        }
        return false;
      }
      handleExpired(token) {
        return __awaiter(this, void 0, void 0, function* () {
          if (!this.authCallback) {
            return;
          }
          if (!(token === null || token === void 0 ? void 0 : token.is_expired)) {
            return;
          }
          let action = AuthCallbackActions.SubscriptionExpired;
          let time = 0;
          if (token.subscription_ends_at && new Date(token.subscription_ends_at).getTime() > time) {
            time = new Date(token.subscription_ends_at).getTime();
          }
          if (token.subscription_ended_at && new Date(token.subscription_ended_at).getTime() > time) {
            time = new Date(token.subscription_ended_at).getTime();
          }
          if (token.trial_ends_at && new Date(token.trial_ends_at).getTime() > time) {
            time = new Date(token.trial_ends_at).getTime();
            action = AuthCallbackActions.TrialExpired;
          }
          if (token.trial_ended_at && new Date(token.trial_ended_at).getTime() > time) {
            time = new Date(token.trial_ended_at).getTime();
            action = AuthCallbackActions.TrialExpired;
          }
          if (time && time < Date.now()) {
            yield this.authCallback(action, token, this);
          }
        });
      }
      addAuthorizationHeaderInterceptor() {
        this.client.api.interceptors.request.use((config2) => __awaiter(this, void 0, void 0, function* () {
          var _a2;
          const newConfig = Object.assign({}, config2);
          if (_Auth.urlRequiresAuth(config2.url) && newConfig.headers.Authorization === void 0) {
            if (this.checkSubscriptionRequest) {
              debug4("authorizationHeaderInterceptor: waiting for checkSubscriptionRequest", config2.url);
              yield this.checkSubscriptionRequest;
              debug4("authorizationHeaderInterceptor: resuming", config2.url);
            }
            const accessToken = yield this.getAccessToken();
            if (!accessToken) {
              throw new exceptions_1.HttpError("No access token found.", exceptions_1.NO_ACCESS_TOKEN, "Token Error", 401, exceptions_1.NO_ACCESS_TOKEN);
            }
            newConfig.headers.Authorization = `Bearer ${accessToken}`;
          }
          if (this.client.debug) {
            newConfig.params = (_a2 = config2.params) !== null && _a2 !== void 0 ? _a2 : {};
            newConfig.params.XDEBUG_SESSION_START = "PHPSTORM";
          }
          return newConfig;
        }), (error) => {
          this.client.logger.error("Request error", error);
          return Promise.reject(error);
        });
      }
      // Axios interceptor for HTTP 401 Unauthorized
      // If the token is invalid or has expired, we regenerate a new token and then call the original REST again.
      addUnauthorizedInterceptor() {
        this.client.api.interceptors.response.use((response) => response, (error) => __awaiter(this, void 0, void 0, function* () {
          var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k;
          const status = ((_a2 = error === null || error === void 0 ? void 0 : error.response) === null || _a2 === void 0 ? void 0 : _a2.status) ? typeof error.response.status === "string" ? parseInt(error.response.status, 10) : error.response.status : void 0;
          const isRetry = Boolean((_c = (_b = error.response) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c._retry);
          debug4("unauthorizedInterceptor", {
            error: (_d = error === null || error === void 0 ? void 0 : error.message) !== null && _d !== void 0 ? _d : error,
            id: this.id,
            isAuthCallbackSet: !!this.authCallback,
            isDisabled: this.disableHandler,
            isRetry,
            status,
            url: (_e = error.config) === null || _e === void 0 ? void 0 : _e.url,
            urlRequiresAuth: _Auth.urlRequiresAuth((_f = error.config) === null || _f === void 0 ? void 0 : _f.url)
          });
          if (this.disableHandler || isRetry || status !== 401 || !_Auth.urlRequiresAuth((_g = error.config) === null || _g === void 0 ? void 0 : _g.url)) {
            if ((_h = error.response) === null || _h === void 0 ? void 0 : _h.data) {
              return yield Promise.reject((0, exceptions_1.getHttpResponse)(error.response));
            }
            return yield Promise.reject(error);
          }
          const accessToken = yield this.getToken();
          if (!accessToken) {
            if (this.authCallback) {
              debug4("unauthorizedInterceptor: authCallback due to empty token");
              yield this.authCallback(AuthCallbackActions.Unauthorized, void 0, this);
            }
            return yield Promise.reject((0, exceptions_1.getHttpResponse)(error.response));
          }
          this.disableHandler = true;
          let authCallbackAlreadyInvoked = false;
          try {
            const token = yield this.refresh();
            if (token === null || token === void 0 ? void 0 : token.access_token) {
              error.response.config.headers.Authorization = `Bearer ${token.access_token}`;
              error.response.config._retry = true;
              return yield this.client.api(error.response.config);
            }
            if (this.authCallback) {
              debug4("unauthorizedInterceptor: authCallback due to empty token after refresh");
              authCallbackAlreadyInvoked = true;
              yield this.authCallback(AuthCallbackActions.Unauthorized, void 0, this);
            }
            return yield Promise.reject((0, exceptions_1.getHttpResponse)(error.response));
          } catch (e) {
            if (!e.url) {
              e.url = (_j = error.config) === null || _j === void 0 ? void 0 : _j.url;
            }
            if (this.authCallback && !authCallbackAlreadyInvoked) {
              debug4("unauthorizedInterceptor: authCallback due to error", (_k = e === null || e === void 0 ? void 0 : e.message) !== null && _k !== void 0 ? _k : e);
              yield this.authCallback(AuthCallbackActions.Unauthorized, void 0, this);
            }
            return yield Promise.reject(e);
          } finally {
            this.disableHandler = false;
          }
        }));
      }
      addInterceptors() {
        this.addAuthorizationHeaderInterceptor();
        this.addUnauthorizedInterceptor();
      }
    };
    exports2.Auth = Auth;
  }
});

// node_modules/@testquality/sdk/dist/auth/ReturnToken.js
var require_ReturnToken = __commonJS({
  "node_modules/@testquality/sdk/dist/auth/ReturnToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientTypeEnum = void 0;
    var ClientTypeEnum;
    (function(ClientTypeEnum2) {
      ClientTypeEnum2[ClientTypeEnum2["TestManagement"] = 1] = "TestManagement";
      ClientTypeEnum2[ClientTypeEnum2["Internal"] = 2] = "Internal";
      ClientTypeEnum2[ClientTypeEnum2["TestPlan"] = 3] = "TestPlan";
      ClientTypeEnum2[ClientTypeEnum2["Trial"] = 4] = "Trial";
    })(ClientTypeEnum || (exports2.ClientTypeEnum = ClientTypeEnum = {}));
  }
});

// node_modules/@testquality/sdk/dist/auth/TokenStorageImpl.js
var require_TokenStorageImpl = __commonJS({
  "node_modules/@testquality/sdk/dist/auth/TokenStorageImpl.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve3) {
          resolve3(value);
        });
      }
      return new (P || (P = Promise))(function(resolve3, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve3(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenStorageImpl = void 0;
    var TokenStorageImpl = class {
      constructor(persistentStorage) {
        this.persistentStorage = persistentStorage;
      }
      getRemember() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this.remember === void 0 && this.persistentStorage) {
            this.remember = yield this.persistentStorage.get("remember");
          }
          return this.remember;
        });
      }
      getToken() {
        return __awaiter(this, void 0, void 0, function* () {
          if (!this.token && this.persistentStorage) {
            this.token = yield this.persistentStorage.get("token");
          }
          return this.token;
        });
      }
      setToken(token, remember) {
        return __awaiter(this, void 0, void 0, function* () {
          this.token = token;
          this.remember = remember !== null && remember !== void 0 ? remember : yield this.getRemember();
          if (this.persistentStorage) {
            if (this.remember) {
              yield this.persistentStorage.set("token", token);
            } else {
              yield this.persistentStorage.set("token", void 0);
            }
            yield this.persistentStorage.set("remember", this.remember);
          }
          return this.token;
        });
      }
    };
    exports2.TokenStorageImpl = TokenStorageImpl;
  }
});

// node_modules/@testquality/sdk/dist/auth/index.js
var require_auth2 = __commonJS({
  "node_modules/@testquality/sdk/dist/auth/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_Auth(), exports2);
    __exportStar(require_ReturnToken(), exports2);
    __exportStar(require_TokenStorageImpl(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/gen/routes/Routes.js
var require_Routes = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/routes/Routes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientRoute = exports2.CheckSuiteCheckSuitePullRequestRoute = exports2.CheckSuiteCheckRunRoute = exports2.CheckSuiteRoute = exports2.CheckRunRunRoute = exports2.CheckRunRoute = exports2.CheckListItemCheckListItemUserRoute = exports2.CheckListItemRoute = exports2.CheckListCheckListItemRoute = exports2.CheckListRoute = exports2.CaseTypeTestRoute = exports2.CaseTypeLabelAssignedRoute = exports2.CaseTypeCaseTypeProjectRoute = exports2.CaseTypeRoute = exports2.CasePriorityTestRoute = exports2.CasePriorityLabelAssignedRoute = exports2.CasePriorityCasePriorityProjectRoute = exports2.CasePriorityRoute = exports2.CapabilityProjectCapabilityDefaultRoute = exports2.CapabilityIntegrationRoute = exports2.CapabilityRoute = exports2.BillingContactRoute = exports2.BaseIntegrationIntegrationRoute = exports2.BaseIntegrationBaseCapabilityRoute = exports2.BaseIntegrationAppConfigRoute = exports2.BaseIntegrationRoute = exports2.BaseCapabilityCapabilityRoute = exports2.BaseCapabilityBaseIntegrationRoute = exports2.BaseCapabilityRoute = exports2.AttachmentRoute = exports2.AppUserPullRequestRoute = exports2.AppUserBranchRoute = exports2.AppUserAppInstallRoute = exports2.AppUserRoute = exports2.AppInstallProjectPullRequestRoute = exports2.AppInstallProjectIntegrationProjectRoute = exports2.AppInstallProjectCheckSuiteRoute = exports2.AppInstallProjectCheckRunRoute = exports2.AppInstallProjectBranchRoute = exports2.AppInstallProjectRoute = exports2.AppInstallAppInstallProjectRoute = exports2.AppInstallAppInstallIntegrationRoute = exports2.AppInstallRoute = exports2.AppConfigAppInstallRoute = exports2.AppConfigRoute = exports2.AccessRoleUserRoute = exports2.AccessRoleShareRoute = exports2.AccessRoleProjectRoute = exports2.AccessRolePolicyRoute = exports2.AccessRoleRoute = void 0;
    exports2.ExplorationRoute = exports2.EnvironmentRunResultRoute = exports2.EnvironmentExplorationItemRoute = exports2.EnvironmentEnvironmentResourceRoute = exports2.EnvironmentEnvironmentProjectRoute = exports2.EnvironmentEnvironmentPlanRoute = exports2.EnvironmentEnvironmentExplorationRoute = exports2.EnvironmentRoute = exports2.DocTypeDocTemplateRoute = exports2.DocTypeDocRoute = exports2.DocTypeComponentDocTypeRoute = exports2.DocTypeRoute = exports2.DocTemplateDocRoute = exports2.DocTemplateComponentDocTemplateRoute = exports2.DocTemplateRoute = exports2.DocComponentDocRoute = exports2.DocAttachmentRoute = exports2.DocRoute = exports2.DefectUserRoute = exports2.DefectTypeRoute = exports2.DefectStatusRequirementRoute = exports2.DefectStatusNativeDefectStatusRoute = exports2.DefectStatusDefectRoute = exports2.DefectStatusRoute = exports2.DefectRunResultRoute = exports2.DefectResRequirementRoute = exports2.DefectResNativeDefectResRoute = exports2.DefectResDefectRoute = exports2.DefectResRoute = exports2.DefectPriorityRoute = exports2.DefectLabelRoute = exports2.DefectDefectExplorationItemRoute = exports2.DefectComponentRoute = exports2.DefectAttachmentRoute = exports2.DefectRoute = exports2.DataSetTestRoute = exports2.DataSetRoute = exports2.CouponSubscriptionsRoute = exports2.CouponRoute = exports2.ComponentDocTypeRoute = exports2.ComponentDocTemplateRoute = exports2.ComponentDocRoute = exports2.ComponentComponentDocTypeRoute = exports2.ComponentComponentDocTemplateRoute = exports2.ComponentComponentDocRoute = exports2.ComponentRoute = exports2.CommentRoute = exports2.ClientVirtualRoute = exports2.ClientSignupOptionRoute = exports2.ClientKeyRoute = void 0;
    exports2.PolicyPolicyRowsRoute = exports2.PolicyRoute = exports2.PlanWatchRoute = exports2.PlanSuiteTestIncludeRoute = exports2.PlanSuiteRoute = exports2.PlanRunRoute = exports2.PlanPurposeRoute = exports2.PlanPlanSuiteTestIncludeRoute = exports2.PlanLabelAssignedRoute = exports2.PlanIntegrationProjectRoute = exports2.PlanEnvironmentPlanRoute = exports2.PlanCommentRoute = exports2.PlanAttachmentRoute = exports2.PlanRoute = exports2.NotificationsRoute = exports2.NativeDefectStatusLabelAssignedRoute = exports2.NativeDefectStatusDefectStatusRoute = exports2.NativeDefectStatusRoute = exports2.NativeDefectResLabelAssignedRoute = exports2.NativeDefectResDefectResRoute = exports2.NativeDefectResRoute = exports2.MilestoneTargetRoute = exports2.MilestoneRunRoute = exports2.MilestoneLabelAssignedRoute = exports2.MilestoneExplorationRoute = exports2.MilestoneCommentRoute = exports2.MilestoneRoute = exports2.LabelLabelProjectRoute = exports2.LabelLabelAssignedRoute = exports2.LabelAssignedRoute = exports2.LabelRoute = exports2.InvoicePaymentRoute = exports2.InvoiceDisputeRoute = exports2.InvoiceAttachmentRoute = exports2.InvoiceRoute = exports2.IntegrationUserRoute = exports2.IntegrationTemplateRoute = exports2.IntegrationStatusTypeNativeDefectStatusRoute = exports2.IntegrationStatusTypeRoute = exports2.IntegrationProjectRoute = exports2.IntegrationCapabilityRoute = exports2.IntegrationAppInstallIntegrationRoute = exports2.IntegrationRoute = exports2.FilterRoute = exports2.ExplorationLabelAssignedRoute = exports2.ExplorationItemLabelAssignedRoute = exports2.ExplorationItemDefectExplorationItemRoute = exports2.ExplorationItemRoute = exports2.ExplorationExplorationItemRoute = exports2.ExplorationEnvironmentExplorationRoute = void 0;
    exports2.PurposeLabelAssignedRoute = exports2.PurposeRoute = exports2.PullRequestPullRequestRunRoute = exports2.PullRequestPullRequestRequirementRoute = exports2.PullRequestCheckSuitePullRequestRoute = exports2.PullRequestRoute = exports2.ProjectWatchRoute = exports2.ProjectTestRoute = exports2.ProjectTaskRoute = exports2.ProjectTargetRoute = exports2.ProjectSuiteRoute = exports2.ProjectStepRoute = exports2.ProjectRunSuiteRoute = exports2.ProjectRunResultStepRoute = exports2.ProjectRunResultRoute = exports2.ProjectRunRoute = exports2.ProjectRequirementRoute = exports2.ProjectProjectUserRoute = exports2.ProjectProjectStatusRoute = exports2.ProjectProjectPurposeRoute = exports2.ProjectProjectCapabilityDefaultRoute = exports2.ProjectPlanSuiteTestIncludeRoute = exports2.ProjectPlanRoute = exports2.ProjectMilestoneRoute = exports2.ProjectLabelProjectRoute = exports2.ProjectLabelAssignedRoute = exports2.ProjectIntegrationRoute = exports2.ProjectFilterRoute = exports2.ProjectExplorationItemRoute = exports2.ProjectExplorationRoute = exports2.ProjectEnvironmentProjectRoute = exports2.ProjectDocRoute = exports2.ProjectDefectRoute = exports2.ProjectDataSetRoute = exports2.ProjectComponentDocRoute = exports2.ProjectCommentRoute = exports2.ProjectCodeRoute = exports2.ProjectCaseTypeProjectRoute = exports2.ProjectCasePriorityProjectRoute = exports2.ProjectAttachmentRoute = exports2.ProjectRoute = exports2.ProductSubscriptionsRoute = exports2.ProductMarketplaceRoute = exports2.ProductRoute = exports2.PriceSubscriptionsRoute = exports2.PriceQuoteItemRoute = exports2.PriceProductRoute = exports2.PriceMarketplaceProductRoute = exports2.PriceRoute = exports2.PolicyRowsRoute = void 0;
    exports2.StepRunResultStepRoute = exports2.StepLabelAssignedRoute = exports2.StepCommentRoute = exports2.StepRoute = exports2.StatusTypeStatusRoute = exports2.StatusTypeLabelAssignedRoute = exports2.StatusTypeRoute = exports2.StatusRunResultStepRoute = exports2.StatusRunResultRoute = exports2.StatusProjectStatusRoute = exports2.StatusLabelAssignedRoute = exports2.StatusExplorationItemRoute = exports2.StatusExplorationRoute = exports2.StatusRoute = exports2.SignupOptionRoute = exports2.SharedStepStepRoute = exports2.SharedStepLabelAssignedRoute = exports2.SharedStepRoute = exports2.SharedPreconditionTestRoute = exports2.SharedPreconditionRoute = exports2.ShareShareUserRoute = exports2.ShareRoute = exports2.RunSuiteRoute = exports2.RunRunSuiteRoute = exports2.RunRunResultRoute = exports2.RunResultStepLabelAssignedRoute = exports2.RunResultStepCommentRoute = exports2.RunResultStepAttachmentRoute = exports2.RunResultStepRoute = exports2.RunResultRunResultStepRoute = exports2.RunResultLabelAssignedRoute = exports2.RunResultDefectRoute = exports2.RunResultCommentRoute = exports2.RunResultAttachmentRoute = exports2.RunResultRoute = exports2.RunPullRequestRunRoute = exports2.RunLabelAssignedRoute = exports2.RunCommentRoute = exports2.RunRoute = exports2.ResourceValueEnvironmentResourceRoute = exports2.ResourceValueRoute = exports2.ResourceResourceValueRoute = exports2.ResourceEnvironmentResourceRoute = exports2.ResourceRoute = exports2.RequirementRequirementTestRoute = exports2.RequirementPullRequestRequirementRoute = exports2.RequirementAttachmentRoute = exports2.RequirementRoute = exports2.PurposeProjectPurposeRoute = exports2.PurposePlanRoute = void 0;
    exports2.UserSupportAgentRoute = exports2.UserSupportRoute = exports2.UserSubscriptionsRoute = exports2.UserSubscriptionUserRoute = exports2.UserShareUserRoute = exports2.UserReportRoute = exports2.UserQuoteRoute = exports2.UserProjectUserRoute = exports2.UserNotificationsRoute = exports2.UserIntegrationRoute = exports2.UserFeatureUserRoute = exports2.UserExportRoute = exports2.UserCheckListItemUserRoute = exports2.UserBillingContactRoute = exports2.UserAttachmentRoute = exports2.UserAccessRoleRoute = exports2.UserRoute = exports2.TestWatchRoute = exports2.TestSuiteRoute = exports2.TestStepRoute = exports2.TestRunResultRoute = exports2.TestRequirementTestRoute = exports2.TestQualityTypeTestQualityRoute = exports2.TestQualityTypeLabelAssignedRoute = exports2.TestQualityTypeRoute = exports2.TestQualityTestRoute = exports2.TestQualityLabelAssignedRoute = exports2.TestQualityRoute = exports2.TestPlanSuiteTestIncludeRoute = exports2.TestLabelAssignedRoute = exports2.TestCommentRoute = exports2.TestAttachmentRoute = exports2.TestRoute = exports2.SuiteWatchRoute = exports2.SuiteTestRoute = exports2.SuiteRunResultRoute = exports2.SuiteRequirementTestRoute = exports2.SuitePlanSuiteTestIncludeRoute = exports2.SuitePlanRoute = exports2.SuiteLabelAssignedRoute = exports2.SuiteCommentRoute = exports2.SuiteRoute = exports2.SubscriptionsSubscriptionUserRoute = exports2.SubscriptionsQuoteItemRoute = exports2.SubscriptionsBillingContactRoute = exports2.SubscriptionsRoute = exports2.SubscriptionUserRoute = exports2.StripeProductProductRoute = exports2.StripeProductPriceRoute = exports2.StripeProductRoute = void 0;
    exports2.WebinarRoute = exports2.WatchRoute = exports2.VirtualRoute = exports2.UserUserLogRoute = void 0;
    var AccessRoleRoute = () => `/access_role`;
    exports2.AccessRoleRoute = AccessRoleRoute;
    var AccessRolePolicyRoute = (access_role_id) => `/access_role/${access_role_id}/policy`;
    exports2.AccessRolePolicyRoute = AccessRolePolicyRoute;
    var AccessRoleProjectRoute = (access_role_id) => `/access_role/${access_role_id}/project`;
    exports2.AccessRoleProjectRoute = AccessRoleProjectRoute;
    var AccessRoleShareRoute = (access_role_id) => `/access_role/${access_role_id}/share`;
    exports2.AccessRoleShareRoute = AccessRoleShareRoute;
    var AccessRoleUserRoute = (access_role_id) => `/access_role/${access_role_id}/user`;
    exports2.AccessRoleUserRoute = AccessRoleUserRoute;
    var AppConfigRoute = () => `/app_config`;
    exports2.AppConfigRoute = AppConfigRoute;
    var AppConfigAppInstallRoute = (app_config_id) => `/app_config/${app_config_id}/app_install`;
    exports2.AppConfigAppInstallRoute = AppConfigAppInstallRoute;
    var AppInstallRoute = () => `/app_install`;
    exports2.AppInstallRoute = AppInstallRoute;
    var AppInstallAppInstallIntegrationRoute = (app_install_id) => `/app_install/${app_install_id}/app_install_integration`;
    exports2.AppInstallAppInstallIntegrationRoute = AppInstallAppInstallIntegrationRoute;
    var AppInstallAppInstallProjectRoute = (app_install_id) => `/app_install/${app_install_id}/app_install_project`;
    exports2.AppInstallAppInstallProjectRoute = AppInstallAppInstallProjectRoute;
    var AppInstallProjectRoute = () => `/app_install_project`;
    exports2.AppInstallProjectRoute = AppInstallProjectRoute;
    var AppInstallProjectBranchRoute = (app_install_project_id) => `/app_install_project/${app_install_project_id}/branch`;
    exports2.AppInstallProjectBranchRoute = AppInstallProjectBranchRoute;
    var AppInstallProjectCheckRunRoute = (app_install_project_id) => `/app_install_project/${app_install_project_id}/check_run`;
    exports2.AppInstallProjectCheckRunRoute = AppInstallProjectCheckRunRoute;
    var AppInstallProjectCheckSuiteRoute = (app_install_project_id) => `/app_install_project/${app_install_project_id}/check_suite`;
    exports2.AppInstallProjectCheckSuiteRoute = AppInstallProjectCheckSuiteRoute;
    var AppInstallProjectIntegrationProjectRoute = (app_install_project_id) => `/app_install_project/${app_install_project_id}/integration_project`;
    exports2.AppInstallProjectIntegrationProjectRoute = AppInstallProjectIntegrationProjectRoute;
    var AppInstallProjectPullRequestRoute = (app_install_project_id) => `/app_install_project/${app_install_project_id}/pull_request`;
    exports2.AppInstallProjectPullRequestRoute = AppInstallProjectPullRequestRoute;
    var AppUserRoute = () => `/app_user`;
    exports2.AppUserRoute = AppUserRoute;
    var AppUserAppInstallRoute = (app_user_id) => `/app_user/${app_user_id}/app_install`;
    exports2.AppUserAppInstallRoute = AppUserAppInstallRoute;
    var AppUserBranchRoute = (app_user_id) => `/app_user/${app_user_id}/branch`;
    exports2.AppUserBranchRoute = AppUserBranchRoute;
    var AppUserPullRequestRoute = (app_user_id) => `/app_user/${app_user_id}/pull_request`;
    exports2.AppUserPullRequestRoute = AppUserPullRequestRoute;
    var AttachmentRoute = () => `/attachment`;
    exports2.AttachmentRoute = AttachmentRoute;
    var BaseCapabilityRoute = () => `/base_capability`;
    exports2.BaseCapabilityRoute = BaseCapabilityRoute;
    var BaseCapabilityBaseIntegrationRoute = (base_capability_id) => `/base_capability/${base_capability_id}/base_integration`;
    exports2.BaseCapabilityBaseIntegrationRoute = BaseCapabilityBaseIntegrationRoute;
    var BaseCapabilityCapabilityRoute = (base_capability_id) => `/base_capability/${base_capability_id}/capability`;
    exports2.BaseCapabilityCapabilityRoute = BaseCapabilityCapabilityRoute;
    var BaseIntegrationRoute = () => `/base_integration`;
    exports2.BaseIntegrationRoute = BaseIntegrationRoute;
    var BaseIntegrationAppConfigRoute = (base_integration_id) => `/base_integration/${base_integration_id}/app_config`;
    exports2.BaseIntegrationAppConfigRoute = BaseIntegrationAppConfigRoute;
    var BaseIntegrationBaseCapabilityRoute = (base_integration_id) => `/base_integration/${base_integration_id}/base_capability`;
    exports2.BaseIntegrationBaseCapabilityRoute = BaseIntegrationBaseCapabilityRoute;
    var BaseIntegrationIntegrationRoute = (base_integration_id) => `/base_integration/${base_integration_id}/integration`;
    exports2.BaseIntegrationIntegrationRoute = BaseIntegrationIntegrationRoute;
    var BillingContactRoute = () => `/billing_contact`;
    exports2.BillingContactRoute = BillingContactRoute;
    var CapabilityRoute = () => `/capability`;
    exports2.CapabilityRoute = CapabilityRoute;
    var CapabilityIntegrationRoute = (capability_id) => `/capability/${capability_id}/integration`;
    exports2.CapabilityIntegrationRoute = CapabilityIntegrationRoute;
    var CapabilityProjectCapabilityDefaultRoute = (capability_id) => `/capability/${capability_id}/project_capability_default`;
    exports2.CapabilityProjectCapabilityDefaultRoute = CapabilityProjectCapabilityDefaultRoute;
    var CasePriorityRoute = () => `/case_priority`;
    exports2.CasePriorityRoute = CasePriorityRoute;
    var CasePriorityCasePriorityProjectRoute = (case_priority_id) => `/case_priority/${case_priority_id}/case_priority_project`;
    exports2.CasePriorityCasePriorityProjectRoute = CasePriorityCasePriorityProjectRoute;
    var CasePriorityLabelAssignedRoute = (case_priority_id) => `/case_priority/${case_priority_id}/label_assigned`;
    exports2.CasePriorityLabelAssignedRoute = CasePriorityLabelAssignedRoute;
    var CasePriorityTestRoute = (case_priority_id) => `/case_priority/${case_priority_id}/test`;
    exports2.CasePriorityTestRoute = CasePriorityTestRoute;
    var CaseTypeRoute = () => `/case_type`;
    exports2.CaseTypeRoute = CaseTypeRoute;
    var CaseTypeCaseTypeProjectRoute = (case_type_id) => `/case_type/${case_type_id}/case_type_project`;
    exports2.CaseTypeCaseTypeProjectRoute = CaseTypeCaseTypeProjectRoute;
    var CaseTypeLabelAssignedRoute = (case_type_id) => `/case_type/${case_type_id}/label_assigned`;
    exports2.CaseTypeLabelAssignedRoute = CaseTypeLabelAssignedRoute;
    var CaseTypeTestRoute = (case_type_id) => `/case_type/${case_type_id}/test`;
    exports2.CaseTypeTestRoute = CaseTypeTestRoute;
    var CheckListRoute = () => `/check_list`;
    exports2.CheckListRoute = CheckListRoute;
    var CheckListCheckListItemRoute = (check_list_id) => `/check_list/${check_list_id}/check_list_item`;
    exports2.CheckListCheckListItemRoute = CheckListCheckListItemRoute;
    var CheckListItemRoute = () => `/check_list_item`;
    exports2.CheckListItemRoute = CheckListItemRoute;
    var CheckListItemCheckListItemUserRoute = (check_list_item_id) => `/check_list_item/${check_list_item_id}/check_list_item_user`;
    exports2.CheckListItemCheckListItemUserRoute = CheckListItemCheckListItemUserRoute;
    var CheckRunRoute = () => `/check_run`;
    exports2.CheckRunRoute = CheckRunRoute;
    var CheckRunRunRoute = (check_run_id) => `/check_run/${check_run_id}/run`;
    exports2.CheckRunRunRoute = CheckRunRunRoute;
    var CheckSuiteRoute = () => `/check_suite`;
    exports2.CheckSuiteRoute = CheckSuiteRoute;
    var CheckSuiteCheckRunRoute = (check_suite_id) => `/check_suite/${check_suite_id}/check_run`;
    exports2.CheckSuiteCheckRunRoute = CheckSuiteCheckRunRoute;
    var CheckSuiteCheckSuitePullRequestRoute = (check_suite_id) => `/check_suite/${check_suite_id}/check_suite_pull_request`;
    exports2.CheckSuiteCheckSuitePullRequestRoute = CheckSuiteCheckSuitePullRequestRoute;
    var ClientRoute = () => `/client`;
    exports2.ClientRoute = ClientRoute;
    var ClientKeyRoute = (client_id) => `/client/${client_id}/key`;
    exports2.ClientKeyRoute = ClientKeyRoute;
    var ClientSignupOptionRoute = (client_id) => `/client/${client_id}/signup_option`;
    exports2.ClientSignupOptionRoute = ClientSignupOptionRoute;
    var ClientVirtualRoute = (client_id) => `/client/${client_id}/virtual`;
    exports2.ClientVirtualRoute = ClientVirtualRoute;
    var CommentRoute = () => `/comment`;
    exports2.CommentRoute = CommentRoute;
    var ComponentRoute = () => `/component`;
    exports2.ComponentRoute = ComponentRoute;
    var ComponentComponentDocRoute = (component_id) => `/component/${component_id}/component_doc`;
    exports2.ComponentComponentDocRoute = ComponentComponentDocRoute;
    var ComponentComponentDocTemplateRoute = (component_id) => `/component/${component_id}/component_doc_template`;
    exports2.ComponentComponentDocTemplateRoute = ComponentComponentDocTemplateRoute;
    var ComponentComponentDocTypeRoute = (component_id) => `/component/${component_id}/component_doc_type`;
    exports2.ComponentComponentDocTypeRoute = ComponentComponentDocTypeRoute;
    var ComponentDocRoute = () => `/component_doc`;
    exports2.ComponentDocRoute = ComponentDocRoute;
    var ComponentDocTemplateRoute = () => `/component_doc_template`;
    exports2.ComponentDocTemplateRoute = ComponentDocTemplateRoute;
    var ComponentDocTypeRoute = () => `/component_doc_type`;
    exports2.ComponentDocTypeRoute = ComponentDocTypeRoute;
    var CouponRoute = () => `/coupon`;
    exports2.CouponRoute = CouponRoute;
    var CouponSubscriptionsRoute = (coupon_id) => `/coupon/${coupon_id}/subscriptions`;
    exports2.CouponSubscriptionsRoute = CouponSubscriptionsRoute;
    var DataSetRoute = () => `/data_set`;
    exports2.DataSetRoute = DataSetRoute;
    var DataSetTestRoute = (data_set_id) => `/data_set/${data_set_id}/test`;
    exports2.DataSetTestRoute = DataSetTestRoute;
    var DefectRoute = () => `/defect`;
    exports2.DefectRoute = DefectRoute;
    var DefectAttachmentRoute = (defect_id) => `/defect/${defect_id}/attachment`;
    exports2.DefectAttachmentRoute = DefectAttachmentRoute;
    var DefectComponentRoute = () => `/defect_component`;
    exports2.DefectComponentRoute = DefectComponentRoute;
    var DefectDefectExplorationItemRoute = (defect_id) => `/defect/${defect_id}/defect_exploration_item`;
    exports2.DefectDefectExplorationItemRoute = DefectDefectExplorationItemRoute;
    var DefectLabelRoute = () => `/defect_label`;
    exports2.DefectLabelRoute = DefectLabelRoute;
    var DefectPriorityRoute = () => `/defect_priority`;
    exports2.DefectPriorityRoute = DefectPriorityRoute;
    var DefectResRoute = () => `/defect_res`;
    exports2.DefectResRoute = DefectResRoute;
    var DefectResDefectRoute = (defect_res_id) => `/defect_res/${defect_res_id}/defect`;
    exports2.DefectResDefectRoute = DefectResDefectRoute;
    var DefectResNativeDefectResRoute = (defect_res_id) => `/defect_res/${defect_res_id}/native_defect_res`;
    exports2.DefectResNativeDefectResRoute = DefectResNativeDefectResRoute;
    var DefectResRequirementRoute = (defect_res_id) => `/defect_res/${defect_res_id}/requirement`;
    exports2.DefectResRequirementRoute = DefectResRequirementRoute;
    var DefectRunResultRoute = (defect_id) => `/defect/${defect_id}/run_result`;
    exports2.DefectRunResultRoute = DefectRunResultRoute;
    var DefectStatusRoute = () => `/defect_status`;
    exports2.DefectStatusRoute = DefectStatusRoute;
    var DefectStatusDefectRoute = (defect_status_id) => `/defect_status/${defect_status_id}/defect`;
    exports2.DefectStatusDefectRoute = DefectStatusDefectRoute;
    var DefectStatusNativeDefectStatusRoute = (defect_status_id) => `/defect_status/${defect_status_id}/native_defect_status`;
    exports2.DefectStatusNativeDefectStatusRoute = DefectStatusNativeDefectStatusRoute;
    var DefectStatusRequirementRoute = (defect_status_id) => `/defect_status/${defect_status_id}/requirement`;
    exports2.DefectStatusRequirementRoute = DefectStatusRequirementRoute;
    var DefectTypeRoute = () => `/defect_type`;
    exports2.DefectTypeRoute = DefectTypeRoute;
    var DefectUserRoute = () => `/defect_user`;
    exports2.DefectUserRoute = DefectUserRoute;
    var DocRoute = () => `/doc`;
    exports2.DocRoute = DocRoute;
    var DocAttachmentRoute = (doc_id) => `/doc/${doc_id}/attachment`;
    exports2.DocAttachmentRoute = DocAttachmentRoute;
    var DocComponentDocRoute = (doc_id) => `/doc/${doc_id}/component_doc`;
    exports2.DocComponentDocRoute = DocComponentDocRoute;
    var DocTemplateRoute = () => `/doc_template`;
    exports2.DocTemplateRoute = DocTemplateRoute;
    var DocTemplateComponentDocTemplateRoute = (doc_template_id) => `/doc_template/${doc_template_id}/component_doc_template`;
    exports2.DocTemplateComponentDocTemplateRoute = DocTemplateComponentDocTemplateRoute;
    var DocTemplateDocRoute = (doc_template_id) => `/doc_template/${doc_template_id}/doc`;
    exports2.DocTemplateDocRoute = DocTemplateDocRoute;
    var DocTypeRoute = () => `/doc_type`;
    exports2.DocTypeRoute = DocTypeRoute;
    var DocTypeComponentDocTypeRoute = (doc_type_id) => `/doc_type/${doc_type_id}/component_doc_type`;
    exports2.DocTypeComponentDocTypeRoute = DocTypeComponentDocTypeRoute;
    var DocTypeDocRoute = (doc_type_id) => `/doc_type/${doc_type_id}/doc`;
    exports2.DocTypeDocRoute = DocTypeDocRoute;
    var DocTypeDocTemplateRoute = (doc_type_id) => `/doc_type/${doc_type_id}/doc_template`;
    exports2.DocTypeDocTemplateRoute = DocTypeDocTemplateRoute;
    var EnvironmentRoute = () => `/environment`;
    exports2.EnvironmentRoute = EnvironmentRoute;
    var EnvironmentEnvironmentExplorationRoute = (environment_id) => `/environment/${environment_id}/environment_exploration`;
    exports2.EnvironmentEnvironmentExplorationRoute = EnvironmentEnvironmentExplorationRoute;
    var EnvironmentEnvironmentPlanRoute = (environment_id) => `/environment/${environment_id}/environment_plan`;
    exports2.EnvironmentEnvironmentPlanRoute = EnvironmentEnvironmentPlanRoute;
    var EnvironmentEnvironmentProjectRoute = (environment_id) => `/environment/${environment_id}/environment_project`;
    exports2.EnvironmentEnvironmentProjectRoute = EnvironmentEnvironmentProjectRoute;
    var EnvironmentEnvironmentResourceRoute = (environment_id) => `/environment/${environment_id}/environment_resource`;
    exports2.EnvironmentEnvironmentResourceRoute = EnvironmentEnvironmentResourceRoute;
    var EnvironmentExplorationItemRoute = (environment_id) => `/environment/${environment_id}/exploration_item`;
    exports2.EnvironmentExplorationItemRoute = EnvironmentExplorationItemRoute;
    var EnvironmentRunResultRoute = (environment_id) => `/environment/${environment_id}/run_result`;
    exports2.EnvironmentRunResultRoute = EnvironmentRunResultRoute;
    var ExplorationRoute = () => `/exploration`;
    exports2.ExplorationRoute = ExplorationRoute;
    var ExplorationEnvironmentExplorationRoute = (exploration_id) => `/exploration/${exploration_id}/environment_exploration`;
    exports2.ExplorationEnvironmentExplorationRoute = ExplorationEnvironmentExplorationRoute;
    var ExplorationExplorationItemRoute = (exploration_id) => `/exploration/${exploration_id}/exploration_item`;
    exports2.ExplorationExplorationItemRoute = ExplorationExplorationItemRoute;
    var ExplorationItemRoute = () => `/exploration_item`;
    exports2.ExplorationItemRoute = ExplorationItemRoute;
    var ExplorationItemDefectExplorationItemRoute = (exploration_item_id) => `/exploration_item/${exploration_item_id}/defect_exploration_item`;
    exports2.ExplorationItemDefectExplorationItemRoute = ExplorationItemDefectExplorationItemRoute;
    var ExplorationItemLabelAssignedRoute = (exploration_item_id) => `/exploration_item/${exploration_item_id}/label_assigned`;
    exports2.ExplorationItemLabelAssignedRoute = ExplorationItemLabelAssignedRoute;
    var ExplorationLabelAssignedRoute = (exploration_id) => `/exploration/${exploration_id}/label_assigned`;
    exports2.ExplorationLabelAssignedRoute = ExplorationLabelAssignedRoute;
    var FilterRoute = () => `/filter`;
    exports2.FilterRoute = FilterRoute;
    var IntegrationRoute = () => `/integration`;
    exports2.IntegrationRoute = IntegrationRoute;
    var IntegrationAppInstallIntegrationRoute = (integration_id) => `/integration/${integration_id}/app_install_integration`;
    exports2.IntegrationAppInstallIntegrationRoute = IntegrationAppInstallIntegrationRoute;
    var IntegrationCapabilityRoute = (integration_id) => `/integration/${integration_id}/capability`;
    exports2.IntegrationCapabilityRoute = IntegrationCapabilityRoute;
    var IntegrationProjectRoute = (integration_id) => `/integration/${integration_id}/project`;
    exports2.IntegrationProjectRoute = IntegrationProjectRoute;
    var IntegrationStatusTypeRoute = () => `/integration_status_type`;
    exports2.IntegrationStatusTypeRoute = IntegrationStatusTypeRoute;
    var IntegrationStatusTypeNativeDefectStatusRoute = (integration_status_type_id) => `/integration_status_type/${integration_status_type_id}/native_defect_status`;
    exports2.IntegrationStatusTypeNativeDefectStatusRoute = IntegrationStatusTypeNativeDefectStatusRoute;
    var IntegrationTemplateRoute = () => `/integration_template`;
    exports2.IntegrationTemplateRoute = IntegrationTemplateRoute;
    var IntegrationUserRoute = (integration_id) => `/integration/${integration_id}/user`;
    exports2.IntegrationUserRoute = IntegrationUserRoute;
    var InvoiceRoute = () => `/invoice`;
    exports2.InvoiceRoute = InvoiceRoute;
    var InvoiceAttachmentRoute = (invoice_id) => `/invoice/${invoice_id}/attachment`;
    exports2.InvoiceAttachmentRoute = InvoiceAttachmentRoute;
    var InvoiceDisputeRoute = (invoice_id) => `/invoice/${invoice_id}/dispute`;
    exports2.InvoiceDisputeRoute = InvoiceDisputeRoute;
    var InvoicePaymentRoute = (invoice_id) => `/invoice/${invoice_id}/payment`;
    exports2.InvoicePaymentRoute = InvoicePaymentRoute;
    var LabelRoute = () => `/label`;
    exports2.LabelRoute = LabelRoute;
    var LabelAssignedRoute = () => `/label_assigned`;
    exports2.LabelAssignedRoute = LabelAssignedRoute;
    var LabelLabelAssignedRoute = (label_id) => `/label/${label_id}/label_assigned`;
    exports2.LabelLabelAssignedRoute = LabelLabelAssignedRoute;
    var LabelLabelProjectRoute = (label_id) => `/label/${label_id}/label_project`;
    exports2.LabelLabelProjectRoute = LabelLabelProjectRoute;
    var MilestoneRoute = () => `/milestone`;
    exports2.MilestoneRoute = MilestoneRoute;
    var MilestoneCommentRoute = (milestone_id) => `/milestone/${milestone_id}/comment`;
    exports2.MilestoneCommentRoute = MilestoneCommentRoute;
    var MilestoneExplorationRoute = (milestone_id) => `/milestone/${milestone_id}/exploration`;
    exports2.MilestoneExplorationRoute = MilestoneExplorationRoute;
    var MilestoneLabelAssignedRoute = (milestone_id) => `/milestone/${milestone_id}/label_assigned`;
    exports2.MilestoneLabelAssignedRoute = MilestoneLabelAssignedRoute;
    var MilestoneRunRoute = (milestone_id) => `/milestone/${milestone_id}/run`;
    exports2.MilestoneRunRoute = MilestoneRunRoute;
    var MilestoneTargetRoute = (milestone_id) => `/milestone/${milestone_id}/target`;
    exports2.MilestoneTargetRoute = MilestoneTargetRoute;
    var NativeDefectResRoute = () => `/native_defect_res`;
    exports2.NativeDefectResRoute = NativeDefectResRoute;
    var NativeDefectResDefectResRoute = (native_defect_res_id) => `/native_defect_res/${native_defect_res_id}/defect_res`;
    exports2.NativeDefectResDefectResRoute = NativeDefectResDefectResRoute;
    var NativeDefectResLabelAssignedRoute = (native_defect_res_id) => `/native_defect_res/${native_defect_res_id}/label_assigned`;
    exports2.NativeDefectResLabelAssignedRoute = NativeDefectResLabelAssignedRoute;
    var NativeDefectStatusRoute = () => `/native_defect_status`;
    exports2.NativeDefectStatusRoute = NativeDefectStatusRoute;
    var NativeDefectStatusDefectStatusRoute = (native_defect_status_id) => `/native_defect_status/${native_defect_status_id}/defect_status`;
    exports2.NativeDefectStatusDefectStatusRoute = NativeDefectStatusDefectStatusRoute;
    var NativeDefectStatusLabelAssignedRoute = (native_defect_status_id) => `/native_defect_status/${native_defect_status_id}/label_assigned`;
    exports2.NativeDefectStatusLabelAssignedRoute = NativeDefectStatusLabelAssignedRoute;
    var NotificationsRoute = () => `/notifications`;
    exports2.NotificationsRoute = NotificationsRoute;
    var PlanRoute = () => `/plan`;
    exports2.PlanRoute = PlanRoute;
    var PlanAttachmentRoute = (plan_id) => `/plan/${plan_id}/attachment`;
    exports2.PlanAttachmentRoute = PlanAttachmentRoute;
    var PlanCommentRoute = (plan_id) => `/plan/${plan_id}/comment`;
    exports2.PlanCommentRoute = PlanCommentRoute;
    var PlanEnvironmentPlanRoute = (plan_id) => `/plan/${plan_id}/environment_plan`;
    exports2.PlanEnvironmentPlanRoute = PlanEnvironmentPlanRoute;
    var PlanIntegrationProjectRoute = (plan_id) => `/plan/${plan_id}/integration_project`;
    exports2.PlanIntegrationProjectRoute = PlanIntegrationProjectRoute;
    var PlanLabelAssignedRoute = (plan_id) => `/plan/${plan_id}/label_assigned`;
    exports2.PlanLabelAssignedRoute = PlanLabelAssignedRoute;
    var PlanPlanSuiteTestIncludeRoute = (plan_id) => `/plan/${plan_id}/plan_suite_test_include`;
    exports2.PlanPlanSuiteTestIncludeRoute = PlanPlanSuiteTestIncludeRoute;
    var PlanPurposeRoute = (plan_id) => `/plan/${plan_id}/purpose`;
    exports2.PlanPurposeRoute = PlanPurposeRoute;
    var PlanRunRoute = (plan_id) => `/plan/${plan_id}/run`;
    exports2.PlanRunRoute = PlanRunRoute;
    var PlanSuiteRoute = (plan_id) => `/plan/${plan_id}/suite`;
    exports2.PlanSuiteRoute = PlanSuiteRoute;
    var PlanSuiteTestIncludeRoute = () => `/plan_suite_test_include`;
    exports2.PlanSuiteTestIncludeRoute = PlanSuiteTestIncludeRoute;
    var PlanWatchRoute = (plan_id) => `/plan/${plan_id}/watch`;
    exports2.PlanWatchRoute = PlanWatchRoute;
    var PolicyRoute = () => `/policy`;
    exports2.PolicyRoute = PolicyRoute;
    var PolicyPolicyRowsRoute = (policy_id) => `/policy/${policy_id}/policy_rows`;
    exports2.PolicyPolicyRowsRoute = PolicyPolicyRowsRoute;
    var PolicyRowsRoute = () => `/policy_rows`;
    exports2.PolicyRowsRoute = PolicyRowsRoute;
    var PriceRoute = () => `/price`;
    exports2.PriceRoute = PriceRoute;
    var PriceMarketplaceProductRoute = (price_id) => `/price/${price_id}/marketplace_product`;
    exports2.PriceMarketplaceProductRoute = PriceMarketplaceProductRoute;
    var PriceProductRoute = (price_id) => `/price/${price_id}/product`;
    exports2.PriceProductRoute = PriceProductRoute;
    var PriceQuoteItemRoute = (price_id) => `/price/${price_id}/quote_item`;
    exports2.PriceQuoteItemRoute = PriceQuoteItemRoute;
    var PriceSubscriptionsRoute = (price_id) => `/price/${price_id}/subscriptions`;
    exports2.PriceSubscriptionsRoute = PriceSubscriptionsRoute;
    var ProductRoute = () => `/product`;
    exports2.ProductRoute = ProductRoute;
    var ProductMarketplaceRoute = (product_id) => `/product/${product_id}/marketplace`;
    exports2.ProductMarketplaceRoute = ProductMarketplaceRoute;
    var ProductSubscriptionsRoute = (product_id) => `/product/${product_id}/subscriptions`;
    exports2.ProductSubscriptionsRoute = ProductSubscriptionsRoute;
    var ProjectRoute = () => `/project`;
    exports2.ProjectRoute = ProjectRoute;
    var ProjectAttachmentRoute = (project_id) => `/project/${project_id}/attachment`;
    exports2.ProjectAttachmentRoute = ProjectAttachmentRoute;
    var ProjectCasePriorityProjectRoute = (project_id) => `/project/${project_id}/case_priority_project`;
    exports2.ProjectCasePriorityProjectRoute = ProjectCasePriorityProjectRoute;
    var ProjectCaseTypeProjectRoute = (project_id) => `/project/${project_id}/case_type_project`;
    exports2.ProjectCaseTypeProjectRoute = ProjectCaseTypeProjectRoute;
    var ProjectCodeRoute = (project_id) => `/project/${project_id}/code`;
    exports2.ProjectCodeRoute = ProjectCodeRoute;
    var ProjectCommentRoute = (project_id) => `/project/${project_id}/comment`;
    exports2.ProjectCommentRoute = ProjectCommentRoute;
    var ProjectComponentDocRoute = (project_id) => `/project/${project_id}/component_doc`;
    exports2.ProjectComponentDocRoute = ProjectComponentDocRoute;
    var ProjectDataSetRoute = (project_id) => `/project/${project_id}/data_set`;
    exports2.ProjectDataSetRoute = ProjectDataSetRoute;
    var ProjectDefectRoute = (project_id) => `/project/${project_id}/defect`;
    exports2.ProjectDefectRoute = ProjectDefectRoute;
    var ProjectDocRoute = (project_id) => `/project/${project_id}/doc`;
    exports2.ProjectDocRoute = ProjectDocRoute;
    var ProjectEnvironmentProjectRoute = (project_id) => `/project/${project_id}/environment_project`;
    exports2.ProjectEnvironmentProjectRoute = ProjectEnvironmentProjectRoute;
    var ProjectExplorationRoute = (project_id) => `/project/${project_id}/exploration`;
    exports2.ProjectExplorationRoute = ProjectExplorationRoute;
    var ProjectExplorationItemRoute = (project_id) => `/project/${project_id}/exploration_item`;
    exports2.ProjectExplorationItemRoute = ProjectExplorationItemRoute;
    var ProjectFilterRoute = (project_id) => `/project/${project_id}/filter`;
    exports2.ProjectFilterRoute = ProjectFilterRoute;
    var ProjectIntegrationRoute = (project_id) => `/project/${project_id}/integration`;
    exports2.ProjectIntegrationRoute = ProjectIntegrationRoute;
    var ProjectLabelAssignedRoute = (project_id) => `/project/${project_id}/label_assigned`;
    exports2.ProjectLabelAssignedRoute = ProjectLabelAssignedRoute;
    var ProjectLabelProjectRoute = (project_id) => `/project/${project_id}/label_project`;
    exports2.ProjectLabelProjectRoute = ProjectLabelProjectRoute;
    var ProjectMilestoneRoute = (project_id) => `/project/${project_id}/milestone`;
    exports2.ProjectMilestoneRoute = ProjectMilestoneRoute;
    var ProjectPlanRoute = (project_id) => `/project/${project_id}/plan`;
    exports2.ProjectPlanRoute = ProjectPlanRoute;
    var ProjectPlanSuiteTestIncludeRoute = (project_id) => `/project/${project_id}/plan_suite_test_include`;
    exports2.ProjectPlanSuiteTestIncludeRoute = ProjectPlanSuiteTestIncludeRoute;
    var ProjectProjectCapabilityDefaultRoute = (project_id) => `/project/${project_id}/project_capability_default`;
    exports2.ProjectProjectCapabilityDefaultRoute = ProjectProjectCapabilityDefaultRoute;
    var ProjectProjectPurposeRoute = (project_id) => `/project/${project_id}/project_purpose`;
    exports2.ProjectProjectPurposeRoute = ProjectProjectPurposeRoute;
    var ProjectProjectStatusRoute = (project_id) => `/project/${project_id}/project_status`;
    exports2.ProjectProjectStatusRoute = ProjectProjectStatusRoute;
    var ProjectProjectUserRoute = (project_id) => `/project/${project_id}/project_user`;
    exports2.ProjectProjectUserRoute = ProjectProjectUserRoute;
    var ProjectRequirementRoute = (project_id) => `/project/${project_id}/requirement`;
    exports2.ProjectRequirementRoute = ProjectRequirementRoute;
    var ProjectRunRoute = (project_id) => `/project/${project_id}/run`;
    exports2.ProjectRunRoute = ProjectRunRoute;
    var ProjectRunResultRoute = (project_id) => `/project/${project_id}/run_result`;
    exports2.ProjectRunResultRoute = ProjectRunResultRoute;
    var ProjectRunResultStepRoute = (project_id) => `/project/${project_id}/run_result_step`;
    exports2.ProjectRunResultStepRoute = ProjectRunResultStepRoute;
    var ProjectRunSuiteRoute = (project_id) => `/project/${project_id}/run_suite`;
    exports2.ProjectRunSuiteRoute = ProjectRunSuiteRoute;
    var ProjectStepRoute = (project_id) => `/project/${project_id}/step`;
    exports2.ProjectStepRoute = ProjectStepRoute;
    var ProjectSuiteRoute = (project_id) => `/project/${project_id}/suite`;
    exports2.ProjectSuiteRoute = ProjectSuiteRoute;
    var ProjectTargetRoute = (project_id) => `/project/${project_id}/target`;
    exports2.ProjectTargetRoute = ProjectTargetRoute;
    var ProjectTaskRoute = (project_id) => `/project/${project_id}/task`;
    exports2.ProjectTaskRoute = ProjectTaskRoute;
    var ProjectTestRoute = (project_id) => `/project/${project_id}/test`;
    exports2.ProjectTestRoute = ProjectTestRoute;
    var ProjectWatchRoute = (project_id) => `/project/${project_id}/watch`;
    exports2.ProjectWatchRoute = ProjectWatchRoute;
    var PullRequestRoute = () => `/pull_request`;
    exports2.PullRequestRoute = PullRequestRoute;
    var PullRequestCheckSuitePullRequestRoute = (pull_request_id) => `/pull_request/${pull_request_id}/check_suite_pull_request`;
    exports2.PullRequestCheckSuitePullRequestRoute = PullRequestCheckSuitePullRequestRoute;
    var PullRequestPullRequestRequirementRoute = (pull_request_id) => `/pull_request/${pull_request_id}/pull_request_requirement`;
    exports2.PullRequestPullRequestRequirementRoute = PullRequestPullRequestRequirementRoute;
    var PullRequestPullRequestRunRoute = (pull_request_id) => `/pull_request/${pull_request_id}/pull_request_run`;
    exports2.PullRequestPullRequestRunRoute = PullRequestPullRequestRunRoute;
    var PurposeRoute = () => `/purpose`;
    exports2.PurposeRoute = PurposeRoute;
    var PurposeLabelAssignedRoute = (purpose_id) => `/purpose/${purpose_id}/label_assigned`;
    exports2.PurposeLabelAssignedRoute = PurposeLabelAssignedRoute;
    var PurposePlanRoute = (purpose_id) => `/purpose/${purpose_id}/plan`;
    exports2.PurposePlanRoute = PurposePlanRoute;
    var PurposeProjectPurposeRoute = (purpose_id) => `/purpose/${purpose_id}/project_purpose`;
    exports2.PurposeProjectPurposeRoute = PurposeProjectPurposeRoute;
    var RequirementRoute = () => `/requirement`;
    exports2.RequirementRoute = RequirementRoute;
    var RequirementAttachmentRoute = (requirement_id) => `/requirement/${requirement_id}/attachment`;
    exports2.RequirementAttachmentRoute = RequirementAttachmentRoute;
    var RequirementPullRequestRequirementRoute = (requirement_id) => `/requirement/${requirement_id}/pull_request_requirement`;
    exports2.RequirementPullRequestRequirementRoute = RequirementPullRequestRequirementRoute;
    var RequirementRequirementTestRoute = (requirement_id) => `/requirement/${requirement_id}/requirement_test`;
    exports2.RequirementRequirementTestRoute = RequirementRequirementTestRoute;
    var ResourceRoute = () => `/resource`;
    exports2.ResourceRoute = ResourceRoute;
    var ResourceEnvironmentResourceRoute = (resource_id) => `/resource/${resource_id}/environment_resource`;
    exports2.ResourceEnvironmentResourceRoute = ResourceEnvironmentResourceRoute;
    var ResourceResourceValueRoute = (resource_id) => `/resource/${resource_id}/resource_value`;
    exports2.ResourceResourceValueRoute = ResourceResourceValueRoute;
    var ResourceValueRoute = () => `/resource_value`;
    exports2.ResourceValueRoute = ResourceValueRoute;
    var ResourceValueEnvironmentResourceRoute = (resource_value_id) => `/resource_value/${resource_value_id}/environment_resource`;
    exports2.ResourceValueEnvironmentResourceRoute = ResourceValueEnvironmentResourceRoute;
    var RunRoute = () => `/run`;
    exports2.RunRoute = RunRoute;
    var RunCommentRoute = (run_id) => `/run/${run_id}/comment`;
    exports2.RunCommentRoute = RunCommentRoute;
    var RunLabelAssignedRoute = (run_id) => `/run/${run_id}/label_assigned`;
    exports2.RunLabelAssignedRoute = RunLabelAssignedRoute;
    var RunPullRequestRunRoute = (run_id) => `/run/${run_id}/pull_request_run`;
    exports2.RunPullRequestRunRoute = RunPullRequestRunRoute;
    var RunResultRoute = () => `/run_result`;
    exports2.RunResultRoute = RunResultRoute;
    var RunResultAttachmentRoute = (run_result_id) => `/run_result/${run_result_id}/attachment`;
    exports2.RunResultAttachmentRoute = RunResultAttachmentRoute;
    var RunResultCommentRoute = (run_result_id) => `/run_result/${run_result_id}/comment`;
    exports2.RunResultCommentRoute = RunResultCommentRoute;
    var RunResultDefectRoute = (run_result_id) => `/run_result/${run_result_id}/defect`;
    exports2.RunResultDefectRoute = RunResultDefectRoute;
    var RunResultLabelAssignedRoute = (run_result_id) => `/run_result/${run_result_id}/label_assigned`;
    exports2.RunResultLabelAssignedRoute = RunResultLabelAssignedRoute;
    var RunResultRunResultStepRoute = (run_result_id) => `/run_result/${run_result_id}/run_result_step`;
    exports2.RunResultRunResultStepRoute = RunResultRunResultStepRoute;
    var RunResultStepRoute = () => `/run_result_step`;
    exports2.RunResultStepRoute = RunResultStepRoute;
    var RunResultStepAttachmentRoute = (run_result_step_id) => `/run_result_step/${run_result_step_id}/attachment`;
    exports2.RunResultStepAttachmentRoute = RunResultStepAttachmentRoute;
    var RunResultStepCommentRoute = (run_result_step_id) => `/run_result_step/${run_result_step_id}/comment`;
    exports2.RunResultStepCommentRoute = RunResultStepCommentRoute;
    var RunResultStepLabelAssignedRoute = (run_result_step_id) => `/run_result_step/${run_result_step_id}/label_assigned`;
    exports2.RunResultStepLabelAssignedRoute = RunResultStepLabelAssignedRoute;
    var RunRunResultRoute = (run_id) => `/run/${run_id}/run_result`;
    exports2.RunRunResultRoute = RunRunResultRoute;
    var RunRunSuiteRoute = (run_id) => `/run/${run_id}/run_suite`;
    exports2.RunRunSuiteRoute = RunRunSuiteRoute;
    var RunSuiteRoute = () => `/run_suite`;
    exports2.RunSuiteRoute = RunSuiteRoute;
    var ShareRoute = () => `/share`;
    exports2.ShareRoute = ShareRoute;
    var ShareShareUserRoute = (share_id) => `/share/${share_id}/share_user`;
    exports2.ShareShareUserRoute = ShareShareUserRoute;
    var SharedPreconditionRoute = () => `/shared_precondition`;
    exports2.SharedPreconditionRoute = SharedPreconditionRoute;
    var SharedPreconditionTestRoute = (shared_precondition_id) => `/shared_precondition/${shared_precondition_id}/test`;
    exports2.SharedPreconditionTestRoute = SharedPreconditionTestRoute;
    var SharedStepRoute = () => `/shared_step`;
    exports2.SharedStepRoute = SharedStepRoute;
    var SharedStepLabelAssignedRoute = (shared_step_id) => `/shared_step/${shared_step_id}/label_assigned`;
    exports2.SharedStepLabelAssignedRoute = SharedStepLabelAssignedRoute;
    var SharedStepStepRoute = (shared_step_id) => `/shared_step/${shared_step_id}/step`;
    exports2.SharedStepStepRoute = SharedStepStepRoute;
    var SignupOptionRoute = () => `/signup_option`;
    exports2.SignupOptionRoute = SignupOptionRoute;
    var StatusRoute = () => `/status`;
    exports2.StatusRoute = StatusRoute;
    var StatusExplorationRoute = (status_id) => `/status/${status_id}/exploration`;
    exports2.StatusExplorationRoute = StatusExplorationRoute;
    var StatusExplorationItemRoute = (status_id) => `/status/${status_id}/exploration_item`;
    exports2.StatusExplorationItemRoute = StatusExplorationItemRoute;
    var StatusLabelAssignedRoute = (status_id) => `/status/${status_id}/label_assigned`;
    exports2.StatusLabelAssignedRoute = StatusLabelAssignedRoute;
    var StatusProjectStatusRoute = (status_id) => `/status/${status_id}/project_status`;
    exports2.StatusProjectStatusRoute = StatusProjectStatusRoute;
    var StatusRunResultRoute = (status_id) => `/status/${status_id}/run_result`;
    exports2.StatusRunResultRoute = StatusRunResultRoute;
    var StatusRunResultStepRoute = (status_id) => `/status/${status_id}/run_result_step`;
    exports2.StatusRunResultStepRoute = StatusRunResultStepRoute;
    var StatusTypeRoute = () => `/status_type`;
    exports2.StatusTypeRoute = StatusTypeRoute;
    var StatusTypeLabelAssignedRoute = (status_type_id) => `/status_type/${status_type_id}/label_assigned`;
    exports2.StatusTypeLabelAssignedRoute = StatusTypeLabelAssignedRoute;
    var StatusTypeStatusRoute = (status_type_id) => `/status_type/${status_type_id}/status`;
    exports2.StatusTypeStatusRoute = StatusTypeStatusRoute;
    var StepRoute = () => `/step`;
    exports2.StepRoute = StepRoute;
    var StepCommentRoute = (step_id) => `/step/${step_id}/comment`;
    exports2.StepCommentRoute = StepCommentRoute;
    var StepLabelAssignedRoute = (step_id) => `/step/${step_id}/label_assigned`;
    exports2.StepLabelAssignedRoute = StepLabelAssignedRoute;
    var StepRunResultStepRoute = (step_id) => `/step/${step_id}/run_result_step`;
    exports2.StepRunResultStepRoute = StepRunResultStepRoute;
    var StripeProductRoute = () => `/stripe_product`;
    exports2.StripeProductRoute = StripeProductRoute;
    var StripeProductPriceRoute = (stripe_product_id) => `/stripe_product/${stripe_product_id}/price`;
    exports2.StripeProductPriceRoute = StripeProductPriceRoute;
    var StripeProductProductRoute = (stripe_product_id) => `/stripe_product/${stripe_product_id}/product`;
    exports2.StripeProductProductRoute = StripeProductProductRoute;
    var SubscriptionUserRoute = () => `/subscription_user`;
    exports2.SubscriptionUserRoute = SubscriptionUserRoute;
    var SubscriptionsRoute = () => `/subscriptions`;
    exports2.SubscriptionsRoute = SubscriptionsRoute;
    var SubscriptionsBillingContactRoute = (subscriptions_id) => `/subscriptions/${subscriptions_id}/billing_contact`;
    exports2.SubscriptionsBillingContactRoute = SubscriptionsBillingContactRoute;
    var SubscriptionsQuoteItemRoute = (subscriptions_id) => `/subscriptions/${subscriptions_id}/quote_item`;
    exports2.SubscriptionsQuoteItemRoute = SubscriptionsQuoteItemRoute;
    var SubscriptionsSubscriptionUserRoute = (subscriptions_id) => `/subscriptions/${subscriptions_id}/subscription_user`;
    exports2.SubscriptionsSubscriptionUserRoute = SubscriptionsSubscriptionUserRoute;
    var SuiteRoute = () => `/suite`;
    exports2.SuiteRoute = SuiteRoute;
    var SuiteCommentRoute = (suite_id) => `/suite/${suite_id}/comment`;
    exports2.SuiteCommentRoute = SuiteCommentRoute;
    var SuiteLabelAssignedRoute = (suite_id) => `/suite/${suite_id}/label_assigned`;
    exports2.SuiteLabelAssignedRoute = SuiteLabelAssignedRoute;
    var SuitePlanRoute = (suite_id) => `/suite/${suite_id}/plan`;
    exports2.SuitePlanRoute = SuitePlanRoute;
    var SuitePlanSuiteTestIncludeRoute = (suite_id) => `/suite/${suite_id}/plan_suite_test_include`;
    exports2.SuitePlanSuiteTestIncludeRoute = SuitePlanSuiteTestIncludeRoute;
    var SuiteRequirementTestRoute = (suite_id) => `/suite/${suite_id}/requirement_test`;
    exports2.SuiteRequirementTestRoute = SuiteRequirementTestRoute;
    var SuiteRunResultRoute = (suite_id) => `/suite/${suite_id}/run_result`;
    exports2.SuiteRunResultRoute = SuiteRunResultRoute;
    var SuiteTestRoute = (suite_id) => `/suite/${suite_id}/test`;
    exports2.SuiteTestRoute = SuiteTestRoute;
    var SuiteWatchRoute = (suite_id) => `/suite/${suite_id}/watch`;
    exports2.SuiteWatchRoute = SuiteWatchRoute;
    var TestRoute = () => `/test`;
    exports2.TestRoute = TestRoute;
    var TestAttachmentRoute = (test_id) => `/test/${test_id}/attachment`;
    exports2.TestAttachmentRoute = TestAttachmentRoute;
    var TestCommentRoute = (test_id) => `/test/${test_id}/comment`;
    exports2.TestCommentRoute = TestCommentRoute;
    var TestLabelAssignedRoute = (test_id) => `/test/${test_id}/label_assigned`;
    exports2.TestLabelAssignedRoute = TestLabelAssignedRoute;
    var TestPlanSuiteTestIncludeRoute = (test_id) => `/test/${test_id}/plan_suite_test_include`;
    exports2.TestPlanSuiteTestIncludeRoute = TestPlanSuiteTestIncludeRoute;
    var TestQualityRoute = () => `/test_quality`;
    exports2.TestQualityRoute = TestQualityRoute;
    var TestQualityLabelAssignedRoute = (test_quality_id) => `/test_quality/${test_quality_id}/label_assigned`;
    exports2.TestQualityLabelAssignedRoute = TestQualityLabelAssignedRoute;
    var TestQualityTestRoute = (test_quality_id) => `/test_quality/${test_quality_id}/test`;
    exports2.TestQualityTestRoute = TestQualityTestRoute;
    var TestQualityTypeRoute = () => `/test_quality_type`;
    exports2.TestQualityTypeRoute = TestQualityTypeRoute;
    var TestQualityTypeLabelAssignedRoute = (test_quality_type_id) => `/test_quality_type/${test_quality_type_id}/label_assigned`;
    exports2.TestQualityTypeLabelAssignedRoute = TestQualityTypeLabelAssignedRoute;
    var TestQualityTypeTestQualityRoute = (test_quality_type_id) => `/test_quality_type/${test_quality_type_id}/test_quality`;
    exports2.TestQualityTypeTestQualityRoute = TestQualityTypeTestQualityRoute;
    var TestRequirementTestRoute = (test_id) => `/test/${test_id}/requirement_test`;
    exports2.TestRequirementTestRoute = TestRequirementTestRoute;
    var TestRunResultRoute = (test_id) => `/test/${test_id}/run_result`;
    exports2.TestRunResultRoute = TestRunResultRoute;
    var TestStepRoute = (test_id) => `/test/${test_id}/step`;
    exports2.TestStepRoute = TestStepRoute;
    var TestSuiteRoute = (test_id) => `/test/${test_id}/suite`;
    exports2.TestSuiteRoute = TestSuiteRoute;
    var TestWatchRoute = (test_id) => `/test/${test_id}/watch`;
    exports2.TestWatchRoute = TestWatchRoute;
    var UserRoute = () => `/user`;
    exports2.UserRoute = UserRoute;
    var UserAccessRoleRoute = (user_id) => `/user/${user_id}/access_role`;
    exports2.UserAccessRoleRoute = UserAccessRoleRoute;
    var UserAttachmentRoute = (user_id) => `/user/${user_id}/attachment`;
    exports2.UserAttachmentRoute = UserAttachmentRoute;
    var UserBillingContactRoute = (user_id) => `/user/${user_id}/billing_contact`;
    exports2.UserBillingContactRoute = UserBillingContactRoute;
    var UserCheckListItemUserRoute = (user_id) => `/user/${user_id}/check_list_item_user`;
    exports2.UserCheckListItemUserRoute = UserCheckListItemUserRoute;
    var UserExportRoute = (user_id) => `/user/${user_id}/export`;
    exports2.UserExportRoute = UserExportRoute;
    var UserFeatureUserRoute = (user_id) => `/user/${user_id}/feature_user`;
    exports2.UserFeatureUserRoute = UserFeatureUserRoute;
    var UserIntegrationRoute = (user_id) => `/user/${user_id}/integration`;
    exports2.UserIntegrationRoute = UserIntegrationRoute;
    var UserNotificationsRoute = (user_id) => `/user/${user_id}/notifications`;
    exports2.UserNotificationsRoute = UserNotificationsRoute;
    var UserProjectUserRoute = (user_id) => `/user/${user_id}/project_user`;
    exports2.UserProjectUserRoute = UserProjectUserRoute;
    var UserQuoteRoute = (user_id) => `/user/${user_id}/quote`;
    exports2.UserQuoteRoute = UserQuoteRoute;
    var UserReportRoute = (user_id) => `/user/${user_id}/report`;
    exports2.UserReportRoute = UserReportRoute;
    var UserShareUserRoute = (user_id) => `/user/${user_id}/share_user`;
    exports2.UserShareUserRoute = UserShareUserRoute;
    var UserSubscriptionUserRoute = (user_id) => `/user/${user_id}/subscription_user`;
    exports2.UserSubscriptionUserRoute = UserSubscriptionUserRoute;
    var UserSubscriptionsRoute = (user_id) => `/user/${user_id}/subscriptions`;
    exports2.UserSubscriptionsRoute = UserSubscriptionsRoute;
    var UserSupportRoute = (user_id) => `/user/${user_id}/support`;
    exports2.UserSupportRoute = UserSupportRoute;
    var UserSupportAgentRoute = (user_id) => `/user/${user_id}/support_agent`;
    exports2.UserSupportAgentRoute = UserSupportAgentRoute;
    var UserUserLogRoute = (user_id) => `/user/${user_id}/user_log`;
    exports2.UserUserLogRoute = UserUserLogRoute;
    var VirtualRoute = () => `/virtual`;
    exports2.VirtualRoute = VirtualRoute;
    var WatchRoute = () => `/watch`;
    exports2.WatchRoute = WatchRoute;
    var WebinarRoute = () => `/webinar`;
    exports2.WebinarRoute = WebinarRoute;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/access_role/accessRoleHistoryService.js
var require_accessRoleHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/access_role/accessRoleHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.accessRoleHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var accessRoleHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleHistoryGet = accessRoleHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/actions/chunkArray.js
var require_chunkArray = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/actions/chunkArray.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chunkArray = void 0;
    function chunkArray(array, chunkCount) {
      const chunks = [];
      for (let i = 0; i < array.length; i += chunkCount) {
        chunks.push(array.slice(i, i + chunkCount));
      }
      return chunks;
    }
    exports2.chunkArray = chunkArray;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/access_role/accessRoleService.js
var require_accessRoleService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/access_role/accessRoleService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.accessRoleCreateMany = exports2.accessRoleCreateOne = exports2.accessRoleUpdateMany = exports2.accessRoleUpdateOne = exports2.accessRoleDeleteMany = exports2.accessRoleDeleteOne = exports2.accessRoleGetOne = exports2.accessRoleGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var accessRoleGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleGetMany = accessRoleGetMany;
    var accessRoleGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleGetOne = accessRoleGetOne;
    var accessRoleDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleDeleteOne = accessRoleDeleteOne;
    var accessRoleDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.accessRoleDeleteMany = accessRoleDeleteMany;
    var accessRoleUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleUpdateOne = accessRoleUpdateOne;
    var accessRoleUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.accessRoleUpdateMany = accessRoleUpdateMany;
    var accessRoleCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleCreateOne = accessRoleCreateOne;
    var accessRoleCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AccessRoleRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.accessRoleCreateMany = accessRoleCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/access_role_user/accessRoleUserService.js
var require_accessRoleUserService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/access_role_user/accessRoleUserService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.accessRoleUserGetOne = exports2.accessRoleUserGetMany = exports2.accessRoleUserCreateMany = exports2.accessRoleUserCreateOne = exports2.accessRoleUserUpdateMany = exports2.accessRoleUserUpdateOne = exports2.accessRoleUserDeleteMany = exports2.accessRoleUserDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var accessRoleUserDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/access_role_user/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleUserDetach = accessRoleUserDetach;
    var accessRoleUserDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/access_role_user/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.accessRoleUserDeleteMany = accessRoleUserDeleteMany;
    var accessRoleUserUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/access_role_user/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleUserUpdateOne = accessRoleUserUpdateOne;
    var accessRoleUserUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/access_role_user`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.accessRoleUserUpdateMany = accessRoleUserUpdateMany;
    var accessRoleUserCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/access_role_user`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleUserCreateOne = accessRoleUserCreateOne;
    var accessRoleUserCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/access_role_user`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.accessRoleUserCreateMany = accessRoleUserCreateMany;
    var accessRoleUserGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/access_role_user`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleUserGetMany = accessRoleUserGetMany;
    var accessRoleUserGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/access_role_user/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.accessRoleUserGetOne = accessRoleUserGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/app_config/appConfigHistoryService.js
var require_appConfigHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/app_config/appConfigHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.appConfigHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var appConfigHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appConfigHistoryGet = appConfigHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/app_config/appConfigService.js
var require_appConfigService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/app_config/appConfigService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.appConfigCreateMany = exports2.appConfigCreateOne = exports2.appConfigUpdateMany = exports2.appConfigUpdateOne = exports2.appConfigDeleteMany = exports2.appConfigDeleteOne = exports2.appConfigGetOne = exports2.appConfigGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var appConfigGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appConfigGetMany = appConfigGetMany;
    var appConfigGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appConfigGetOne = appConfigGetOne;
    var appConfigDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appConfigDeleteOne = appConfigDeleteOne;
    var appConfigDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appConfigDeleteMany = appConfigDeleteMany;
    var appConfigUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appConfigUpdateOne = appConfigUpdateOne;
    var appConfigUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appConfigUpdateMany = appConfigUpdateMany;
    var appConfigCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appConfigCreateOne = appConfigCreateOne;
    var appConfigCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppConfigRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appConfigCreateMany = appConfigCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/app_install/appInstallHistoryService.js
var require_appInstallHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/app_install/appInstallHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.appInstallHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var appInstallHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallHistoryGet = appInstallHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/app_install/appInstallService.js
var require_appInstallService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/app_install/appInstallService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.appInstallCreateMany = exports2.appInstallCreateOne = exports2.appInstallUpdateMany = exports2.appInstallUpdateOne = exports2.appInstallDeleteMany = exports2.appInstallDeleteOne = exports2.appInstallGetOne = exports2.appInstallGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var appInstallGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallGetMany = appInstallGetMany;
    var appInstallGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallGetOne = appInstallGetOne;
    var appInstallDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallDeleteOne = appInstallDeleteOne;
    var appInstallDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appInstallDeleteMany = appInstallDeleteMany;
    var appInstallUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallUpdateOne = appInstallUpdateOne;
    var appInstallUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appInstallUpdateMany = appInstallUpdateMany;
    var appInstallCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallCreateOne = appInstallCreateOne;
    var appInstallCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appInstallCreateMany = appInstallCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/app_install_project/appInstallProjectHistoryService.js
var require_appInstallProjectHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/app_install_project/appInstallProjectHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.appInstallProjectHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var appInstallProjectHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallProjectHistoryGet = appInstallProjectHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/app_install_project/appInstallProjectService.js
var require_appInstallProjectService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/app_install_project/appInstallProjectService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.appInstallProjectCreateMany = exports2.appInstallProjectCreateOne = exports2.appInstallProjectUpdateMany = exports2.appInstallProjectUpdateOne = exports2.appInstallProjectDeleteMany = exports2.appInstallProjectDeleteOne = exports2.appInstallProjectGetOne = exports2.appInstallProjectGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var appInstallProjectGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallProjectGetMany = appInstallProjectGetMany;
    var appInstallProjectGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallProjectGetOne = appInstallProjectGetOne;
    var appInstallProjectDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallProjectDeleteOne = appInstallProjectDeleteOne;
    var appInstallProjectDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appInstallProjectDeleteMany = appInstallProjectDeleteMany;
    var appInstallProjectUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallProjectUpdateOne = appInstallProjectUpdateOne;
    var appInstallProjectUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appInstallProjectUpdateMany = appInstallProjectUpdateMany;
    var appInstallProjectCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appInstallProjectCreateOne = appInstallProjectCreateOne;
    var appInstallProjectCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppInstallProjectRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appInstallProjectCreateMany = appInstallProjectCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/app_user/appUserHistoryService.js
var require_appUserHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/app_user/appUserHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.appUserHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var appUserHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appUserHistoryGet = appUserHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/app_user/appUserService.js
var require_appUserService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/app_user/appUserService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.appUserCreateMany = exports2.appUserCreateOne = exports2.appUserUpdateMany = exports2.appUserUpdateOne = exports2.appUserDeleteMany = exports2.appUserDeleteOne = exports2.appUserGetOne = exports2.appUserGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var appUserGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appUserGetMany = appUserGetMany;
    var appUserGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appUserGetOne = appUserGetOne;
    var appUserDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appUserDeleteOne = appUserDeleteOne;
    var appUserDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appUserDeleteMany = appUserDeleteMany;
    var appUserUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appUserUpdateOne = appUserUpdateOne;
    var appUserUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appUserUpdateMany = appUserUpdateMany;
    var appUserCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.appUserCreateOne = appUserCreateOne;
    var appUserCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AppUserRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.appUserCreateMany = appUserCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/attachment/attachmentHistoryService.js
var require_attachmentHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/attachment/attachmentHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.attachmentHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var attachmentHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.attachmentHistoryGet = attachmentHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/attachment/attachmentService.js
var require_attachmentService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/attachment/attachmentService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.attachmentCreateMany = exports2.attachmentCreateOne = exports2.attachmentUpdateMany = exports2.attachmentUpdateOne = exports2.attachmentDeleteMany = exports2.attachmentDeleteOne = exports2.attachmentGetOne = exports2.attachmentGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var attachmentGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.attachmentGetMany = attachmentGetMany;
    var attachmentGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.attachmentGetOne = attachmentGetOne;
    var attachmentDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.attachmentDeleteOne = attachmentDeleteOne;
    var attachmentDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.attachmentDeleteMany = attachmentDeleteMany;
    var attachmentUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.attachmentUpdateOne = attachmentUpdateOne;
    var attachmentUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.attachmentUpdateMany = attachmentUpdateMany;
    var attachmentCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.attachmentCreateOne = attachmentCreateOne;
    var attachmentCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.AttachmentRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.attachmentCreateMany = attachmentCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/base_capability/baseCapabilityHistoryService.js
var require_baseCapabilityHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/base_capability/baseCapabilityHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseCapabilityHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var baseCapabilityHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityHistoryGet = baseCapabilityHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/base_capability/baseCapabilityService.js
var require_baseCapabilityService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/base_capability/baseCapabilityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseCapabilityCreateMany = exports2.baseCapabilityCreateOne = exports2.baseCapabilityUpdateMany = exports2.baseCapabilityUpdateOne = exports2.baseCapabilityDeleteMany = exports2.baseCapabilityDeleteOne = exports2.baseCapabilityGetOne = exports2.baseCapabilityGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var baseCapabilityGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityGetMany = baseCapabilityGetMany;
    var baseCapabilityGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityGetOne = baseCapabilityGetOne;
    var baseCapabilityDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityDeleteOne = baseCapabilityDeleteOne;
    var baseCapabilityDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseCapabilityDeleteMany = baseCapabilityDeleteMany;
    var baseCapabilityUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityUpdateOne = baseCapabilityUpdateOne;
    var baseCapabilityUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseCapabilityUpdateMany = baseCapabilityUpdateMany;
    var baseCapabilityCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityCreateOne = baseCapabilityCreateOne;
    var baseCapabilityCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseCapabilityRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseCapabilityCreateMany = baseCapabilityCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/base_capability_base_integration/baseCapabilityBaseIntegrationService.js
var require_baseCapabilityBaseIntegrationService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/base_capability_base_integration/baseCapabilityBaseIntegrationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseCapabilityBaseIntegrationGetOne = exports2.baseCapabilityBaseIntegrationGetMany = exports2.baseCapabilityBaseIntegrationCreateMany = exports2.baseCapabilityBaseIntegrationCreateOne = exports2.baseCapabilityBaseIntegrationUpdateMany = exports2.baseCapabilityBaseIntegrationUpdateOne = exports2.baseCapabilityBaseIntegrationDeleteMany = exports2.baseCapabilityBaseIntegrationDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var baseCapabilityBaseIntegrationDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/base_capability_base_integration/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityBaseIntegrationDetach = baseCapabilityBaseIntegrationDetach;
    var baseCapabilityBaseIntegrationDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/base_capability_base_integration/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseCapabilityBaseIntegrationDeleteMany = baseCapabilityBaseIntegrationDeleteMany;
    var baseCapabilityBaseIntegrationUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/base_capability_base_integration/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityBaseIntegrationUpdateOne = baseCapabilityBaseIntegrationUpdateOne;
    var baseCapabilityBaseIntegrationUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/base_capability_base_integration`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseCapabilityBaseIntegrationUpdateMany = baseCapabilityBaseIntegrationUpdateMany;
    var baseCapabilityBaseIntegrationCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/base_capability_base_integration`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityBaseIntegrationCreateOne = baseCapabilityBaseIntegrationCreateOne;
    var baseCapabilityBaseIntegrationCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/base_capability_base_integration`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseCapabilityBaseIntegrationCreateMany = baseCapabilityBaseIntegrationCreateMany;
    var baseCapabilityBaseIntegrationGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/base_capability_base_integration`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityBaseIntegrationGetMany = baseCapabilityBaseIntegrationGetMany;
    var baseCapabilityBaseIntegrationGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/base_capability_base_integration/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseCapabilityBaseIntegrationGetOne = baseCapabilityBaseIntegrationGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/base_integration/baseIntegrationHistoryService.js
var require_baseIntegrationHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/base_integration/baseIntegrationHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseIntegrationHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var baseIntegrationHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseIntegrationHistoryGet = baseIntegrationHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/base_integration/baseIntegrationService.js
var require_baseIntegrationService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/base_integration/baseIntegrationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseIntegrationCreateMany = exports2.baseIntegrationCreateOne = exports2.baseIntegrationUpdateMany = exports2.baseIntegrationUpdateOne = exports2.baseIntegrationDeleteMany = exports2.baseIntegrationDeleteOne = exports2.baseIntegrationGetOne = exports2.baseIntegrationGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var baseIntegrationGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseIntegrationGetMany = baseIntegrationGetMany;
    var baseIntegrationGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseIntegrationGetOne = baseIntegrationGetOne;
    var baseIntegrationDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseIntegrationDeleteOne = baseIntegrationDeleteOne;
    var baseIntegrationDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseIntegrationDeleteMany = baseIntegrationDeleteMany;
    var baseIntegrationUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseIntegrationUpdateOne = baseIntegrationUpdateOne;
    var baseIntegrationUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseIntegrationUpdateMany = baseIntegrationUpdateMany;
    var baseIntegrationCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.baseIntegrationCreateOne = baseIntegrationCreateOne;
    var baseIntegrationCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BaseIntegrationRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.baseIntegrationCreateMany = baseIntegrationCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/billing_contact/billingContactHistoryService.js
var require_billingContactHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/billing_contact/billingContactHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.billingContactHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var billingContactHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.billingContactHistoryGet = billingContactHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/billing_contact/billingContactService.js
var require_billingContactService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/billing_contact/billingContactService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.billingContactCreateMany = exports2.billingContactCreateOne = exports2.billingContactUpdateMany = exports2.billingContactUpdateOne = exports2.billingContactDeleteMany = exports2.billingContactDeleteOne = exports2.billingContactGetOne = exports2.billingContactGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var billingContactGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.billingContactGetMany = billingContactGetMany;
    var billingContactGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.billingContactGetOne = billingContactGetOne;
    var billingContactDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.billingContactDeleteOne = billingContactDeleteOne;
    var billingContactDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.billingContactDeleteMany = billingContactDeleteMany;
    var billingContactUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.billingContactUpdateOne = billingContactUpdateOne;
    var billingContactUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.billingContactUpdateMany = billingContactUpdateMany;
    var billingContactCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.billingContactCreateOne = billingContactCreateOne;
    var billingContactCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.BillingContactRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.billingContactCreateMany = billingContactCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/capability/capabilityHistoryService.js
var require_capabilityHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/capability/capabilityHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.capabilityHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var capabilityHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityHistoryGet = capabilityHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/capability/capabilityService.js
var require_capabilityService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/capability/capabilityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.capabilityCreateMany = exports2.capabilityCreateOne = exports2.capabilityUpdateMany = exports2.capabilityUpdateOne = exports2.capabilityDeleteMany = exports2.capabilityDeleteOne = exports2.capabilityGetOne = exports2.capabilityGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var capabilityGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityGetMany = capabilityGetMany;
    var capabilityGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityGetOne = capabilityGetOne;
    var capabilityDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityDeleteOne = capabilityDeleteOne;
    var capabilityDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.capabilityDeleteMany = capabilityDeleteMany;
    var capabilityUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityUpdateOne = capabilityUpdateOne;
    var capabilityUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.capabilityUpdateMany = capabilityUpdateMany;
    var capabilityCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityCreateOne = capabilityCreateOne;
    var capabilityCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CapabilityRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.capabilityCreateMany = capabilityCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/capability_integration/capabilityIntegrationService.js
var require_capabilityIntegrationService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/capability_integration/capabilityIntegrationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.capabilityIntegrationGetOne = exports2.capabilityIntegrationGetMany = exports2.capabilityIntegrationCreateMany = exports2.capabilityIntegrationCreateOne = exports2.capabilityIntegrationUpdateMany = exports2.capabilityIntegrationUpdateOne = exports2.capabilityIntegrationDeleteMany = exports2.capabilityIntegrationDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var capabilityIntegrationDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/capability_integration/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityIntegrationDetach = capabilityIntegrationDetach;
    var capabilityIntegrationDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/capability_integration/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.capabilityIntegrationDeleteMany = capabilityIntegrationDeleteMany;
    var capabilityIntegrationUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/capability_integration/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityIntegrationUpdateOne = capabilityIntegrationUpdateOne;
    var capabilityIntegrationUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/capability_integration`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.capabilityIntegrationUpdateMany = capabilityIntegrationUpdateMany;
    var capabilityIntegrationCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/capability_integration`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityIntegrationCreateOne = capabilityIntegrationCreateOne;
    var capabilityIntegrationCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/capability_integration`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.capabilityIntegrationCreateMany = capabilityIntegrationCreateMany;
    var capabilityIntegrationGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/capability_integration`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityIntegrationGetMany = capabilityIntegrationGetMany;
    var capabilityIntegrationGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/capability_integration/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.capabilityIntegrationGetOne = capabilityIntegrationGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/case_priority/casePriorityHistoryService.js
var require_casePriorityHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/case_priority/casePriorityHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.casePriorityHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var casePriorityHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityHistoryGet = casePriorityHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/case_priority/casePriorityService.js
var require_casePriorityService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/case_priority/casePriorityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.casePriorityCreateMany = exports2.casePriorityCreateOne = exports2.casePriorityUpdateMany = exports2.casePriorityUpdateOne = exports2.casePriorityDeleteMany = exports2.casePriorityDeleteOne = exports2.casePriorityGetOne = exports2.casePriorityGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var casePriorityGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityGetMany = casePriorityGetMany;
    var casePriorityGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityGetOne = casePriorityGetOne;
    var casePriorityDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityDeleteOne = casePriorityDeleteOne;
    var casePriorityDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.casePriorityDeleteMany = casePriorityDeleteMany;
    var casePriorityUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityUpdateOne = casePriorityUpdateOne;
    var casePriorityUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.casePriorityUpdateMany = casePriorityUpdateMany;
    var casePriorityCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityCreateOne = casePriorityCreateOne;
    var casePriorityCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CasePriorityRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.casePriorityCreateMany = casePriorityCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/case_priority_project/casePriorityProjectService.js
var require_casePriorityProjectService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/case_priority_project/casePriorityProjectService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.casePriorityProjectGetOne = exports2.casePriorityProjectGetMany = exports2.casePriorityProjectCreateMany = exports2.casePriorityProjectCreateOne = exports2.casePriorityProjectUpdateMany = exports2.casePriorityProjectUpdateOne = exports2.casePriorityProjectDeleteMany = exports2.casePriorityProjectDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var casePriorityProjectDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/case_priority_project/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityProjectDetach = casePriorityProjectDetach;
    var casePriorityProjectDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/case_priority_project/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.casePriorityProjectDeleteMany = casePriorityProjectDeleteMany;
    var casePriorityProjectUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/case_priority_project/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityProjectUpdateOne = casePriorityProjectUpdateOne;
    var casePriorityProjectUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_priority_project`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.casePriorityProjectUpdateMany = casePriorityProjectUpdateMany;
    var casePriorityProjectCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_priority_project`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityProjectCreateOne = casePriorityProjectCreateOne;
    var casePriorityProjectCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_priority_project`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.casePriorityProjectCreateMany = casePriorityProjectCreateMany;
    var casePriorityProjectGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_priority_project`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityProjectGetMany = casePriorityProjectGetMany;
    var casePriorityProjectGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_priority_project/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.casePriorityProjectGetOne = casePriorityProjectGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/case_type/caseTypeHistoryService.js
var require_caseTypeHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/case_type/caseTypeHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.caseTypeHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var caseTypeHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeHistoryGet = caseTypeHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/case_type/caseTypeService.js
var require_caseTypeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/case_type/caseTypeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.caseTypeCreateMany = exports2.caseTypeCreateOne = exports2.caseTypeUpdateMany = exports2.caseTypeUpdateOne = exports2.caseTypeDeleteMany = exports2.caseTypeDeleteOne = exports2.caseTypeGetOne = exports2.caseTypeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var caseTypeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeGetMany = caseTypeGetMany;
    var caseTypeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeGetOne = caseTypeGetOne;
    var caseTypeDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeDeleteOne = caseTypeDeleteOne;
    var caseTypeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.caseTypeDeleteMany = caseTypeDeleteMany;
    var caseTypeUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeUpdateOne = caseTypeUpdateOne;
    var caseTypeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.caseTypeUpdateMany = caseTypeUpdateMany;
    var caseTypeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeCreateOne = caseTypeCreateOne;
    var caseTypeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CaseTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.caseTypeCreateMany = caseTypeCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/case_type_project/caseTypeProjectService.js
var require_caseTypeProjectService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/case_type_project/caseTypeProjectService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.caseTypeProjectGetOne = exports2.caseTypeProjectGetMany = exports2.caseTypeProjectCreateMany = exports2.caseTypeProjectCreateOne = exports2.caseTypeProjectUpdateMany = exports2.caseTypeProjectUpdateOne = exports2.caseTypeProjectDeleteMany = exports2.caseTypeProjectDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var caseTypeProjectDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/case_type_project/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeProjectDetach = caseTypeProjectDetach;
    var caseTypeProjectDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/case_type_project/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.caseTypeProjectDeleteMany = caseTypeProjectDeleteMany;
    var caseTypeProjectUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/case_type_project/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeProjectUpdateOne = caseTypeProjectUpdateOne;
    var caseTypeProjectUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_type_project`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.caseTypeProjectUpdateMany = caseTypeProjectUpdateMany;
    var caseTypeProjectCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_type_project`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeProjectCreateOne = caseTypeProjectCreateOne;
    var caseTypeProjectCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_type_project`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.caseTypeProjectCreateMany = caseTypeProjectCreateMany;
    var caseTypeProjectGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_type_project`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeProjectGetMany = caseTypeProjectGetMany;
    var caseTypeProjectGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/case_type_project/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.caseTypeProjectGetOne = caseTypeProjectGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/check_list/checkListService.js
var require_checkListService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/check_list/checkListService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkListCreateMany = exports2.checkListCreateOne = exports2.checkListUpdateMany = exports2.checkListUpdateOne = exports2.checkListDeleteMany = exports2.checkListDeleteOne = exports2.checkListGetOne = exports2.checkListGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var checkListGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListGetMany = checkListGetMany;
    var checkListGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListGetOne = checkListGetOne;
    var checkListDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListDeleteOne = checkListDeleteOne;
    var checkListDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListDeleteMany = checkListDeleteMany;
    var checkListUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListUpdateOne = checkListUpdateOne;
    var checkListUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListUpdateMany = checkListUpdateMany;
    var checkListCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListCreateOne = checkListCreateOne;
    var checkListCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListCreateMany = checkListCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/check_list_item/checkListItemService.js
var require_checkListItemService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/check_list_item/checkListItemService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkListItemCreateMany = exports2.checkListItemCreateOne = exports2.checkListItemUpdateMany = exports2.checkListItemUpdateOne = exports2.checkListItemDeleteMany = exports2.checkListItemDeleteOne = exports2.checkListItemGetOne = exports2.checkListItemGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var checkListItemGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListItemRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemGetMany = checkListItemGetMany;
    var checkListItemGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListItemRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemGetOne = checkListItemGetOne;
    var checkListItemDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListItemRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemDeleteOne = checkListItemDeleteOne;
    var checkListItemDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListItemRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListItemDeleteMany = checkListItemDeleteMany;
    var checkListItemUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListItemRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemUpdateOne = checkListItemUpdateOne;
    var checkListItemUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListItemRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListItemUpdateMany = checkListItemUpdateMany;
    var checkListItemCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListItemRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemCreateOne = checkListItemCreateOne;
    var checkListItemCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckListItemRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListItemCreateMany = checkListItemCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/check_list_item_user/checkListItemUserService.js
var require_checkListItemUserService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/check_list_item_user/checkListItemUserService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkListItemUserGetOne = exports2.checkListItemUserGetMany = exports2.checkListItemUserCreateMany = exports2.checkListItemUserCreateOne = exports2.checkListItemUserUpdateMany = exports2.checkListItemUserUpdateOne = exports2.checkListItemUserDeleteMany = exports2.checkListItemUserDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var checkListItemUserDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/check_list_item_user/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemUserDetach = checkListItemUserDetach;
    var checkListItemUserDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/check_list_item_user/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListItemUserDeleteMany = checkListItemUserDeleteMany;
    var checkListItemUserUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/check_list_item_user/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemUserUpdateOne = checkListItemUserUpdateOne;
    var checkListItemUserUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_list_item_user`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListItemUserUpdateMany = checkListItemUserUpdateMany;
    var checkListItemUserCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_list_item_user`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemUserCreateOne = checkListItemUserCreateOne;
    var checkListItemUserCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_list_item_user`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkListItemUserCreateMany = checkListItemUserCreateMany;
    var checkListItemUserGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_list_item_user`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemUserGetMany = checkListItemUserGetMany;
    var checkListItemUserGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_list_item_user/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkListItemUserGetOne = checkListItemUserGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/check_run/checkRunHistoryService.js
var require_checkRunHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/check_run/checkRunHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkRunHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var checkRunHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkRunHistoryGet = checkRunHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/check_run/checkRunService.js
var require_checkRunService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/check_run/checkRunService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkRunCreateMany = exports2.checkRunCreateOne = exports2.checkRunUpdateMany = exports2.checkRunUpdateOne = exports2.checkRunDeleteMany = exports2.checkRunDeleteOne = exports2.checkRunGetOne = exports2.checkRunGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var checkRunGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkRunGetMany = checkRunGetMany;
    var checkRunGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkRunGetOne = checkRunGetOne;
    var checkRunDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkRunDeleteOne = checkRunDeleteOne;
    var checkRunDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkRunDeleteMany = checkRunDeleteMany;
    var checkRunUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkRunUpdateOne = checkRunUpdateOne;
    var checkRunUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkRunUpdateMany = checkRunUpdateMany;
    var checkRunCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkRunCreateOne = checkRunCreateOne;
    var checkRunCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckRunRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkRunCreateMany = checkRunCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/check_suite/checkSuiteHistoryService.js
var require_checkSuiteHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/check_suite/checkSuiteHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkSuiteHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var checkSuiteHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuiteHistoryGet = checkSuiteHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/check_suite/checkSuiteService.js
var require_checkSuiteService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/check_suite/checkSuiteService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkSuiteCreateMany = exports2.checkSuiteCreateOne = exports2.checkSuiteUpdateMany = exports2.checkSuiteUpdateOne = exports2.checkSuiteDeleteMany = exports2.checkSuiteDeleteOne = exports2.checkSuiteGetOne = exports2.checkSuiteGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var checkSuiteGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuiteGetMany = checkSuiteGetMany;
    var checkSuiteGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuiteGetOne = checkSuiteGetOne;
    var checkSuiteDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuiteDeleteOne = checkSuiteDeleteOne;
    var checkSuiteDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkSuiteDeleteMany = checkSuiteDeleteMany;
    var checkSuiteUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuiteUpdateOne = checkSuiteUpdateOne;
    var checkSuiteUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkSuiteUpdateMany = checkSuiteUpdateMany;
    var checkSuiteCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuiteCreateOne = checkSuiteCreateOne;
    var checkSuiteCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CheckSuiteRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkSuiteCreateMany = checkSuiteCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/check_suite_pull_request/checkSuitePullRequestService.js
var require_checkSuitePullRequestService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/check_suite_pull_request/checkSuitePullRequestService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkSuitePullRequestGetOne = exports2.checkSuitePullRequestGetMany = exports2.checkSuitePullRequestCreateMany = exports2.checkSuitePullRequestCreateOne = exports2.checkSuitePullRequestUpdateMany = exports2.checkSuitePullRequestUpdateOne = exports2.checkSuitePullRequestDeleteMany = exports2.checkSuitePullRequestDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var checkSuitePullRequestDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/check_suite_pull_request/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuitePullRequestDetach = checkSuitePullRequestDetach;
    var checkSuitePullRequestDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/check_suite_pull_request/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkSuitePullRequestDeleteMany = checkSuitePullRequestDeleteMany;
    var checkSuitePullRequestUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/check_suite_pull_request/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuitePullRequestUpdateOne = checkSuitePullRequestUpdateOne;
    var checkSuitePullRequestUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_suite_pull_request`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkSuitePullRequestUpdateMany = checkSuitePullRequestUpdateMany;
    var checkSuitePullRequestCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_suite_pull_request`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuitePullRequestCreateOne = checkSuitePullRequestCreateOne;
    var checkSuitePullRequestCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_suite_pull_request`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.checkSuitePullRequestCreateMany = checkSuitePullRequestCreateMany;
    var checkSuitePullRequestGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_suite_pull_request`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuitePullRequestGetMany = checkSuitePullRequestGetMany;
    var checkSuitePullRequestGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/check_suite_pull_request/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.checkSuitePullRequestGetOne = checkSuitePullRequestGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/client/clientHistoryService.js
var require_clientHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/client/clientHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.clientHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var clientHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.clientHistoryGet = clientHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/client/clientService.js
var require_clientService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/client/clientService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.clientCreateMany = exports2.clientCreateOne = exports2.clientUpdateMany = exports2.clientUpdateOne = exports2.clientDeleteMany = exports2.clientDeleteOne = exports2.clientGetOne = exports2.clientGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var clientGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.clientGetMany = clientGetMany;
    var clientGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.clientGetOne = clientGetOne;
    var clientDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.clientDeleteOne = clientDeleteOne;
    var clientDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.clientDeleteMany = clientDeleteMany;
    var clientUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.clientUpdateOne = clientUpdateOne;
    var clientUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.clientUpdateMany = clientUpdateMany;
    var clientCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.clientCreateOne = clientCreateOne;
    var clientCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ClientRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.clientCreateMany = clientCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/comment/commentHistoryService.js
var require_commentHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/comment/commentHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.commentHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var commentHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.commentHistoryGet = commentHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/comment/commentService.js
var require_commentService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/comment/commentService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.commentCreateMany = exports2.commentCreateOne = exports2.commentUpdateMany = exports2.commentUpdateOne = exports2.commentDeleteMany = exports2.commentDeleteOne = exports2.commentGetOne = exports2.commentGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var commentGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.commentGetMany = commentGetMany;
    var commentGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.commentGetOne = commentGetOne;
    var commentDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.commentDeleteOne = commentDeleteOne;
    var commentDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.commentDeleteMany = commentDeleteMany;
    var commentUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.commentUpdateOne = commentUpdateOne;
    var commentUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.commentUpdateMany = commentUpdateMany;
    var commentCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.commentCreateOne = commentCreateOne;
    var commentCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CommentRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.commentCreateMany = commentCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/component/componentService.js
var require_componentService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/component/componentService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.componentCreateMany = exports2.componentCreateOne = exports2.componentUpdateMany = exports2.componentUpdateOne = exports2.componentDeleteMany = exports2.componentDeleteOne = exports2.componentGetOne = exports2.componentGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var componentGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentGetMany = componentGetMany;
    var componentGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentGetOne = componentGetOne;
    var componentDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDeleteOne = componentDeleteOne;
    var componentDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDeleteMany = componentDeleteMany;
    var componentUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentUpdateOne = componentUpdateOne;
    var componentUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentUpdateMany = componentUpdateMany;
    var componentCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentCreateOne = componentCreateOne;
    var componentCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentCreateMany = componentCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/component_doc/componentDocHistoryService.js
var require_componentDocHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/component_doc/componentDocHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.componentDocHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var componentDocHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocHistoryGet = componentDocHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/component_doc/componentDocService.js
var require_componentDocService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/component_doc/componentDocService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.componentDocCreateMany = exports2.componentDocCreateOne = exports2.componentDocUpdateMany = exports2.componentDocUpdateOne = exports2.componentDocDeleteMany = exports2.componentDocDeleteOne = exports2.componentDocGetOne = exports2.componentDocGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var componentDocGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocGetMany = componentDocGetMany;
    var componentDocGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocGetOne = componentDocGetOne;
    var componentDocDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocDeleteOne = componentDocDeleteOne;
    var componentDocDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocDeleteMany = componentDocDeleteMany;
    var componentDocUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocUpdateOne = componentDocUpdateOne;
    var componentDocUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocUpdateMany = componentDocUpdateMany;
    var componentDocCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocCreateOne = componentDocCreateOne;
    var componentDocCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocCreateMany = componentDocCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/component_doc_template/componentDocTemplateService.js
var require_componentDocTemplateService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/component_doc_template/componentDocTemplateService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.componentDocTemplateCreateMany = exports2.componentDocTemplateCreateOne = exports2.componentDocTemplateUpdateMany = exports2.componentDocTemplateUpdateOne = exports2.componentDocTemplateDeleteMany = exports2.componentDocTemplateDeleteOne = exports2.componentDocTemplateGetOne = exports2.componentDocTemplateGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var componentDocTemplateGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTemplateRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTemplateGetMany = componentDocTemplateGetMany;
    var componentDocTemplateGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTemplateGetOne = componentDocTemplateGetOne;
    var componentDocTemplateDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTemplateDeleteOne = componentDocTemplateDeleteOne;
    var componentDocTemplateDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTemplateRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocTemplateDeleteMany = componentDocTemplateDeleteMany;
    var componentDocTemplateUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTemplateUpdateOne = componentDocTemplateUpdateOne;
    var componentDocTemplateUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTemplateRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocTemplateUpdateMany = componentDocTemplateUpdateMany;
    var componentDocTemplateCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTemplateRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTemplateCreateOne = componentDocTemplateCreateOne;
    var componentDocTemplateCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTemplateRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocTemplateCreateMany = componentDocTemplateCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/component_doc_type/componentDocTypeService.js
var require_componentDocTypeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/component_doc_type/componentDocTypeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.componentDocTypeCreateMany = exports2.componentDocTypeCreateOne = exports2.componentDocTypeUpdateMany = exports2.componentDocTypeUpdateOne = exports2.componentDocTypeDeleteMany = exports2.componentDocTypeDeleteOne = exports2.componentDocTypeGetOne = exports2.componentDocTypeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var componentDocTypeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTypeGetMany = componentDocTypeGetMany;
    var componentDocTypeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTypeGetOne = componentDocTypeGetOne;
    var componentDocTypeDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTypeDeleteOne = componentDocTypeDeleteOne;
    var componentDocTypeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTypeRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocTypeDeleteMany = componentDocTypeDeleteMany;
    var componentDocTypeUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTypeUpdateOne = componentDocTypeUpdateOne;
    var componentDocTypeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocTypeUpdateMany = componentDocTypeUpdateMany;
    var componentDocTypeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.componentDocTypeCreateOne = componentDocTypeCreateOne;
    var componentDocTypeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ComponentDocTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.componentDocTypeCreateMany = componentDocTypeCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/coupon/couponHistoryService.js
var require_couponHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/coupon/couponHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.couponHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var couponHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.couponHistoryGet = couponHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/coupon/couponService.js
var require_couponService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/coupon/couponService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.couponCreateMany = exports2.couponCreateOne = exports2.couponUpdateMany = exports2.couponUpdateOne = exports2.couponDeleteMany = exports2.couponDeleteOne = exports2.couponGetOne = exports2.couponGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var couponGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.couponGetMany = couponGetMany;
    var couponGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.couponGetOne = couponGetOne;
    var couponDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.couponDeleteOne = couponDeleteOne;
    var couponDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.couponDeleteMany = couponDeleteMany;
    var couponUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.couponUpdateOne = couponUpdateOne;
    var couponUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.couponUpdateMany = couponUpdateMany;
    var couponCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.couponCreateOne = couponCreateOne;
    var couponCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.CouponRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.couponCreateMany = couponCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/data_set/dataSetHistoryService.js
var require_dataSetHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/data_set/dataSetHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dataSetHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var dataSetHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.dataSetHistoryGet = dataSetHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/data_set/dataSetService.js
var require_dataSetService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/data_set/dataSetService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dataSetCreateMany = exports2.dataSetCreateOne = exports2.dataSetUpdateMany = exports2.dataSetUpdateOne = exports2.dataSetDeleteMany = exports2.dataSetDeleteOne = exports2.dataSetGetOne = exports2.dataSetGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var dataSetGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.dataSetGetMany = dataSetGetMany;
    var dataSetGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.dataSetGetOne = dataSetGetOne;
    var dataSetDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.dataSetDeleteOne = dataSetDeleteOne;
    var dataSetDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.dataSetDeleteMany = dataSetDeleteMany;
    var dataSetUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.dataSetUpdateOne = dataSetUpdateOne;
    var dataSetUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.dataSetUpdateMany = dataSetUpdateMany;
    var dataSetCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.dataSetCreateOne = dataSetCreateOne;
    var dataSetCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DataSetRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.dataSetCreateMany = dataSetCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect/defectHistoryService.js
var require_defectHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect/defectHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var defectHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectHistoryGet = defectHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect/defectService.js
var require_defectService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect/defectService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectCreateMany = exports2.defectCreateOne = exports2.defectUpdateMany = exports2.defectUpdateOne = exports2.defectDeleteMany = exports2.defectDeleteOne = exports2.defectGetOne = exports2.defectGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var defectGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectGetMany = defectGetMany2;
    var defectGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectGetOne = defectGetOne;
    var defectDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectDeleteOne = defectDeleteOne;
    var defectDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectDeleteMany = defectDeleteMany;
    var defectUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectUpdateOne = defectUpdateOne;
    var defectUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectUpdateMany = defectUpdateMany;
    var defectCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectCreateOne = defectCreateOne;
    var defectCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectCreateMany = defectCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_component/defectComponentService.js
var require_defectComponentService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_component/defectComponentService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectComponentGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var defectComponentGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectComponentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectComponentGetMany = defectComponentGetMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_exploration_item/defectExplorationItemService.js
var require_defectExplorationItemService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_exploration_item/defectExplorationItemService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectExplorationItemGetOne = exports2.defectExplorationItemGetMany = exports2.defectExplorationItemCreateMany = exports2.defectExplorationItemCreateOne = exports2.defectExplorationItemUpdateMany = exports2.defectExplorationItemUpdateOne = exports2.defectExplorationItemDeleteMany = exports2.defectExplorationItemDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var defectExplorationItemDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/defect_exploration_item/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectExplorationItemDetach = defectExplorationItemDetach;
    var defectExplorationItemDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/defect_exploration_item/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectExplorationItemDeleteMany = defectExplorationItemDeleteMany;
    var defectExplorationItemUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/defect_exploration_item/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectExplorationItemUpdateOne = defectExplorationItemUpdateOne;
    var defectExplorationItemUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_exploration_item`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectExplorationItemUpdateMany = defectExplorationItemUpdateMany;
    var defectExplorationItemCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_exploration_item`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectExplorationItemCreateOne = defectExplorationItemCreateOne;
    var defectExplorationItemCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_exploration_item`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectExplorationItemCreateMany = defectExplorationItemCreateMany;
    var defectExplorationItemGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_exploration_item`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectExplorationItemGetMany = defectExplorationItemGetMany;
    var defectExplorationItemGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_exploration_item/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectExplorationItemGetOne = defectExplorationItemGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_label/defectLabelService.js
var require_defectLabelService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_label/defectLabelService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectLabelGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var defectLabelGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectLabelRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectLabelGetMany = defectLabelGetMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_priority/defectPriorityService.js
var require_defectPriorityService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_priority/defectPriorityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectPriorityGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var defectPriorityGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectPriorityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectPriorityGetMany = defectPriorityGetMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_res/defectResHistoryService.js
var require_defectResHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_res/defectResHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectResHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var defectResHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResHistoryGet = defectResHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_res/defectResService.js
var require_defectResService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_res/defectResService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectResCreateMany = exports2.defectResCreateOne = exports2.defectResUpdateMany = exports2.defectResUpdateOne = exports2.defectResDeleteMany = exports2.defectResDeleteOne = exports2.defectResGetOne = exports2.defectResGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var defectResGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResGetMany = defectResGetMany;
    var defectResGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResGetOne = defectResGetOne;
    var defectResDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResDeleteOne = defectResDeleteOne;
    var defectResDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectResDeleteMany = defectResDeleteMany;
    var defectResUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResUpdateOne = defectResUpdateOne;
    var defectResUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectResUpdateMany = defectResUpdateMany;
    var defectResCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResCreateOne = defectResCreateOne;
    var defectResCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectResRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectResCreateMany = defectResCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_res_native_defect_res/defectResNativeDefectResService.js
var require_defectResNativeDefectResService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_res_native_defect_res/defectResNativeDefectResService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectResNativeDefectResGetOne = exports2.defectResNativeDefectResGetMany = exports2.defectResNativeDefectResCreateMany = exports2.defectResNativeDefectResCreateOne = exports2.defectResNativeDefectResUpdateMany = exports2.defectResNativeDefectResUpdateOne = exports2.defectResNativeDefectResDeleteMany = exports2.defectResNativeDefectResDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var defectResNativeDefectResDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/defect_res_native_defect_res/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResNativeDefectResDetach = defectResNativeDefectResDetach;
    var defectResNativeDefectResDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/defect_res_native_defect_res/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectResNativeDefectResDeleteMany = defectResNativeDefectResDeleteMany;
    var defectResNativeDefectResUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/defect_res_native_defect_res/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResNativeDefectResUpdateOne = defectResNativeDefectResUpdateOne;
    var defectResNativeDefectResUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_res_native_defect_res`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectResNativeDefectResUpdateMany = defectResNativeDefectResUpdateMany;
    var defectResNativeDefectResCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_res_native_defect_res`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResNativeDefectResCreateOne = defectResNativeDefectResCreateOne;
    var defectResNativeDefectResCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_res_native_defect_res`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectResNativeDefectResCreateMany = defectResNativeDefectResCreateMany;
    var defectResNativeDefectResGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_res_native_defect_res`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResNativeDefectResGetMany = defectResNativeDefectResGetMany;
    var defectResNativeDefectResGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_res_native_defect_res/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectResNativeDefectResGetOne = defectResNativeDefectResGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_run_result/defectRunResultService.js
var require_defectRunResultService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_run_result/defectRunResultService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectRunResultGetOne = exports2.defectRunResultGetMany = exports2.defectRunResultCreateMany = exports2.defectRunResultCreateOne = exports2.defectRunResultUpdateMany = exports2.defectRunResultUpdateOne = exports2.defectRunResultDeleteMany = exports2.defectRunResultDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var defectRunResultDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/defect_run_result/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectRunResultDetach = defectRunResultDetach;
    var defectRunResultDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/defect_run_result/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectRunResultDeleteMany = defectRunResultDeleteMany;
    var defectRunResultUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/defect_run_result/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectRunResultUpdateOne = defectRunResultUpdateOne;
    var defectRunResultUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_run_result`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectRunResultUpdateMany = defectRunResultUpdateMany;
    var defectRunResultCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_run_result`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectRunResultCreateOne = defectRunResultCreateOne;
    var defectRunResultCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_run_result`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectRunResultCreateMany = defectRunResultCreateMany;
    var defectRunResultGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_run_result`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectRunResultGetMany = defectRunResultGetMany2;
    var defectRunResultGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_run_result/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectRunResultGetOne = defectRunResultGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_status/defectStatusHistoryService.js
var require_defectStatusHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_status/defectStatusHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectStatusHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var defectStatusHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusHistoryGet = defectStatusHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_status/defectStatusService.js
var require_defectStatusService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_status/defectStatusService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectStatusCreateMany = exports2.defectStatusCreateOne = exports2.defectStatusUpdateMany = exports2.defectStatusUpdateOne = exports2.defectStatusDeleteMany = exports2.defectStatusDeleteOne = exports2.defectStatusGetOne = exports2.defectStatusGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var defectStatusGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusGetMany = defectStatusGetMany;
    var defectStatusGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusGetOne = defectStatusGetOne;
    var defectStatusDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusDeleteOne = defectStatusDeleteOne;
    var defectStatusDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectStatusDeleteMany = defectStatusDeleteMany;
    var defectStatusUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusUpdateOne = defectStatusUpdateOne;
    var defectStatusUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectStatusUpdateMany = defectStatusUpdateMany;
    var defectStatusCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusCreateOne = defectStatusCreateOne;
    var defectStatusCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectStatusRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectStatusCreateMany = defectStatusCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_status_native_defect_status/defectStatusNativeDefectStatusService.js
var require_defectStatusNativeDefectStatusService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_status_native_defect_status/defectStatusNativeDefectStatusService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectStatusNativeDefectStatusGetOne = exports2.defectStatusNativeDefectStatusGetMany = exports2.defectStatusNativeDefectStatusCreateMany = exports2.defectStatusNativeDefectStatusCreateOne = exports2.defectStatusNativeDefectStatusUpdateMany = exports2.defectStatusNativeDefectStatusUpdateOne = exports2.defectStatusNativeDefectStatusDeleteMany = exports2.defectStatusNativeDefectStatusDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var defectStatusNativeDefectStatusDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/defect_status_native_defect_status/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusNativeDefectStatusDetach = defectStatusNativeDefectStatusDetach;
    var defectStatusNativeDefectStatusDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/defect_status_native_defect_status/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectStatusNativeDefectStatusDeleteMany = defectStatusNativeDefectStatusDeleteMany;
    var defectStatusNativeDefectStatusUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/defect_status_native_defect_status/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusNativeDefectStatusUpdateOne = defectStatusNativeDefectStatusUpdateOne;
    var defectStatusNativeDefectStatusUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_status_native_defect_status`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectStatusNativeDefectStatusUpdateMany = defectStatusNativeDefectStatusUpdateMany;
    var defectStatusNativeDefectStatusCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_status_native_defect_status`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusNativeDefectStatusCreateOne = defectStatusNativeDefectStatusCreateOne;
    var defectStatusNativeDefectStatusCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_status_native_defect_status`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.defectStatusNativeDefectStatusCreateMany = defectStatusNativeDefectStatusCreateMany;
    var defectStatusNativeDefectStatusGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_status_native_defect_status`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusNativeDefectStatusGetMany = defectStatusNativeDefectStatusGetMany;
    var defectStatusNativeDefectStatusGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/defect_status_native_defect_status/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectStatusNativeDefectStatusGetOne = defectStatusNativeDefectStatusGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_type/defectTypeService.js
var require_defectTypeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_type/defectTypeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectTypeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var defectTypeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectTypeGetMany = defectTypeGetMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/defect_user/defectUserService.js
var require_defectUserService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/defect_user/defectUserService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defectUserGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var defectUserGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DefectUserRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.defectUserGetMany = defectUserGetMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/doc/docHistoryService.js
var require_docHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/doc/docHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.docHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var docHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docHistoryGet = docHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/doc/docService.js
var require_docService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/doc/docService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.docCreateMany = exports2.docCreateOne = exports2.docUpdateMany = exports2.docUpdateOne = exports2.docDeleteMany = exports2.docDeleteOne = exports2.docGetOne = exports2.docGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var docGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docGetMany = docGetMany;
    var docGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docGetOne = docGetOne;
    var docDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docDeleteOne = docDeleteOne;
    var docDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docDeleteMany = docDeleteMany;
    var docUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docUpdateOne = docUpdateOne;
    var docUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docUpdateMany = docUpdateMany;
    var docCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docCreateOne = docCreateOne;
    var docCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docCreateMany = docCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/doc_template/docTemplateService.js
var require_docTemplateService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/doc_template/docTemplateService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.docTemplateCreateMany = exports2.docTemplateCreateOne = exports2.docTemplateUpdateMany = exports2.docTemplateUpdateOne = exports2.docTemplateDeleteMany = exports2.docTemplateDeleteOne = exports2.docTemplateGetOne = exports2.docTemplateGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var docTemplateGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTemplateRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTemplateGetMany = docTemplateGetMany;
    var docTemplateGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTemplateGetOne = docTemplateGetOne;
    var docTemplateDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTemplateDeleteOne = docTemplateDeleteOne;
    var docTemplateDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTemplateRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docTemplateDeleteMany = docTemplateDeleteMany;
    var docTemplateUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTemplateUpdateOne = docTemplateUpdateOne;
    var docTemplateUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTemplateRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docTemplateUpdateMany = docTemplateUpdateMany;
    var docTemplateCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTemplateRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTemplateCreateOne = docTemplateCreateOne;
    var docTemplateCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTemplateRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docTemplateCreateMany = docTemplateCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/doc_type/docTypeService.js
var require_docTypeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/doc_type/docTypeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.docTypeCreateMany = exports2.docTypeCreateOne = exports2.docTypeUpdateMany = exports2.docTypeUpdateOne = exports2.docTypeDeleteMany = exports2.docTypeDeleteOne = exports2.docTypeGetOne = exports2.docTypeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var docTypeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTypeGetMany = docTypeGetMany;
    var docTypeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTypeGetOne = docTypeGetOne;
    var docTypeDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTypeDeleteOne = docTypeDeleteOne;
    var docTypeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTypeRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docTypeDeleteMany = docTypeDeleteMany;
    var docTypeUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTypeUpdateOne = docTypeUpdateOne;
    var docTypeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docTypeUpdateMany = docTypeUpdateMany;
    var docTypeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.docTypeCreateOne = docTypeCreateOne;
    var docTypeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.DocTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.docTypeCreateMany = docTypeCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/environment/environmentHistoryService.js
var require_environmentHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/environment/environmentHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.environmentHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var environmentHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentHistoryGet = environmentHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/environment/environmentService.js
var require_environmentService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/environment/environmentService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.environmentCreateMany = exports2.environmentCreateOne = exports2.environmentUpdateMany = exports2.environmentUpdateOne = exports2.environmentDeleteMany = exports2.environmentDeleteOne = exports2.environmentGetOne = exports2.environmentGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var environmentGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentGetMany = environmentGetMany;
    var environmentGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentGetOne = environmentGetOne;
    var environmentDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentDeleteOne = environmentDeleteOne;
    var environmentDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentDeleteMany = environmentDeleteMany;
    var environmentUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentUpdateOne = environmentUpdateOne;
    var environmentUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentUpdateMany = environmentUpdateMany;
    var environmentCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentCreateOne = environmentCreateOne;
    var environmentCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.EnvironmentRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentCreateMany = environmentCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/environment_exploration/environmentExplorationService.js
var require_environmentExplorationService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/environment_exploration/environmentExplorationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.environmentExplorationGetOne = exports2.environmentExplorationGetMany = exports2.environmentExplorationCreateMany = exports2.environmentExplorationCreateOne = exports2.environmentExplorationUpdateMany = exports2.environmentExplorationUpdateOne = exports2.environmentExplorationDeleteMany = exports2.environmentExplorationDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var environmentExplorationDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/environment_exploration/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentExplorationDetach = environmentExplorationDetach;
    var environmentExplorationDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/environment_exploration/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentExplorationDeleteMany = environmentExplorationDeleteMany;
    var environmentExplorationUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/environment_exploration/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentExplorationUpdateOne = environmentExplorationUpdateOne;
    var environmentExplorationUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_exploration`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentExplorationUpdateMany = environmentExplorationUpdateMany;
    var environmentExplorationCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_exploration`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentExplorationCreateOne = environmentExplorationCreateOne;
    var environmentExplorationCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_exploration`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentExplorationCreateMany = environmentExplorationCreateMany;
    var environmentExplorationGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_exploration`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentExplorationGetMany = environmentExplorationGetMany;
    var environmentExplorationGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_exploration/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentExplorationGetOne = environmentExplorationGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/environment_plan/environmentPlanService.js
var require_environmentPlanService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/environment_plan/environmentPlanService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.environmentPlanGetOne = exports2.environmentPlanGetMany = exports2.environmentPlanCreateMany = exports2.environmentPlanCreateOne = exports2.environmentPlanUpdateMany = exports2.environmentPlanUpdateOne = exports2.environmentPlanDeleteMany = exports2.environmentPlanDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var environmentPlanDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/environment_plan/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentPlanDetach = environmentPlanDetach;
    var environmentPlanDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/environment_plan/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentPlanDeleteMany = environmentPlanDeleteMany;
    var environmentPlanUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/environment_plan/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentPlanUpdateOne = environmentPlanUpdateOne;
    var environmentPlanUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_plan`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentPlanUpdateMany = environmentPlanUpdateMany;
    var environmentPlanCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_plan`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentPlanCreateOne = environmentPlanCreateOne;
    var environmentPlanCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_plan`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentPlanCreateMany = environmentPlanCreateMany;
    var environmentPlanGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_plan`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentPlanGetMany = environmentPlanGetMany;
    var environmentPlanGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_plan/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentPlanGetOne = environmentPlanGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/environment_project/environmentProjectService.js
var require_environmentProjectService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/environment_project/environmentProjectService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.environmentProjectGetOne = exports2.environmentProjectGetMany = exports2.environmentProjectCreateMany = exports2.environmentProjectCreateOne = exports2.environmentProjectUpdateMany = exports2.environmentProjectUpdateOne = exports2.environmentProjectDeleteMany = exports2.environmentProjectDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var environmentProjectDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/environment_project/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentProjectDetach = environmentProjectDetach;
    var environmentProjectDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/environment_project/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentProjectDeleteMany = environmentProjectDeleteMany;
    var environmentProjectUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/environment_project/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentProjectUpdateOne = environmentProjectUpdateOne;
    var environmentProjectUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_project`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentProjectUpdateMany = environmentProjectUpdateMany;
    var environmentProjectCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_project`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentProjectCreateOne = environmentProjectCreateOne;
    var environmentProjectCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_project`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentProjectCreateMany = environmentProjectCreateMany;
    var environmentProjectGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_project`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentProjectGetMany = environmentProjectGetMany;
    var environmentProjectGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_project/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentProjectGetOne = environmentProjectGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/environment_resource/environmentResourceService.js
var require_environmentResourceService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/environment_resource/environmentResourceService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.environmentResourceGetOne = exports2.environmentResourceGetMany = exports2.environmentResourceCreateMany = exports2.environmentResourceCreateOne = exports2.environmentResourceUpdateMany = exports2.environmentResourceUpdateOne = exports2.environmentResourceDeleteMany = exports2.environmentResourceDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var environmentResourceDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/environment_resource/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentResourceDetach = environmentResourceDetach;
    var environmentResourceDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/environment_resource/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentResourceDeleteMany = environmentResourceDeleteMany;
    var environmentResourceUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/environment_resource/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentResourceUpdateOne = environmentResourceUpdateOne;
    var environmentResourceUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_resource`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentResourceUpdateMany = environmentResourceUpdateMany;
    var environmentResourceCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_resource`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentResourceCreateOne = environmentResourceCreateOne;
    var environmentResourceCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_resource`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.environmentResourceCreateMany = environmentResourceCreateMany;
    var environmentResourceGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_resource`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentResourceGetMany = environmentResourceGetMany;
    var environmentResourceGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/environment_resource/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.environmentResourceGetOne = environmentResourceGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/exploration/explorationHistoryService.js
var require_explorationHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/exploration/explorationHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.explorationHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var explorationHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationHistoryGet = explorationHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/exploration/explorationService.js
var require_explorationService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/exploration/explorationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.explorationCreateMany = exports2.explorationCreateOne = exports2.explorationUpdateMany = exports2.explorationUpdateOne = exports2.explorationDeleteMany = exports2.explorationDeleteOne = exports2.explorationGetOne = exports2.explorationGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var explorationGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationGetMany = explorationGetMany;
    var explorationGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationGetOne = explorationGetOne;
    var explorationDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationDeleteOne = explorationDeleteOne;
    var explorationDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.explorationDeleteMany = explorationDeleteMany;
    var explorationUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationUpdateOne = explorationUpdateOne;
    var explorationUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.explorationUpdateMany = explorationUpdateMany;
    var explorationCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationCreateOne = explorationCreateOne;
    var explorationCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.explorationCreateMany = explorationCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/exploration_item/explorationItemHistoryService.js
var require_explorationItemHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/exploration_item/explorationItemHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.explorationItemHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var explorationItemHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationItemHistoryGet = explorationItemHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/exploration_item/explorationItemService.js
var require_explorationItemService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/exploration_item/explorationItemService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.explorationItemCreateMany = exports2.explorationItemCreateOne = exports2.explorationItemUpdateMany = exports2.explorationItemUpdateOne = exports2.explorationItemDeleteMany = exports2.explorationItemDeleteOne = exports2.explorationItemGetOne = exports2.explorationItemGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var explorationItemGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationItemGetMany = explorationItemGetMany;
    var explorationItemGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationItemGetOne = explorationItemGetOne;
    var explorationItemDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationItemDeleteOne = explorationItemDeleteOne;
    var explorationItemDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.explorationItemDeleteMany = explorationItemDeleteMany;
    var explorationItemUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationItemUpdateOne = explorationItemUpdateOne;
    var explorationItemUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.explorationItemUpdateMany = explorationItemUpdateMany;
    var explorationItemCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.explorationItemCreateOne = explorationItemCreateOne;
    var explorationItemCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ExplorationItemRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.explorationItemCreateMany = explorationItemCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/filter/filterHistoryService.js
var require_filterHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/filter/filterHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filterHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var filterHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.filterHistoryGet = filterHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/filter/filterService.js
var require_filterService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/filter/filterService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filterCreateMany = exports2.filterCreateOne = exports2.filterUpdateMany = exports2.filterUpdateOne = exports2.filterDeleteMany = exports2.filterDeleteOne = exports2.filterGetOne = exports2.filterGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var filterGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.filterGetMany = filterGetMany;
    var filterGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.filterGetOne = filterGetOne;
    var filterDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.filterDeleteOne = filterDeleteOne;
    var filterDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.filterDeleteMany = filterDeleteMany;
    var filterUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.filterUpdateOne = filterUpdateOne;
    var filterUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.filterUpdateMany = filterUpdateMany;
    var filterCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.filterCreateOne = filterCreateOne;
    var filterCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.FilterRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.filterCreateMany = filterCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/integration/integrationHistoryService.js
var require_integrationHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/integration/integrationHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integrationHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var integrationHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationHistoryGet = integrationHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/integration/integrationService.js
var require_integrationService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/integration/integrationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integrationCreateMany = exports2.integrationCreateOne = exports2.integrationUpdateMany = exports2.integrationUpdateOne = exports2.integrationDeleteMany = exports2.integrationDeleteOne = exports2.integrationGetOne = exports2.integrationGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var integrationGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationGetMany = integrationGetMany;
    var integrationGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationGetOne = integrationGetOne;
    var integrationDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationDeleteOne = integrationDeleteOne;
    var integrationDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationDeleteMany = integrationDeleteMany;
    var integrationUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationUpdateOne = integrationUpdateOne;
    var integrationUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationUpdateMany = integrationUpdateMany;
    var integrationCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationCreateOne = integrationCreateOne;
    var integrationCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationCreateMany = integrationCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/integration_project/integrationProjectService.js
var require_integrationProjectService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/integration_project/integrationProjectService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integrationProjectGetOne = exports2.integrationProjectGetMany = exports2.integrationProjectCreateMany = exports2.integrationProjectCreateOne = exports2.integrationProjectUpdateMany = exports2.integrationProjectUpdateOne = exports2.integrationProjectDeleteMany = exports2.integrationProjectDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var integrationProjectDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/integration_project/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationProjectDetach = integrationProjectDetach;
    var integrationProjectDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/integration_project/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationProjectDeleteMany = integrationProjectDeleteMany;
    var integrationProjectUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/integration_project/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationProjectUpdateOne = integrationProjectUpdateOne;
    var integrationProjectUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_project`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationProjectUpdateMany = integrationProjectUpdateMany;
    var integrationProjectCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_project`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationProjectCreateOne = integrationProjectCreateOne;
    var integrationProjectCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_project`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationProjectCreateMany = integrationProjectCreateMany;
    var integrationProjectGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_project`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationProjectGetMany = integrationProjectGetMany;
    var integrationProjectGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_project/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationProjectGetOne = integrationProjectGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/integration_status_type/integrationStatusTypeService.js
var require_integrationStatusTypeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/integration_status_type/integrationStatusTypeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integrationStatusTypeCreateMany = exports2.integrationStatusTypeCreateOne = exports2.integrationStatusTypeUpdateMany = exports2.integrationStatusTypeUpdateOne = exports2.integrationStatusTypeDeleteMany = exports2.integrationStatusTypeDeleteOne = exports2.integrationStatusTypeGetOne = exports2.integrationStatusTypeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var integrationStatusTypeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationStatusTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationStatusTypeGetMany = integrationStatusTypeGetMany;
    var integrationStatusTypeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationStatusTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationStatusTypeGetOne = integrationStatusTypeGetOne;
    var integrationStatusTypeDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationStatusTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationStatusTypeDeleteOne = integrationStatusTypeDeleteOne;
    var integrationStatusTypeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationStatusTypeRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationStatusTypeDeleteMany = integrationStatusTypeDeleteMany;
    var integrationStatusTypeUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationStatusTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationStatusTypeUpdateOne = integrationStatusTypeUpdateOne;
    var integrationStatusTypeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationStatusTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationStatusTypeUpdateMany = integrationStatusTypeUpdateMany;
    var integrationStatusTypeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationStatusTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationStatusTypeCreateOne = integrationStatusTypeCreateOne;
    var integrationStatusTypeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationStatusTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationStatusTypeCreateMany = integrationStatusTypeCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/integration_template/integrationTemplateHistoryService.js
var require_integrationTemplateHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/integration_template/integrationTemplateHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integrationTemplateHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var integrationTemplateHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationTemplateHistoryGet = integrationTemplateHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/integration_template/integrationTemplateService.js
var require_integrationTemplateService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/integration_template/integrationTemplateService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integrationTemplateCreateMany = exports2.integrationTemplateCreateOne = exports2.integrationTemplateUpdateMany = exports2.integrationTemplateUpdateOne = exports2.integrationTemplateDeleteMany = exports2.integrationTemplateDeleteOne = exports2.integrationTemplateGetOne = exports2.integrationTemplateGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var integrationTemplateGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationTemplateGetMany = integrationTemplateGetMany;
    var integrationTemplateGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationTemplateGetOne = integrationTemplateGetOne;
    var integrationTemplateDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationTemplateDeleteOne = integrationTemplateDeleteOne;
    var integrationTemplateDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationTemplateDeleteMany = integrationTemplateDeleteMany;
    var integrationTemplateUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationTemplateUpdateOne = integrationTemplateUpdateOne;
    var integrationTemplateUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationTemplateUpdateMany = integrationTemplateUpdateMany;
    var integrationTemplateCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationTemplateCreateOne = integrationTemplateCreateOne;
    var integrationTemplateCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.IntegrationTemplateRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationTemplateCreateMany = integrationTemplateCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/integration_user/integrationUserService.js
var require_integrationUserService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/integration_user/integrationUserService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integrationUserGetOne = exports2.integrationUserGetMany = exports2.integrationUserCreateMany = exports2.integrationUserCreateOne = exports2.integrationUserUpdateMany = exports2.integrationUserUpdateOne = exports2.integrationUserDeleteMany = exports2.integrationUserDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var integrationUserDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/integration_user/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationUserDetach = integrationUserDetach;
    var integrationUserDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/integration_user/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationUserDeleteMany = integrationUserDeleteMany;
    var integrationUserUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/integration_user/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationUserUpdateOne = integrationUserUpdateOne;
    var integrationUserUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_user`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationUserUpdateMany = integrationUserUpdateMany;
    var integrationUserCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_user`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationUserCreateOne = integrationUserCreateOne;
    var integrationUserCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_user`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.integrationUserCreateMany = integrationUserCreateMany;
    var integrationUserGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_user`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationUserGetMany = integrationUserGetMany;
    var integrationUserGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/integration_user/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.integrationUserGetOne = integrationUserGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/invoice/invoiceHistoryService.js
var require_invoiceHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/invoice/invoiceHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.invoiceHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var invoiceHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.invoiceHistoryGet = invoiceHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/invoice/invoiceService.js
var require_invoiceService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/invoice/invoiceService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.invoiceCreateMany = exports2.invoiceCreateOne = exports2.invoiceUpdateMany = exports2.invoiceUpdateOne = exports2.invoiceDeleteMany = exports2.invoiceDeleteOne = exports2.invoiceGetOne = exports2.invoiceGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var invoiceGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.invoiceGetMany = invoiceGetMany;
    var invoiceGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.invoiceGetOne = invoiceGetOne;
    var invoiceDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.invoiceDeleteOne = invoiceDeleteOne;
    var invoiceDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.invoiceDeleteMany = invoiceDeleteMany;
    var invoiceUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.invoiceUpdateOne = invoiceUpdateOne;
    var invoiceUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.invoiceUpdateMany = invoiceUpdateMany;
    var invoiceCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.invoiceCreateOne = invoiceCreateOne;
    var invoiceCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.InvoiceRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.invoiceCreateMany = invoiceCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/label/labelHistoryService.js
var require_labelHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/label/labelHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.labelHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var labelHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelHistoryGet = labelHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/label/labelService.js
var require_labelService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/label/labelService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.labelCreateMany = exports2.labelCreateOne = exports2.labelUpdateMany = exports2.labelUpdateOne = exports2.labelDeleteMany = exports2.labelDeleteOne = exports2.labelGetOne = exports2.labelGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var labelGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelGetMany = labelGetMany;
    var labelGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelGetOne = labelGetOne;
    var labelDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelDeleteOne = labelDeleteOne;
    var labelDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.labelDeleteMany = labelDeleteMany;
    var labelUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelUpdateOne = labelUpdateOne;
    var labelUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.labelUpdateMany = labelUpdateMany;
    var labelCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelCreateOne = labelCreateOne;
    var labelCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.labelCreateMany = labelCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/label_assigned/labelAssignedHistoryService.js
var require_labelAssignedHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/label_assigned/labelAssignedHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.labelAssignedHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var labelAssignedHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelAssignedHistoryGet = labelAssignedHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/label_assigned/labelAssignedService.js
var require_labelAssignedService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/label_assigned/labelAssignedService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.labelAssignedCreateMany = exports2.labelAssignedCreateOne = exports2.labelAssignedUpdateMany = exports2.labelAssignedUpdateOne = exports2.labelAssignedDeleteMany = exports2.labelAssignedDeleteOne = exports2.labelAssignedGetOne = exports2.labelAssignedGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var labelAssignedGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelAssignedGetMany = labelAssignedGetMany;
    var labelAssignedGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelAssignedGetOne = labelAssignedGetOne;
    var labelAssignedDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelAssignedDeleteOne = labelAssignedDeleteOne;
    var labelAssignedDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.labelAssignedDeleteMany = labelAssignedDeleteMany;
    var labelAssignedUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelAssignedUpdateOne = labelAssignedUpdateOne;
    var labelAssignedUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.labelAssignedUpdateMany = labelAssignedUpdateMany;
    var labelAssignedCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.labelAssignedCreateOne = labelAssignedCreateOne;
    var labelAssignedCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.LabelAssignedRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.labelAssignedCreateMany = labelAssignedCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/milestone/milestoneHistoryService.js
var require_milestoneHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/milestone/milestoneHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.milestoneHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var milestoneHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.milestoneHistoryGet = milestoneHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/milestone/milestoneService.js
var require_milestoneService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/milestone/milestoneService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.milestoneCreateMany = exports2.milestoneCreateOne = exports2.milestoneUpdateMany = exports2.milestoneUpdateOne = exports2.milestoneDeleteMany = exports2.milestoneDeleteOne = exports2.milestoneGetOne = exports2.milestoneGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var milestoneGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.milestoneGetMany = milestoneGetMany2;
    var milestoneGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.milestoneGetOne = milestoneGetOne;
    var milestoneDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.milestoneDeleteOne = milestoneDeleteOne;
    var milestoneDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.milestoneDeleteMany = milestoneDeleteMany;
    var milestoneUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.milestoneUpdateOne = milestoneUpdateOne;
    var milestoneUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.milestoneUpdateMany = milestoneUpdateMany;
    var milestoneCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.milestoneCreateOne = milestoneCreateOne;
    var milestoneCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.MilestoneRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.milestoneCreateMany = milestoneCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/native_defect_res/nativeDefectResHistoryService.js
var require_nativeDefectResHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/native_defect_res/nativeDefectResHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nativeDefectResHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var nativeDefectResHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectResHistoryGet = nativeDefectResHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/native_defect_res/nativeDefectResService.js
var require_nativeDefectResService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/native_defect_res/nativeDefectResService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nativeDefectResCreateMany = exports2.nativeDefectResCreateOne = exports2.nativeDefectResUpdateMany = exports2.nativeDefectResUpdateOne = exports2.nativeDefectResDeleteMany = exports2.nativeDefectResDeleteOne = exports2.nativeDefectResGetOne = exports2.nativeDefectResGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var nativeDefectResGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectResGetMany = nativeDefectResGetMany;
    var nativeDefectResGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectResGetOne = nativeDefectResGetOne;
    var nativeDefectResDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectResDeleteOne = nativeDefectResDeleteOne;
    var nativeDefectResDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.nativeDefectResDeleteMany = nativeDefectResDeleteMany;
    var nativeDefectResUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectResUpdateOne = nativeDefectResUpdateOne;
    var nativeDefectResUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.nativeDefectResUpdateMany = nativeDefectResUpdateMany;
    var nativeDefectResCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectResCreateOne = nativeDefectResCreateOne;
    var nativeDefectResCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectResRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.nativeDefectResCreateMany = nativeDefectResCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/native_defect_status/nativeDefectStatusHistoryService.js
var require_nativeDefectStatusHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/native_defect_status/nativeDefectStatusHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nativeDefectStatusHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var nativeDefectStatusHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectStatusHistoryGet = nativeDefectStatusHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/native_defect_status/nativeDefectStatusService.js
var require_nativeDefectStatusService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/native_defect_status/nativeDefectStatusService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nativeDefectStatusCreateMany = exports2.nativeDefectStatusCreateOne = exports2.nativeDefectStatusUpdateMany = exports2.nativeDefectStatusUpdateOne = exports2.nativeDefectStatusDeleteMany = exports2.nativeDefectStatusDeleteOne = exports2.nativeDefectStatusGetOne = exports2.nativeDefectStatusGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var nativeDefectStatusGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectStatusGetMany = nativeDefectStatusGetMany;
    var nativeDefectStatusGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectStatusGetOne = nativeDefectStatusGetOne;
    var nativeDefectStatusDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectStatusDeleteOne = nativeDefectStatusDeleteOne;
    var nativeDefectStatusDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.nativeDefectStatusDeleteMany = nativeDefectStatusDeleteMany;
    var nativeDefectStatusUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectStatusUpdateOne = nativeDefectStatusUpdateOne;
    var nativeDefectStatusUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.nativeDefectStatusUpdateMany = nativeDefectStatusUpdateMany;
    var nativeDefectStatusCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.nativeDefectStatusCreateOne = nativeDefectStatusCreateOne;
    var nativeDefectStatusCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NativeDefectStatusRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.nativeDefectStatusCreateMany = nativeDefectStatusCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/notifications/notificationsService.js
var require_notificationsService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/notifications/notificationsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.notificationsCreateMany = exports2.notificationsCreateOne = exports2.notificationsUpdateMany = exports2.notificationsUpdateOne = exports2.notificationsDeleteMany = exports2.notificationsDeleteOne = exports2.notificationsGetOne = exports2.notificationsGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var notificationsGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NotificationsRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.notificationsGetMany = notificationsGetMany;
    var notificationsGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NotificationsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.notificationsGetOne = notificationsGetOne;
    var notificationsDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NotificationsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.notificationsDeleteOne = notificationsDeleteOne;
    var notificationsDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NotificationsRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.notificationsDeleteMany = notificationsDeleteMany;
    var notificationsUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NotificationsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.notificationsUpdateOne = notificationsUpdateOne;
    var notificationsUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NotificationsRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.notificationsUpdateMany = notificationsUpdateMany;
    var notificationsCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NotificationsRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.notificationsCreateOne = notificationsCreateOne;
    var notificationsCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.NotificationsRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.notificationsCreateMany = notificationsCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/plan/planHistoryService.js
var require_planHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/plan/planHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.planHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var planHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planHistoryGet = planHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/plan/planService.js
var require_planService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/plan/planService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.planCreateMany = exports2.planCreateOne = exports2.planUpdateMany = exports2.planUpdateOne = exports2.planDeleteMany = exports2.planDeleteOne = exports2.planGetOne = exports2.planGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var planGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planGetMany = planGetMany2;
    var planGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planGetOne = planGetOne;
    var planDeleteOne2 = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planDeleteOne = planDeleteOne2;
    var planDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planDeleteMany = planDeleteMany;
    var planUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planUpdateOne = planUpdateOne;
    var planUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planUpdateMany = planUpdateMany;
    var planCreateOne2 = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planCreateOne = planCreateOne2;
    var planCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planCreateMany = planCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/plan_purpose/planPurposeService.js
var require_planPurposeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/plan_purpose/planPurposeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.planPurposeGetOne = exports2.planPurposeGetMany = exports2.planPurposeCreateMany = exports2.planPurposeCreateOne = exports2.planPurposeUpdateMany = exports2.planPurposeUpdateOne = exports2.planPurposeDeleteMany = exports2.planPurposeDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var planPurposeDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/plan_purpose/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planPurposeDetach = planPurposeDetach;
    var planPurposeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/plan_purpose/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planPurposeDeleteMany = planPurposeDeleteMany;
    var planPurposeUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/plan_purpose/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planPurposeUpdateOne = planPurposeUpdateOne;
    var planPurposeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_purpose`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planPurposeUpdateMany = planPurposeUpdateMany;
    var planPurposeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_purpose`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planPurposeCreateOne = planPurposeCreateOne;
    var planPurposeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_purpose`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planPurposeCreateMany = planPurposeCreateMany;
    var planPurposeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_purpose`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planPurposeGetMany = planPurposeGetMany;
    var planPurposeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_purpose/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planPurposeGetOne = planPurposeGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/plan_suite/planSuiteService.js
var require_planSuiteService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/plan_suite/planSuiteService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.planSuiteGetOne = exports2.planSuiteGetMany = exports2.planSuiteCreateMany = exports2.planSuiteCreateOne = exports2.planSuiteUpdateMany = exports2.planSuiteUpdateOne = exports2.planSuiteDeleteMany = exports2.planSuiteDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var planSuiteDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/plan_suite/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteDetach = planSuiteDetach;
    var planSuiteDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/plan_suite/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planSuiteDeleteMany = planSuiteDeleteMany;
    var planSuiteUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/plan_suite/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteUpdateOne = planSuiteUpdateOne;
    var planSuiteUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_suite`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planSuiteUpdateMany = planSuiteUpdateMany;
    var planSuiteCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_suite`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteCreateOne = planSuiteCreateOne;
    var planSuiteCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_suite`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planSuiteCreateMany = planSuiteCreateMany;
    var planSuiteGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_suite`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteGetMany = planSuiteGetMany2;
    var planSuiteGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/plan_suite/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteGetOne = planSuiteGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/plan_suite_test_include/planSuiteTestIncludeHistoryService.js
var require_planSuiteTestIncludeHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/plan_suite_test_include/planSuiteTestIncludeHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.planSuiteTestIncludeHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var planSuiteTestIncludeHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteTestIncludeHistoryGet = planSuiteTestIncludeHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/plan_suite_test_include/planSuiteTestIncludeService.js
var require_planSuiteTestIncludeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/plan_suite_test_include/planSuiteTestIncludeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.planSuiteTestIncludeCreateMany = exports2.planSuiteTestIncludeCreateOne = exports2.planSuiteTestIncludeUpdateMany = exports2.planSuiteTestIncludeUpdateOne = exports2.planSuiteTestIncludeDeleteMany = exports2.planSuiteTestIncludeDeleteOne = exports2.planSuiteTestIncludeGetOne = exports2.planSuiteTestIncludeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var planSuiteTestIncludeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteTestIncludeGetMany = planSuiteTestIncludeGetMany;
    var planSuiteTestIncludeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteTestIncludeGetOne = planSuiteTestIncludeGetOne;
    var planSuiteTestIncludeDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteTestIncludeDeleteOne = planSuiteTestIncludeDeleteOne;
    var planSuiteTestIncludeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planSuiteTestIncludeDeleteMany = planSuiteTestIncludeDeleteMany;
    var planSuiteTestIncludeUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteTestIncludeUpdateOne = planSuiteTestIncludeUpdateOne;
    var planSuiteTestIncludeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planSuiteTestIncludeUpdateMany = planSuiteTestIncludeUpdateMany;
    var planSuiteTestIncludeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.planSuiteTestIncludeCreateOne = planSuiteTestIncludeCreateOne;
    var planSuiteTestIncludeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PlanSuiteTestIncludeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.planSuiteTestIncludeCreateMany = planSuiteTestIncludeCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/policy/policyHistoryService.js
var require_policyHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/policy/policyHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.policyHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var policyHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyHistoryGet = policyHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/policy/policyService.js
var require_policyService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/policy/policyService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.policyCreateMany = exports2.policyCreateOne = exports2.policyUpdateMany = exports2.policyUpdateOne = exports2.policyDeleteMany = exports2.policyDeleteOne = exports2.policyGetOne = exports2.policyGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var policyGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyGetMany = policyGetMany;
    var policyGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyGetOne = policyGetOne;
    var policyDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyDeleteOne = policyDeleteOne;
    var policyDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.policyDeleteMany = policyDeleteMany;
    var policyUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyUpdateOne = policyUpdateOne;
    var policyUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.policyUpdateMany = policyUpdateMany;
    var policyCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyCreateOne = policyCreateOne;
    var policyCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.policyCreateMany = policyCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/policy_rows/policyRowsHistoryService.js
var require_policyRowsHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/policy_rows/policyRowsHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.policyRowsHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var policyRowsHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyRowsHistoryGet = policyRowsHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/policy_rows/policyRowsService.js
var require_policyRowsService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/policy_rows/policyRowsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.policyRowsCreateMany = exports2.policyRowsCreateOne = exports2.policyRowsUpdateMany = exports2.policyRowsUpdateOne = exports2.policyRowsDeleteMany = exports2.policyRowsDeleteOne = exports2.policyRowsGetOne = exports2.policyRowsGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var policyRowsGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyRowsGetMany = policyRowsGetMany;
    var policyRowsGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyRowsGetOne = policyRowsGetOne;
    var policyRowsDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyRowsDeleteOne = policyRowsDeleteOne;
    var policyRowsDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.policyRowsDeleteMany = policyRowsDeleteMany;
    var policyRowsUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyRowsUpdateOne = policyRowsUpdateOne;
    var policyRowsUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.policyRowsUpdateMany = policyRowsUpdateMany;
    var policyRowsCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.policyRowsCreateOne = policyRowsCreateOne;
    var policyRowsCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PolicyRowsRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.policyRowsCreateMany = policyRowsCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/price/priceHistoryService.js
var require_priceHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/price/priceHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.priceHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var priceHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.priceHistoryGet = priceHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/price/priceService.js
var require_priceService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/price/priceService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.priceCreateMany = exports2.priceCreateOne = exports2.priceUpdateMany = exports2.priceUpdateOne = exports2.priceDeleteMany = exports2.priceDeleteOne = exports2.priceGetOne = exports2.priceGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var priceGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.priceGetMany = priceGetMany;
    var priceGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.priceGetOne = priceGetOne;
    var priceDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.priceDeleteOne = priceDeleteOne;
    var priceDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.priceDeleteMany = priceDeleteMany;
    var priceUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.priceUpdateOne = priceUpdateOne;
    var priceUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.priceUpdateMany = priceUpdateMany;
    var priceCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.priceCreateOne = priceCreateOne;
    var priceCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PriceRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.priceCreateMany = priceCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/product/productHistoryService.js
var require_productHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/product/productHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.productHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var productHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.productHistoryGet = productHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/product/productService.js
var require_productService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/product/productService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.productCreateMany = exports2.productCreateOne = exports2.productUpdateMany = exports2.productUpdateOne = exports2.productDeleteMany = exports2.productDeleteOne = exports2.productGetOne = exports2.productGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var productGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.productGetMany = productGetMany;
    var productGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.productGetOne = productGetOne;
    var productDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.productDeleteOne = productDeleteOne;
    var productDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.productDeleteMany = productDeleteMany;
    var productUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.productUpdateOne = productUpdateOne;
    var productUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.productUpdateMany = productUpdateMany;
    var productCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.productCreateOne = productCreateOne;
    var productCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProductRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.productCreateMany = productCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/project/projectHistoryService.js
var require_projectHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/project/projectHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.projectHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var projectHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectHistoryGet = projectHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/project/projectService.js
var require_projectService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/project/projectService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.projectCreateMany = exports2.projectCreateOne = exports2.projectUpdateMany = exports2.projectUpdateOne = exports2.projectDeleteMany = exports2.projectDeleteOne = exports2.projectGetOne = exports2.projectGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var projectGetMany3 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectGetMany = projectGetMany3;
    var projectGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectGetOne = projectGetOne;
    var projectDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectDeleteOne = projectDeleteOne;
    var projectDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectDeleteMany = projectDeleteMany;
    var projectUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectUpdateOne = projectUpdateOne;
    var projectUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectUpdateMany = projectUpdateMany;
    var projectCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectCreateOne = projectCreateOne;
    var projectCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ProjectRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectCreateMany = projectCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/project_purpose/projectPurposeService.js
var require_projectPurposeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/project_purpose/projectPurposeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.projectPurposeGetOne = exports2.projectPurposeGetMany = exports2.projectPurposeCreateMany = exports2.projectPurposeCreateOne = exports2.projectPurposeUpdateMany = exports2.projectPurposeUpdateOne = exports2.projectPurposeDeleteMany = exports2.projectPurposeDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var projectPurposeDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/project_purpose/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectPurposeDetach = projectPurposeDetach;
    var projectPurposeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/project_purpose/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectPurposeDeleteMany = projectPurposeDeleteMany;
    var projectPurposeUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/project_purpose/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectPurposeUpdateOne = projectPurposeUpdateOne;
    var projectPurposeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_purpose`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectPurposeUpdateMany = projectPurposeUpdateMany;
    var projectPurposeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_purpose`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectPurposeCreateOne = projectPurposeCreateOne;
    var projectPurposeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_purpose`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectPurposeCreateMany = projectPurposeCreateMany;
    var projectPurposeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_purpose`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectPurposeGetMany = projectPurposeGetMany;
    var projectPurposeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_purpose/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectPurposeGetOne = projectPurposeGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/project_status/projectStatusService.js
var require_projectStatusService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/project_status/projectStatusService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.projectStatusGetOne = exports2.projectStatusGetMany = exports2.projectStatusCreateMany = exports2.projectStatusCreateOne = exports2.projectStatusUpdateMany = exports2.projectStatusUpdateOne = exports2.projectStatusDeleteMany = exports2.projectStatusDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var projectStatusDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/project_status/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectStatusDetach = projectStatusDetach;
    var projectStatusDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/project_status/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectStatusDeleteMany = projectStatusDeleteMany;
    var projectStatusUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/project_status/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectStatusUpdateOne = projectStatusUpdateOne;
    var projectStatusUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_status`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectStatusUpdateMany = projectStatusUpdateMany;
    var projectStatusCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_status`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectStatusCreateOne = projectStatusCreateOne;
    var projectStatusCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_status`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.projectStatusCreateMany = projectStatusCreateMany;
    var projectStatusGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_status`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectStatusGetMany = projectStatusGetMany;
    var projectStatusGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/project_status/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.projectStatusGetOne = projectStatusGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/pull_request/pullRequestHistoryService.js
var require_pullRequestHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/pull_request/pullRequestHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pullRequestHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var pullRequestHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestHistoryGet = pullRequestHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/pull_request/pullRequestService.js
var require_pullRequestService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/pull_request/pullRequestService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pullRequestCreateMany = exports2.pullRequestCreateOne = exports2.pullRequestUpdateMany = exports2.pullRequestUpdateOne = exports2.pullRequestDeleteMany = exports2.pullRequestDeleteOne = exports2.pullRequestGetOne = exports2.pullRequestGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var pullRequestGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestGetMany = pullRequestGetMany;
    var pullRequestGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestGetOne = pullRequestGetOne;
    var pullRequestDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestDeleteOne = pullRequestDeleteOne;
    var pullRequestDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestDeleteMany = pullRequestDeleteMany;
    var pullRequestUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestUpdateOne = pullRequestUpdateOne;
    var pullRequestUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestUpdateMany = pullRequestUpdateMany;
    var pullRequestCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestCreateOne = pullRequestCreateOne;
    var pullRequestCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PullRequestRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestCreateMany = pullRequestCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/pull_request_requirement/pullRequestRequirementService.js
var require_pullRequestRequirementService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/pull_request_requirement/pullRequestRequirementService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pullRequestRequirementGetOne = exports2.pullRequestRequirementGetMany = exports2.pullRequestRequirementCreateMany = exports2.pullRequestRequirementCreateOne = exports2.pullRequestRequirementUpdateMany = exports2.pullRequestRequirementUpdateOne = exports2.pullRequestRequirementDeleteMany = exports2.pullRequestRequirementDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var pullRequestRequirementDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/pull_request_requirement/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRequirementDetach = pullRequestRequirementDetach;
    var pullRequestRequirementDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/pull_request_requirement/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestRequirementDeleteMany = pullRequestRequirementDeleteMany;
    var pullRequestRequirementUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/pull_request_requirement/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRequirementUpdateOne = pullRequestRequirementUpdateOne;
    var pullRequestRequirementUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_requirement`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestRequirementUpdateMany = pullRequestRequirementUpdateMany;
    var pullRequestRequirementCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_requirement`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRequirementCreateOne = pullRequestRequirementCreateOne;
    var pullRequestRequirementCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_requirement`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestRequirementCreateMany = pullRequestRequirementCreateMany;
    var pullRequestRequirementGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_requirement`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRequirementGetMany = pullRequestRequirementGetMany;
    var pullRequestRequirementGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_requirement/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRequirementGetOne = pullRequestRequirementGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/pull_request_run/pullRequestRunService.js
var require_pullRequestRunService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/pull_request_run/pullRequestRunService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pullRequestRunGetOne = exports2.pullRequestRunGetMany = exports2.pullRequestRunCreateMany = exports2.pullRequestRunCreateOne = exports2.pullRequestRunUpdateMany = exports2.pullRequestRunUpdateOne = exports2.pullRequestRunDeleteMany = exports2.pullRequestRunDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var pullRequestRunDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/pull_request_run/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRunDetach = pullRequestRunDetach;
    var pullRequestRunDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/pull_request_run/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestRunDeleteMany = pullRequestRunDeleteMany;
    var pullRequestRunUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/pull_request_run/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRunUpdateOne = pullRequestRunUpdateOne;
    var pullRequestRunUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_run`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestRunUpdateMany = pullRequestRunUpdateMany;
    var pullRequestRunCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_run`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRunCreateOne = pullRequestRunCreateOne;
    var pullRequestRunCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_run`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.pullRequestRunCreateMany = pullRequestRunCreateMany;
    var pullRequestRunGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_run`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRunGetMany = pullRequestRunGetMany;
    var pullRequestRunGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/pull_request_run/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.pullRequestRunGetOne = pullRequestRunGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/purpose/purposeHistoryService.js
var require_purposeHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/purpose/purposeHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.purposeHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var purposeHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.purposeHistoryGet = purposeHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/purpose/purposeService.js
var require_purposeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/purpose/purposeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.purposeCreateMany = exports2.purposeCreateOne = exports2.purposeUpdateMany = exports2.purposeUpdateOne = exports2.purposeDeleteMany = exports2.purposeDeleteOne = exports2.purposeGetOne = exports2.purposeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var purposeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.purposeGetMany = purposeGetMany;
    var purposeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.purposeGetOne = purposeGetOne;
    var purposeDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.purposeDeleteOne = purposeDeleteOne;
    var purposeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.purposeDeleteMany = purposeDeleteMany;
    var purposeUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.purposeUpdateOne = purposeUpdateOne;
    var purposeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.purposeUpdateMany = purposeUpdateMany;
    var purposeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.purposeCreateOne = purposeCreateOne;
    var purposeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.PurposeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.purposeCreateMany = purposeCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/requirement/requirementHistoryService.js
var require_requirementHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/requirement/requirementHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requirementHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var requirementHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementHistoryGet = requirementHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/requirement/requirementService.js
var require_requirementService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/requirement/requirementService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requirementCreateMany = exports2.requirementCreateOne = exports2.requirementUpdateMany = exports2.requirementUpdateOne = exports2.requirementDeleteMany = exports2.requirementDeleteOne = exports2.requirementGetOne = exports2.requirementGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var requirementGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementGetMany = requirementGetMany2;
    var requirementGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementGetOne = requirementGetOne;
    var requirementDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementDeleteOne = requirementDeleteOne;
    var requirementDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.requirementDeleteMany = requirementDeleteMany;
    var requirementUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementUpdateOne = requirementUpdateOne;
    var requirementUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.requirementUpdateMany = requirementUpdateMany;
    var requirementCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementCreateOne = requirementCreateOne;
    var requirementCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RequirementRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.requirementCreateMany = requirementCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/requirement_test/requirementTestService.js
var require_requirementTestService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/requirement_test/requirementTestService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requirementTestGetOne = exports2.requirementTestGetMany = exports2.requirementTestCreateMany = exports2.requirementTestCreateOne = exports2.requirementTestUpdateMany = exports2.requirementTestUpdateOne = exports2.requirementTestDeleteMany = exports2.requirementTestDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var requirementTestDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/requirement_test/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementTestDetach = requirementTestDetach;
    var requirementTestDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/requirement_test/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.requirementTestDeleteMany = requirementTestDeleteMany;
    var requirementTestUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/requirement_test/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementTestUpdateOne = requirementTestUpdateOne;
    var requirementTestUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/requirement_test`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.requirementTestUpdateMany = requirementTestUpdateMany;
    var requirementTestCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/requirement_test`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementTestCreateOne = requirementTestCreateOne;
    var requirementTestCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/requirement_test`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.requirementTestCreateMany = requirementTestCreateMany;
    var requirementTestGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/requirement_test`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementTestGetMany = requirementTestGetMany;
    var requirementTestGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/requirement_test/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.requirementTestGetOne = requirementTestGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/resource/resourceHistoryService.js
var require_resourceHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/resource/resourceHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resourceHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var resourceHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceHistoryGet = resourceHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/resource/resourceService.js
var require_resourceService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/resource/resourceService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resourceCreateMany = exports2.resourceCreateOne = exports2.resourceUpdateMany = exports2.resourceUpdateOne = exports2.resourceDeleteMany = exports2.resourceDeleteOne = exports2.resourceGetOne = exports2.resourceGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var resourceGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceGetMany = resourceGetMany;
    var resourceGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceGetOne = resourceGetOne;
    var resourceDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceDeleteOne = resourceDeleteOne;
    var resourceDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.resourceDeleteMany = resourceDeleteMany;
    var resourceUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceUpdateOne = resourceUpdateOne;
    var resourceUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.resourceUpdateMany = resourceUpdateMany;
    var resourceCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceCreateOne = resourceCreateOne;
    var resourceCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.resourceCreateMany = resourceCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/resource_value/resourceValueHistoryService.js
var require_resourceValueHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/resource_value/resourceValueHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resourceValueHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var resourceValueHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceValueHistoryGet = resourceValueHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/resource_value/resourceValueService.js
var require_resourceValueService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/resource_value/resourceValueService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resourceValueCreateMany = exports2.resourceValueCreateOne = exports2.resourceValueUpdateMany = exports2.resourceValueUpdateOne = exports2.resourceValueDeleteMany = exports2.resourceValueDeleteOne = exports2.resourceValueGetOne = exports2.resourceValueGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var resourceValueGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceValueGetMany = resourceValueGetMany;
    var resourceValueGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceValueGetOne = resourceValueGetOne;
    var resourceValueDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceValueDeleteOne = resourceValueDeleteOne;
    var resourceValueDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.resourceValueDeleteMany = resourceValueDeleteMany;
    var resourceValueUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceValueUpdateOne = resourceValueUpdateOne;
    var resourceValueUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.resourceValueUpdateMany = resourceValueUpdateMany;
    var resourceValueCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.resourceValueCreateOne = resourceValueCreateOne;
    var resourceValueCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ResourceValueRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.resourceValueCreateMany = resourceValueCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/run/runHistoryService.js
var require_runHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/run/runHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var runHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runHistoryGet = runHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/run/runService.js
var require_runService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/run/runService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runCreateMany = exports2.runCreateOne = exports2.runUpdateMany = exports2.runUpdateOne = exports2.runDeleteMany = exports2.runDeleteOne = exports2.runGetOne = exports2.runGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var runGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runGetMany = runGetMany2;
    var runGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runGetOne = runGetOne;
    var runDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runDeleteOne = runDeleteOne;
    var runDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runDeleteMany = runDeleteMany;
    var runUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runUpdateOne = runUpdateOne;
    var runUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runUpdateMany = runUpdateMany;
    var runCreateOne2 = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runCreateOne = runCreateOne2;
    var runCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runCreateMany = runCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/run_result/runResultHistoryService.js
var require_runResultHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/run_result/runResultHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runResultHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var runResultHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultHistoryGet = runResultHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/run_result/runResultService.js
var require_runResultService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/run_result/runResultService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runResultCreateMany = exports2.runResultCreateOne = exports2.runResultUpdateMany = exports2.runResultUpdateOne = exports2.runResultDeleteMany = exports2.runResultDeleteOne = exports2.runResultGetOne = exports2.runResultGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var runResultGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultGetMany = runResultGetMany;
    var runResultGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultGetOne = runResultGetOne;
    var runResultDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultDeleteOne = runResultDeleteOne;
    var runResultDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runResultDeleteMany = runResultDeleteMany;
    var runResultUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultUpdateOne = runResultUpdateOne;
    var runResultUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runResultUpdateMany = runResultUpdateMany;
    var runResultCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultCreateOne = runResultCreateOne;
    var runResultCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runResultCreateMany = runResultCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/run_result_step/runResultStepHistoryService.js
var require_runResultStepHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/run_result_step/runResultStepHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runResultStepHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var runResultStepHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultStepHistoryGet = runResultStepHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/run_result_step/runResultStepService.js
var require_runResultStepService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/run_result_step/runResultStepService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runResultStepCreateMany = exports2.runResultStepCreateOne = exports2.runResultStepUpdateMany = exports2.runResultStepUpdateOne = exports2.runResultStepDeleteMany = exports2.runResultStepDeleteOne = exports2.runResultStepGetOne = exports2.runResultStepGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var runResultStepGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultStepGetMany = runResultStepGetMany;
    var runResultStepGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultStepGetOne = runResultStepGetOne;
    var runResultStepDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultStepDeleteOne = runResultStepDeleteOne;
    var runResultStepDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runResultStepDeleteMany = runResultStepDeleteMany;
    var runResultStepUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultStepUpdateOne = runResultStepUpdateOne;
    var runResultStepUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runResultStepUpdateMany = runResultStepUpdateMany;
    var runResultStepCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runResultStepCreateOne = runResultStepCreateOne;
    var runResultStepCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunResultStepRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runResultStepCreateMany = runResultStepCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/run_suite/runSuiteHistoryService.js
var require_runSuiteHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/run_suite/runSuiteHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runSuiteHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var runSuiteHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runSuiteHistoryGet = runSuiteHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/run_suite/runSuiteService.js
var require_runSuiteService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/run_suite/runSuiteService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runSuiteCreateMany = exports2.runSuiteCreateOne = exports2.runSuiteUpdateMany = exports2.runSuiteUpdateOne = exports2.runSuiteDeleteMany = exports2.runSuiteDeleteOne = exports2.runSuiteGetOne = exports2.runSuiteGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var runSuiteGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runSuiteGetMany = runSuiteGetMany;
    var runSuiteGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runSuiteGetOne = runSuiteGetOne;
    var runSuiteDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runSuiteDeleteOne = runSuiteDeleteOne;
    var runSuiteDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runSuiteDeleteMany = runSuiteDeleteMany;
    var runSuiteUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runSuiteUpdateOne = runSuiteUpdateOne;
    var runSuiteUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runSuiteUpdateMany = runSuiteUpdateMany;
    var runSuiteCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.runSuiteCreateOne = runSuiteCreateOne;
    var runSuiteCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.RunSuiteRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.runSuiteCreateMany = runSuiteCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/share/shareHistoryService.js
var require_shareHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/share/shareHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shareHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var shareHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareHistoryGet = shareHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/share/shareService.js
var require_shareService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/share/shareService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shareCreateMany = exports2.shareCreateOne = exports2.shareUpdateMany = exports2.shareUpdateOne = exports2.shareDeleteMany = exports2.shareDeleteOne = exports2.shareGetOne = exports2.shareGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var shareGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareGetMany = shareGetMany;
    var shareGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareGetOne = shareGetOne;
    var shareDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareDeleteOne = shareDeleteOne;
    var shareDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.shareDeleteMany = shareDeleteMany;
    var shareUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareUpdateOne = shareUpdateOne;
    var shareUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.shareUpdateMany = shareUpdateMany;
    var shareCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareCreateOne = shareCreateOne;
    var shareCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.ShareRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.shareCreateMany = shareCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/share_user/shareUserService.js
var require_shareUserService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/share_user/shareUserService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shareUserGetOne = exports2.shareUserGetMany = exports2.shareUserCreateMany = exports2.shareUserCreateOne = exports2.shareUserUpdateMany = exports2.shareUserUpdateOne = exports2.shareUserDeleteMany = exports2.shareUserDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var shareUserDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/share_user/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareUserDetach = shareUserDetach;
    var shareUserDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/share_user/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.shareUserDeleteMany = shareUserDeleteMany;
    var shareUserUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/share_user/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareUserUpdateOne = shareUserUpdateOne;
    var shareUserUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/share_user`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.shareUserUpdateMany = shareUserUpdateMany;
    var shareUserCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/share_user`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareUserCreateOne = shareUserCreateOne;
    var shareUserCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/share_user`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.shareUserCreateMany = shareUserCreateMany;
    var shareUserGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/share_user`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareUserGetMany = shareUserGetMany;
    var shareUserGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/share_user/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.shareUserGetOne = shareUserGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/shared_precondition/sharedPreconditionHistoryService.js
var require_sharedPreconditionHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/shared_precondition/sharedPreconditionHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sharedPreconditionHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var sharedPreconditionHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedPreconditionHistoryGet = sharedPreconditionHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/shared_precondition/sharedPreconditionService.js
var require_sharedPreconditionService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/shared_precondition/sharedPreconditionService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sharedPreconditionCreateMany = exports2.sharedPreconditionCreateOne = exports2.sharedPreconditionUpdateMany = exports2.sharedPreconditionUpdateOne = exports2.sharedPreconditionDeleteMany = exports2.sharedPreconditionDeleteOne = exports2.sharedPreconditionGetOne = exports2.sharedPreconditionGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var sharedPreconditionGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedPreconditionGetMany = sharedPreconditionGetMany;
    var sharedPreconditionGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedPreconditionGetOne = sharedPreconditionGetOne;
    var sharedPreconditionDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedPreconditionDeleteOne = sharedPreconditionDeleteOne;
    var sharedPreconditionDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.sharedPreconditionDeleteMany = sharedPreconditionDeleteMany;
    var sharedPreconditionUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedPreconditionUpdateOne = sharedPreconditionUpdateOne;
    var sharedPreconditionUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.sharedPreconditionUpdateMany = sharedPreconditionUpdateMany;
    var sharedPreconditionCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedPreconditionCreateOne = sharedPreconditionCreateOne;
    var sharedPreconditionCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedPreconditionRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.sharedPreconditionCreateMany = sharedPreconditionCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/shared_step/sharedStepHistoryService.js
var require_sharedStepHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/shared_step/sharedStepHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sharedStepHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var sharedStepHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedStepHistoryGet = sharedStepHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/shared_step/sharedStepService.js
var require_sharedStepService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/shared_step/sharedStepService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sharedStepCreateMany = exports2.sharedStepCreateOne = exports2.sharedStepUpdateMany = exports2.sharedStepUpdateOne = exports2.sharedStepDeleteMany = exports2.sharedStepDeleteOne = exports2.sharedStepGetOne = exports2.sharedStepGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var sharedStepGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedStepGetMany = sharedStepGetMany;
    var sharedStepGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedStepGetOne = sharedStepGetOne;
    var sharedStepDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedStepDeleteOne = sharedStepDeleteOne;
    var sharedStepDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.sharedStepDeleteMany = sharedStepDeleteMany;
    var sharedStepUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedStepUpdateOne = sharedStepUpdateOne;
    var sharedStepUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.sharedStepUpdateMany = sharedStepUpdateMany;
    var sharedStepCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.sharedStepCreateOne = sharedStepCreateOne;
    var sharedStepCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SharedStepRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.sharedStepCreateMany = sharedStepCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/signup_option/signupOptionHistoryService.js
var require_signupOptionHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/signup_option/signupOptionHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signupOptionHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var signupOptionHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.signupOptionHistoryGet = signupOptionHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/signup_option/signupOptionService.js
var require_signupOptionService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/signup_option/signupOptionService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signupOptionCreateMany = exports2.signupOptionCreateOne = exports2.signupOptionUpdateMany = exports2.signupOptionUpdateOne = exports2.signupOptionDeleteMany = exports2.signupOptionDeleteOne = exports2.signupOptionGetOne = exports2.signupOptionGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var signupOptionGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.signupOptionGetMany = signupOptionGetMany;
    var signupOptionGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.signupOptionGetOne = signupOptionGetOne;
    var signupOptionDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.signupOptionDeleteOne = signupOptionDeleteOne;
    var signupOptionDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.signupOptionDeleteMany = signupOptionDeleteMany;
    var signupOptionUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.signupOptionUpdateOne = signupOptionUpdateOne;
    var signupOptionUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.signupOptionUpdateMany = signupOptionUpdateMany;
    var signupOptionCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.signupOptionCreateOne = signupOptionCreateOne;
    var signupOptionCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SignupOptionRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.signupOptionCreateMany = signupOptionCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/status/statusHistoryService.js
var require_statusHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/status/statusHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.statusHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var statusHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusHistoryGet = statusHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/status/statusService.js
var require_statusService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/status/statusService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.statusCreateMany = exports2.statusCreateOne = exports2.statusUpdateMany = exports2.statusUpdateOne = exports2.statusDeleteMany = exports2.statusDeleteOne = exports2.statusGetOne = exports2.statusGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var statusGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusGetMany = statusGetMany;
    var statusGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusGetOne = statusGetOne;
    var statusDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusDeleteOne = statusDeleteOne;
    var statusDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.statusDeleteMany = statusDeleteMany;
    var statusUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusUpdateOne = statusUpdateOne;
    var statusUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.statusUpdateMany = statusUpdateMany;
    var statusCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusCreateOne = statusCreateOne;
    var statusCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.statusCreateMany = statusCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/status_type/statusTypeHistoryService.js
var require_statusTypeHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/status_type/statusTypeHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.statusTypeHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var statusTypeHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusTypeHistoryGet = statusTypeHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/status_type/statusTypeService.js
var require_statusTypeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/status_type/statusTypeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.statusTypeCreateMany = exports2.statusTypeCreateOne = exports2.statusTypeUpdateMany = exports2.statusTypeUpdateOne = exports2.statusTypeDeleteMany = exports2.statusTypeDeleteOne = exports2.statusTypeGetOne = exports2.statusTypeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var statusTypeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusTypeGetMany = statusTypeGetMany;
    var statusTypeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusTypeGetOne = statusTypeGetOne;
    var statusTypeDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusTypeDeleteOne = statusTypeDeleteOne;
    var statusTypeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.statusTypeDeleteMany = statusTypeDeleteMany;
    var statusTypeUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusTypeUpdateOne = statusTypeUpdateOne;
    var statusTypeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.statusTypeUpdateMany = statusTypeUpdateMany;
    var statusTypeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.statusTypeCreateOne = statusTypeCreateOne;
    var statusTypeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StatusTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.statusTypeCreateMany = statusTypeCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/step/stepHistoryService.js
var require_stepHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/step/stepHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stepHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var stepHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stepHistoryGet = stepHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/step/stepService.js
var require_stepService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/step/stepService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stepCreateMany = exports2.stepCreateOne = exports2.stepUpdateMany = exports2.stepUpdateOne = exports2.stepDeleteMany = exports2.stepDeleteOne = exports2.stepGetOne = exports2.stepGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var stepGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stepGetMany = stepGetMany;
    var stepGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stepGetOne = stepGetOne;
    var stepDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stepDeleteOne = stepDeleteOne;
    var stepDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.stepDeleteMany = stepDeleteMany;
    var stepUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stepUpdateOne = stepUpdateOne;
    var stepUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.stepUpdateMany = stepUpdateMany;
    var stepCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stepCreateOne = stepCreateOne;
    var stepCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StepRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.stepCreateMany = stepCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/stripe_product/stripeProductHistoryService.js
var require_stripeProductHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/stripe_product/stripeProductHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stripeProductHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var stripeProductHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stripeProductHistoryGet = stripeProductHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/stripe_product/stripeProductService.js
var require_stripeProductService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/stripe_product/stripeProductService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stripeProductCreateMany = exports2.stripeProductCreateOne = exports2.stripeProductUpdateMany = exports2.stripeProductUpdateOne = exports2.stripeProductDeleteMany = exports2.stripeProductDeleteOne = exports2.stripeProductGetOne = exports2.stripeProductGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var stripeProductGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stripeProductGetMany = stripeProductGetMany;
    var stripeProductGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stripeProductGetOne = stripeProductGetOne;
    var stripeProductDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stripeProductDeleteOne = stripeProductDeleteOne;
    var stripeProductDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.stripeProductDeleteMany = stripeProductDeleteMany;
    var stripeProductUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stripeProductUpdateOne = stripeProductUpdateOne;
    var stripeProductUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.stripeProductUpdateMany = stripeProductUpdateMany;
    var stripeProductCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.stripeProductCreateOne = stripeProductCreateOne;
    var stripeProductCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.StripeProductRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.stripeProductCreateMany = stripeProductCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/subscription_user/subscriptionUserHistoryService.js
var require_subscriptionUserHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/subscription_user/subscriptionUserHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.subscriptionUserHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var subscriptionUserHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionUserHistoryGet = subscriptionUserHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/subscription_user/subscriptionUserService.js
var require_subscriptionUserService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/subscription_user/subscriptionUserService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.subscriptionUserCreateMany = exports2.subscriptionUserCreateOne = exports2.subscriptionUserUpdateMany = exports2.subscriptionUserUpdateOne = exports2.subscriptionUserDeleteMany = exports2.subscriptionUserDeleteOne = exports2.subscriptionUserGetOne = exports2.subscriptionUserGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var subscriptionUserGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionUserGetMany = subscriptionUserGetMany;
    var subscriptionUserGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionUserGetOne = subscriptionUserGetOne;
    var subscriptionUserDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionUserDeleteOne = subscriptionUserDeleteOne;
    var subscriptionUserDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.subscriptionUserDeleteMany = subscriptionUserDeleteMany;
    var subscriptionUserUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionUserUpdateOne = subscriptionUserUpdateOne;
    var subscriptionUserUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.subscriptionUserUpdateMany = subscriptionUserUpdateMany;
    var subscriptionUserCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionUserCreateOne = subscriptionUserCreateOne;
    var subscriptionUserCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionUserRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.subscriptionUserCreateMany = subscriptionUserCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/subscriptions/subscriptionsHistoryService.js
var require_subscriptionsHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/subscriptions/subscriptionsHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.subscriptionsHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var subscriptionsHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionsHistoryGet = subscriptionsHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/subscriptions/subscriptionsService.js
var require_subscriptionsService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/subscriptions/subscriptionsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.subscriptionsCreateMany = exports2.subscriptionsCreateOne = exports2.subscriptionsUpdateMany = exports2.subscriptionsUpdateOne = exports2.subscriptionsDeleteMany = exports2.subscriptionsDeleteOne = exports2.subscriptionsGetOne = exports2.subscriptionsGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var subscriptionsGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionsGetMany = subscriptionsGetMany;
    var subscriptionsGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionsGetOne = subscriptionsGetOne;
    var subscriptionsDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionsDeleteOne = subscriptionsDeleteOne;
    var subscriptionsDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.subscriptionsDeleteMany = subscriptionsDeleteMany;
    var subscriptionsUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionsUpdateOne = subscriptionsUpdateOne;
    var subscriptionsUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.subscriptionsUpdateMany = subscriptionsUpdateMany;
    var subscriptionsCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.subscriptionsCreateOne = subscriptionsCreateOne;
    var subscriptionsCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SubscriptionsRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.subscriptionsCreateMany = subscriptionsCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/suite/suiteHistoryService.js
var require_suiteHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/suite/suiteHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.suiteHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var suiteHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteHistoryGet = suiteHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/suite/suiteService.js
var require_suiteService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/suite/suiteService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.suiteCreateMany = exports2.suiteCreateOne = exports2.suiteUpdateMany = exports2.suiteUpdateOne = exports2.suiteDeleteMany = exports2.suiteDeleteOne = exports2.suiteGetOne = exports2.suiteGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var suiteGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteGetMany = suiteGetMany2;
    var suiteGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteGetOne = suiteGetOne;
    var suiteDeleteOne2 = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteDeleteOne = suiteDeleteOne2;
    var suiteDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.suiteDeleteMany = suiteDeleteMany;
    var suiteUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteUpdateOne = suiteUpdateOne;
    var suiteUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.suiteUpdateMany = suiteUpdateMany;
    var suiteCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteCreateOne = suiteCreateOne;
    var suiteCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.SuiteRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.suiteCreateMany = suiteCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/suite_test/suiteTestService.js
var require_suiteTestService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/suite_test/suiteTestService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.suiteTestGetOne = exports2.suiteTestGetMany = exports2.suiteTestCreateMany = exports2.suiteTestCreateOne = exports2.suiteTestUpdateMany = exports2.suiteTestUpdateOne = exports2.suiteTestDeleteMany = exports2.suiteTestDetach = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var suiteTestDetach = (data, queryParams) => {
      var _a2;
      if (data.id === void 0) {
        return Promise.reject(new Error("Must supply id"));
      }
      const config2 = {
        method: "delete",
        url: `/suite_test/${data.id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteTestDetach = suiteTestDetach;
    var suiteTestDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2;
        const config2 = {
          method: "post",
          url: `/suite_test/delete`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.suiteTestDeleteMany = suiteTestDeleteMany;
    var suiteTestUpdateOne = (id, data, queryParams) => {
      var _a2;
      const config2 = {
        method: "put",
        url: `/suite_test/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteTestUpdateOne = suiteTestUpdateOne;
    var suiteTestUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/suite_test`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.suiteTestUpdateMany = suiteTestUpdateMany;
    var suiteTestCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/suite_test`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteTestCreateOne = suiteTestCreateOne;
    var suiteTestCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/suite_test`,
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.suiteTestCreateMany = suiteTestCreateMany;
    var suiteTestGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/suite_test`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteTestGetMany = suiteTestGetMany2;
    var suiteTestGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : `/suite_test/${id}`}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.suiteTestGetOne = suiteTestGetOne;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/test/testHistoryService.js
var require_testHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/test/testHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var testHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testHistoryGet = testHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/test/testService.js
var require_testService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/test/testService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testCreateMany = exports2.testCreateOne = exports2.testUpdateMany = exports2.testUpdateOne = exports2.testDeleteMany = exports2.testDeleteOne = exports2.testGetOne = exports2.testGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var testGetMany2 = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testGetMany = testGetMany2;
    var testGetOne2 = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testGetOne = testGetOne2;
    var testDeleteOne2 = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testDeleteOne = testDeleteOne2;
    var testDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testDeleteMany = testDeleteMany;
    var testUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testUpdateOne = testUpdateOne;
    var testUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testUpdateMany = testUpdateMany;
    var testCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testCreateOne = testCreateOne;
    var testCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testCreateMany = testCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/test_quality/testQualityHistoryService.js
var require_testQualityHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/test_quality/testQualityHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testQualityHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var testQualityHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityHistoryGet = testQualityHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/test_quality/testQualityService.js
var require_testQualityService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/test_quality/testQualityService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testQualityCreateMany = exports2.testQualityCreateOne = exports2.testQualityUpdateMany = exports2.testQualityUpdateOne = exports2.testQualityDeleteMany = exports2.testQualityDeleteOne = exports2.testQualityGetOne = exports2.testQualityGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var testQualityGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityGetMany = testQualityGetMany;
    var testQualityGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityGetOne = testQualityGetOne;
    var testQualityDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityDeleteOne = testQualityDeleteOne;
    var testQualityDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testQualityDeleteMany = testQualityDeleteMany;
    var testQualityUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityUpdateOne = testQualityUpdateOne;
    var testQualityUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testQualityUpdateMany = testQualityUpdateMany;
    var testQualityCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityCreateOne = testQualityCreateOne;
    var testQualityCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testQualityCreateMany = testQualityCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/test_quality_type/testQualityTypeHistoryService.js
var require_testQualityTypeHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/test_quality_type/testQualityTypeHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testQualityTypeHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var testQualityTypeHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityTypeHistoryGet = testQualityTypeHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/test_quality_type/testQualityTypeService.js
var require_testQualityTypeService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/test_quality_type/testQualityTypeService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testQualityTypeCreateMany = exports2.testQualityTypeCreateOne = exports2.testQualityTypeUpdateMany = exports2.testQualityTypeUpdateOne = exports2.testQualityTypeDeleteMany = exports2.testQualityTypeDeleteOne = exports2.testQualityTypeGetOne = exports2.testQualityTypeGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var testQualityTypeGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityTypeGetMany = testQualityTypeGetMany;
    var testQualityTypeGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityTypeGetOne = testQualityTypeGetOne;
    var testQualityTypeDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityTypeDeleteOne = testQualityTypeDeleteOne;
    var testQualityTypeDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testQualityTypeDeleteMany = testQualityTypeDeleteMany;
    var testQualityTypeUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityTypeUpdateOne = testQualityTypeUpdateOne;
    var testQualityTypeUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testQualityTypeUpdateMany = testQualityTypeUpdateMany;
    var testQualityTypeCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.testQualityTypeCreateOne = testQualityTypeCreateOne;
    var testQualityTypeCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.TestQualityTypeRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.testQualityTypeCreateMany = testQualityTypeCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/user/userHistoryService.js
var require_userHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/user/userHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.userHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var userHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.userHistoryGet = userHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/user/userService.js
var require_userService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/user/userService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.userCreateMany = exports2.userCreateOne = exports2.userUpdateMany = exports2.userUpdateOne = exports2.userDeleteMany = exports2.userDeleteOne = exports2.userGetOne = exports2.userGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var userGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.userGetMany = userGetMany;
    var userGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.userGetOne = userGetOne;
    var userDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.userDeleteOne = userDeleteOne;
    var userDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.userDeleteMany = userDeleteMany;
    var userUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.userUpdateOne = userUpdateOne;
    var userUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.userUpdateMany = userUpdateMany;
    var userCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.userCreateOne = userCreateOne;
    var userCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.UserRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.userCreateMany = userCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/virtual/virtualHistoryService.js
var require_virtualHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/virtual/virtualHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.virtualHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var virtualHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.virtualHistoryGet = virtualHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/virtual/virtualService.js
var require_virtualService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/virtual/virtualService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.virtualCreateMany = exports2.virtualCreateOne = exports2.virtualUpdateMany = exports2.virtualUpdateOne = exports2.virtualDeleteMany = exports2.virtualDeleteOne = exports2.virtualGetOne = exports2.virtualGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var virtualGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.virtualGetMany = virtualGetMany;
    var virtualGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.virtualGetOne = virtualGetOne;
    var virtualDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.virtualDeleteOne = virtualDeleteOne;
    var virtualDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.virtualDeleteMany = virtualDeleteMany;
    var virtualUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.virtualUpdateOne = virtualUpdateOne;
    var virtualUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.virtualUpdateMany = virtualUpdateMany;
    var virtualCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.virtualCreateOne = virtualCreateOne;
    var virtualCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.VirtualRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.virtualCreateMany = virtualCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/watch/watchHistoryService.js
var require_watchHistoryService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/watch/watchHistoryService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchHistoryGet = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var Routes_1 = require_Routes();
    var watchHistoryGet = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)()}${(queryParams === null || queryParams === void 0 ? void 0 : queryParams.id) ? `/${queryParams === null || queryParams === void 0 ? void 0 : queryParams.id}` : ""}`,
        params: Object.assign({ revision_log: true }, queryParams === null || queryParams === void 0 ? void 0 : queryParams.params),
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.watchHistoryGet = watchHistoryGet;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/watch/watchService.js
var require_watchService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/watch/watchService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchCreateMany = exports2.watchCreateOne = exports2.watchUpdateMany = exports2.watchUpdateOne = exports2.watchDeleteMany = exports2.watchDeleteOne = exports2.watchGetOne = exports2.watchGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var watchGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.watchGetMany = watchGetMany;
    var watchGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.watchGetOne = watchGetOne;
    var watchDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.watchDeleteOne = watchDeleteOne;
    var watchDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.watchDeleteMany = watchDeleteMany;
    var watchUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.watchUpdateOne = watchUpdateOne;
    var watchUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.watchUpdateMany = watchUpdateMany;
    var watchCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.watchCreateOne = watchCreateOne;
    var watchCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WatchRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.watchCreateMany = watchCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/webinar/webinarService.js
var require_webinarService = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/webinar/webinarService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.webinarCreateMany = exports2.webinarCreateOne = exports2.webinarUpdateMany = exports2.webinarUpdateOne = exports2.webinarDeleteMany = exports2.webinarDeleteOne = exports2.webinarGetOne = exports2.webinarGetMany = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var getResponse_1 = require_getResponse();
    var chunkArray_1 = require_chunkArray();
    var Routes_1 = require_Routes();
    var webinarGetMany = (queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WebinarRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.webinarGetMany = webinarGetMany;
    var webinarGetOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "get",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WebinarRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.webinarGetOne = webinarGetOne;
    var webinarDeleteOne = (id, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WebinarRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.webinarDeleteOne = webinarDeleteOne;
    var webinarDeleteMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WebinarRoute)() + "/delete",
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.webinarDeleteMany = webinarDeleteMany;
    var webinarUpdateOne = (id, data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "put",
        url: `${(_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WebinarRoute)()}/${id}`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.webinarUpdateOne = webinarUpdateOne;
    var webinarUpdateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WebinarRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.webinarUpdateMany = webinarUpdateMany;
    var webinarCreateOne = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WebinarRoute)(),
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data,
        headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.webinarCreateOne = webinarCreateOne;
    var webinarCreateMany = (data, queryParams) => {
      const chunks = (0, chunkArray_1.chunkArray)(data, 1e3);
      return Promise.all(chunks.map((chunk) => {
        var _a2, _b;
        const config2 = {
          method: "post",
          url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : (0, Routes_1.WebinarRoute)(),
          params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
          list: chunk,
          headers: queryParams === null || queryParams === void 0 ? void 0 : queryParams.headers
        };
        return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, getResponse_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
      }));
    };
    exports2.webinarCreateMany = webinarCreateMany;
  }
});

// node_modules/@testquality/sdk/dist/gen/domain/index.js
var require_domain = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/domain/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_accessRoleHistoryService(), exports2);
    __exportStar(require_accessRoleService(), exports2);
    __exportStar(require_accessRoleUserService(), exports2);
    __exportStar(require_appConfigHistoryService(), exports2);
    __exportStar(require_appConfigService(), exports2);
    __exportStar(require_appInstallHistoryService(), exports2);
    __exportStar(require_appInstallService(), exports2);
    __exportStar(require_appInstallProjectHistoryService(), exports2);
    __exportStar(require_appInstallProjectService(), exports2);
    __exportStar(require_appUserHistoryService(), exports2);
    __exportStar(require_appUserService(), exports2);
    __exportStar(require_attachmentHistoryService(), exports2);
    __exportStar(require_attachmentService(), exports2);
    __exportStar(require_baseCapabilityHistoryService(), exports2);
    __exportStar(require_baseCapabilityService(), exports2);
    __exportStar(require_baseCapabilityBaseIntegrationService(), exports2);
    __exportStar(require_baseIntegrationHistoryService(), exports2);
    __exportStar(require_baseIntegrationService(), exports2);
    __exportStar(require_billingContactHistoryService(), exports2);
    __exportStar(require_billingContactService(), exports2);
    __exportStar(require_capabilityHistoryService(), exports2);
    __exportStar(require_capabilityService(), exports2);
    __exportStar(require_capabilityIntegrationService(), exports2);
    __exportStar(require_casePriorityHistoryService(), exports2);
    __exportStar(require_casePriorityService(), exports2);
    __exportStar(require_casePriorityProjectService(), exports2);
    __exportStar(require_caseTypeHistoryService(), exports2);
    __exportStar(require_caseTypeService(), exports2);
    __exportStar(require_caseTypeProjectService(), exports2);
    __exportStar(require_checkListService(), exports2);
    __exportStar(require_checkListItemService(), exports2);
    __exportStar(require_checkListItemUserService(), exports2);
    __exportStar(require_checkRunHistoryService(), exports2);
    __exportStar(require_checkRunService(), exports2);
    __exportStar(require_checkSuiteHistoryService(), exports2);
    __exportStar(require_checkSuiteService(), exports2);
    __exportStar(require_checkSuitePullRequestService(), exports2);
    __exportStar(require_clientHistoryService(), exports2);
    __exportStar(require_clientService(), exports2);
    __exportStar(require_commentHistoryService(), exports2);
    __exportStar(require_commentService(), exports2);
    __exportStar(require_componentService(), exports2);
    __exportStar(require_componentDocHistoryService(), exports2);
    __exportStar(require_componentDocService(), exports2);
    __exportStar(require_componentDocTemplateService(), exports2);
    __exportStar(require_componentDocTypeService(), exports2);
    __exportStar(require_couponHistoryService(), exports2);
    __exportStar(require_couponService(), exports2);
    __exportStar(require_dataSetHistoryService(), exports2);
    __exportStar(require_dataSetService(), exports2);
    __exportStar(require_defectHistoryService(), exports2);
    __exportStar(require_defectService(), exports2);
    __exportStar(require_defectComponentService(), exports2);
    __exportStar(require_defectExplorationItemService(), exports2);
    __exportStar(require_defectLabelService(), exports2);
    __exportStar(require_defectPriorityService(), exports2);
    __exportStar(require_defectResHistoryService(), exports2);
    __exportStar(require_defectResService(), exports2);
    __exportStar(require_defectResNativeDefectResService(), exports2);
    __exportStar(require_defectRunResultService(), exports2);
    __exportStar(require_defectStatusHistoryService(), exports2);
    __exportStar(require_defectStatusService(), exports2);
    __exportStar(require_defectStatusNativeDefectStatusService(), exports2);
    __exportStar(require_defectTypeService(), exports2);
    __exportStar(require_defectUserService(), exports2);
    __exportStar(require_docHistoryService(), exports2);
    __exportStar(require_docService(), exports2);
    __exportStar(require_docTemplateService(), exports2);
    __exportStar(require_docTypeService(), exports2);
    __exportStar(require_environmentHistoryService(), exports2);
    __exportStar(require_environmentService(), exports2);
    __exportStar(require_environmentExplorationService(), exports2);
    __exportStar(require_environmentPlanService(), exports2);
    __exportStar(require_environmentProjectService(), exports2);
    __exportStar(require_environmentResourceService(), exports2);
    __exportStar(require_explorationHistoryService(), exports2);
    __exportStar(require_explorationService(), exports2);
    __exportStar(require_explorationItemHistoryService(), exports2);
    __exportStar(require_explorationItemService(), exports2);
    __exportStar(require_filterHistoryService(), exports2);
    __exportStar(require_filterService(), exports2);
    __exportStar(require_integrationHistoryService(), exports2);
    __exportStar(require_integrationService(), exports2);
    __exportStar(require_integrationProjectService(), exports2);
    __exportStar(require_integrationStatusTypeService(), exports2);
    __exportStar(require_integrationTemplateHistoryService(), exports2);
    __exportStar(require_integrationTemplateService(), exports2);
    __exportStar(require_integrationUserService(), exports2);
    __exportStar(require_invoiceHistoryService(), exports2);
    __exportStar(require_invoiceService(), exports2);
    __exportStar(require_labelHistoryService(), exports2);
    __exportStar(require_labelService(), exports2);
    __exportStar(require_labelAssignedHistoryService(), exports2);
    __exportStar(require_labelAssignedService(), exports2);
    __exportStar(require_milestoneHistoryService(), exports2);
    __exportStar(require_milestoneService(), exports2);
    __exportStar(require_nativeDefectResHistoryService(), exports2);
    __exportStar(require_nativeDefectResService(), exports2);
    __exportStar(require_nativeDefectStatusHistoryService(), exports2);
    __exportStar(require_nativeDefectStatusService(), exports2);
    __exportStar(require_notificationsService(), exports2);
    __exportStar(require_planHistoryService(), exports2);
    __exportStar(require_planService(), exports2);
    __exportStar(require_planPurposeService(), exports2);
    __exportStar(require_planSuiteService(), exports2);
    __exportStar(require_planSuiteTestIncludeHistoryService(), exports2);
    __exportStar(require_planSuiteTestIncludeService(), exports2);
    __exportStar(require_policyHistoryService(), exports2);
    __exportStar(require_policyService(), exports2);
    __exportStar(require_policyRowsHistoryService(), exports2);
    __exportStar(require_policyRowsService(), exports2);
    __exportStar(require_priceHistoryService(), exports2);
    __exportStar(require_priceService(), exports2);
    __exportStar(require_productHistoryService(), exports2);
    __exportStar(require_productService(), exports2);
    __exportStar(require_projectHistoryService(), exports2);
    __exportStar(require_projectService(), exports2);
    __exportStar(require_projectPurposeService(), exports2);
    __exportStar(require_projectStatusService(), exports2);
    __exportStar(require_pullRequestHistoryService(), exports2);
    __exportStar(require_pullRequestService(), exports2);
    __exportStar(require_pullRequestRequirementService(), exports2);
    __exportStar(require_pullRequestRunService(), exports2);
    __exportStar(require_purposeHistoryService(), exports2);
    __exportStar(require_purposeService(), exports2);
    __exportStar(require_requirementHistoryService(), exports2);
    __exportStar(require_requirementService(), exports2);
    __exportStar(require_requirementTestService(), exports2);
    __exportStar(require_resourceHistoryService(), exports2);
    __exportStar(require_resourceService(), exports2);
    __exportStar(require_resourceValueHistoryService(), exports2);
    __exportStar(require_resourceValueService(), exports2);
    __exportStar(require_runHistoryService(), exports2);
    __exportStar(require_runService(), exports2);
    __exportStar(require_runResultHistoryService(), exports2);
    __exportStar(require_runResultService(), exports2);
    __exportStar(require_runResultStepHistoryService(), exports2);
    __exportStar(require_runResultStepService(), exports2);
    __exportStar(require_runSuiteHistoryService(), exports2);
    __exportStar(require_runSuiteService(), exports2);
    __exportStar(require_shareHistoryService(), exports2);
    __exportStar(require_shareService(), exports2);
    __exportStar(require_shareUserService(), exports2);
    __exportStar(require_sharedPreconditionHistoryService(), exports2);
    __exportStar(require_sharedPreconditionService(), exports2);
    __exportStar(require_sharedStepHistoryService(), exports2);
    __exportStar(require_sharedStepService(), exports2);
    __exportStar(require_signupOptionHistoryService(), exports2);
    __exportStar(require_signupOptionService(), exports2);
    __exportStar(require_statusHistoryService(), exports2);
    __exportStar(require_statusService(), exports2);
    __exportStar(require_statusTypeHistoryService(), exports2);
    __exportStar(require_statusTypeService(), exports2);
    __exportStar(require_stepHistoryService(), exports2);
    __exportStar(require_stepService(), exports2);
    __exportStar(require_stripeProductHistoryService(), exports2);
    __exportStar(require_stripeProductService(), exports2);
    __exportStar(require_subscriptionUserHistoryService(), exports2);
    __exportStar(require_subscriptionUserService(), exports2);
    __exportStar(require_subscriptionsHistoryService(), exports2);
    __exportStar(require_subscriptionsService(), exports2);
    __exportStar(require_suiteHistoryService(), exports2);
    __exportStar(require_suiteService(), exports2);
    __exportStar(require_suiteTestService(), exports2);
    __exportStar(require_testHistoryService(), exports2);
    __exportStar(require_testService(), exports2);
    __exportStar(require_testQualityHistoryService(), exports2);
    __exportStar(require_testQualityService(), exports2);
    __exportStar(require_testQualityTypeHistoryService(), exports2);
    __exportStar(require_testQualityTypeService(), exports2);
    __exportStar(require_userHistoryService(), exports2);
    __exportStar(require_userService(), exports2);
    __exportStar(require_virtualHistoryService(), exports2);
    __exportStar(require_virtualService(), exports2);
    __exportStar(require_watchHistoryService(), exports2);
    __exportStar(require_watchService(), exports2);
    __exportStar(require_webinarService(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/gen/models/CustomAttributes.js
var require_CustomAttributes = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/CustomAttributes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/DefaultAttributes.js
var require_DefaultAttributes = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/DefaultAttributes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/KeyedModel.js
var require_KeyedModel = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/KeyedModel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/PlanAnalysisApi.js
var require_PlanAnalysisApi = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/PlanAnalysisApi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/ProjectAnalysisApi.js
var require_ProjectAnalysisApi = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/ProjectAnalysisApi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/ResourceList.js
var require_ResourceList = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/ResourceList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createResourceList = void 0;
    function createResourceList(data) {
      return {
        total: data.length,
        per_page: 25,
        current_page: 1,
        last_page: 1,
        data
      };
    }
    exports2.createResourceList = createResourceList;
  }
});

// node_modules/@testquality/sdk/dist/gen/models/RunAnalysisApi.js
var require_RunAnalysisApi = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/RunAnalysisApi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/RunResultStatusApi.js
var require_RunResultStatusApi = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/RunResultStatusApi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/RunStatusAnalysisApi.js
var require_RunStatusAnalysisApi = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/RunStatusAnalysisApi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/TenantScopedModel.js
var require_TenantScopedModel = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/TenantScopedModel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/gen/models/index.js
var require_models = __commonJS({
  "node_modules/@testquality/sdk/dist/gen/models/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_CustomAttributes(), exports2);
    __exportStar(require_DefaultAttributes(), exports2);
    __exportStar(require_KeyedModel(), exports2);
    __exportStar(require_PlanAnalysisApi(), exports2);
    __exportStar(require_ProjectAnalysisApi(), exports2);
    __exportStar(require_ResourceList(), exports2);
    __exportStar(require_RunAnalysisApi(), exports2);
    __exportStar(require_RunResultStatusApi(), exports2);
    __exportStar(require_RunStatusAnalysisApi(), exports2);
    __exportStar(require_TenantScopedModel(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/caseFieldsService.js
var require_caseFieldsService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/caseFieldsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCaseFields = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getCaseFields = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/testrail/case-fields",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getCaseFields = getCaseFields;
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/caseTypesService.js
var require_caseTypesService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/caseTypesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCaseTypes = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getCaseTypes = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/testrail/case-types",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getCaseTypes = getCaseTypes;
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/credentialsService.js
var require_credentialsService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/credentialsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.postCredentials = exports2.getCredentials = exports2.clearCredentials = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var clearCredentials = (queryParams) => {
      var _a2;
      const config2 = {
        method: "delete",
        url: "/testrail/credentials",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.clearCredentials = clearCredentials;
    var getCredentials = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/testrail/credentials",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getCredentials = getCredentials;
    var postCredentials = (queryParams) => {
      var _a2;
      const config2 = {
        method: "post",
        url: "/testrail/credentials",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        data: queryParams.data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.postCredentials = postCredentials;
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/defaultMappingsService.js
var require_defaultMappingsService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/defaultMappingsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultMappings = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getDefaultMappings = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/testrail/default-mappings",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getDefaultMappings = getDefaultMappings;
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/prioritiesService.js
var require_prioritiesService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/prioritiesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPriorities = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getPriorities = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/testrail/priorities",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getPriorities = getPriorities;
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/projectsService.js
var require_projectsService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/projectsService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.postImportProject = exports2.getProjects = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getProjects = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/testrail/projects",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getProjects = getProjects;
    var postImportProject = (testRailProjectId, tqProjectId, mapping, queryParams) => {
      var _a2;
      const config2 = {
        method: "post",
        url: "/testrail/projects/import",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken,
        data: {
          projectId: testRailProjectId,
          tqProjectId,
          entitiesMapping: mapping
        }
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.postImportProject = postImportProject;
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/rolesService.js
var require_rolesService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/rolesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRoles = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getRoles = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/testrail/roles",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getRoles = getRoles;
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/statusesService.js
var require_statusesService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/statusesService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getStatuses = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getStatuses = (queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: "/testrail/statuses",
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getStatuses = getStatuses;
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/api/index.js
var require_api = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/api/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_caseFieldsService(), exports2);
    __exportStar(require_caseTypesService(), exports2);
    __exportStar(require_credentialsService(), exports2);
    __exportStar(require_defaultMappingsService(), exports2);
    __exportStar(require_prioritiesService(), exports2);
    __exportStar(require_projectsService(), exports2);
    __exportStar(require_rolesService(), exports2);
    __exportStar(require_statusesService(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/DefaultMappings.js
var require_DefaultMappings = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/DefaultMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/Mapping.js
var require_Mapping = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/Mapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailCaseField.js
var require_TestRailCaseField = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailCaseField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailCaseType.js
var require_TestRailCaseType = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailCaseType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailConfigurationGroup.js
var require_TestRailConfigurationGroup = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailConfigurationGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailCredentials.js
var require_TestRailCredentials = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailPriority.js
var require_TestRailPriority = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailPriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailProject.js
var require_TestRailProject = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailResultField.js
var require_TestRailResultField = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailResultField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailRole.js
var require_TestRailRole = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailStatus.js
var require_TestRailStatus = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailUser.js
var require_TestRailUser = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/TestRailUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/interfaces/index.js
var require_interfaces = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/interfaces/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_DefaultMappings(), exports2);
    __exportStar(require_Mapping(), exports2);
    __exportStar(require_TestRailCaseField(), exports2);
    __exportStar(require_TestRailCaseType(), exports2);
    __exportStar(require_TestRailConfigurationGroup(), exports2);
    __exportStar(require_TestRailCredentials(), exports2);
    __exportStar(require_TestRailPriority(), exports2);
    __exportStar(require_TestRailProject(), exports2);
    __exportStar(require_TestRailResultField(), exports2);
    __exportStar(require_TestRailRole(), exports2);
    __exportStar(require_TestRailStatus(), exports2);
    __exportStar(require_TestRailUser(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/services/testRail/index.js
var require_testRail = __commonJS({
  "node_modules/@testquality/sdk/dist/services/testRail/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_api(), exports2);
    __exportStar(require_interfaces(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/services/requirements/requirementRunAnalysis.js
var require_requirementRunAnalysis = __commonJS({
  "node_modules/@testquality/sdk/dist/services/requirements/requirementRunAnalysis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRequirementRunsAnalysis = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var getRequirementRunsAnalysis = (id, queryParams) => {
      var _a2;
      const config2 = {
        method: "get",
        url: `/requirement/${id}/run-analysis`,
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        cancelToken: queryParams === null || queryParams === void 0 ? void 0 : queryParams.cancelToken
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _a2 !== void 0 ? _a2 : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.getRequirementRunsAnalysis = getRequirementRunsAnalysis;
  }
});

// node_modules/@testquality/sdk/dist/services/requirements/index.js
var require_requirements = __commonJS({
  "node_modules/@testquality/sdk/dist/services/requirements/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_requirementRunAnalysis(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/services/role/cloneRole.js
var require_cloneRole = __commonJS({
  "node_modules/@testquality/sdk/dist/services/role/cloneRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cloneRole = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var cloneRole = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : "/access_role/clone_role",
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.cloneRole = cloneRole;
  }
});

// node_modules/@testquality/sdk/dist/services/role/restrictProject.js
var require_restrictProject = __commonJS({
  "node_modules/@testquality/sdk/dist/services/role/restrictProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.restrictProject = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var restrictProject = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : "/access_role/project",
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.restrictProject = restrictProject;
  }
});

// node_modules/@testquality/sdk/dist/services/role/unrestrictProject.js
var require_unrestrictProject = __commonJS({
  "node_modules/@testquality/sdk/dist/services/role/unrestrictProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unrestrictProject = void 0;
    var ClientSdk_1 = require_ClientSdk();
    var actions_1 = require_actions();
    var unrestrictProject = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "delete",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : "/access_role/project",
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.unrestrictProject = unrestrictProject;
  }
});

// node_modules/@testquality/sdk/dist/services/role/index.js
var require_role = __commonJS({
  "node_modules/@testquality/sdk/dist/services/role/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_cloneRole(), exports2);
    __exportStar(require_restrictProject(), exports2);
    __exportStar(require_unrestrictProject(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/services/http/BatchService.js
var require_BatchService = __commonJS({
  "node_modules/@testquality/sdk/dist/services/http/BatchService.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchService = void 0;
    var querystring = __importStar(require("querystring"));
    var QueryParams_1 = require_QueryParams();
    var handleHttpError_1 = require_handleHttpError();
    var ClientSdk_1 = require_ClientSdk();
    var BatchService = class {
      constructor() {
        this.batchContainers = [];
      }
      addBatch(request) {
        return new Promise((resolve3, reject) => {
          const paramsString = request.params ? `?${querystring.stringify(request.params)}` : "";
          const batchRequestContainer = {
            request: {
              method: request.method ? request.method.toUpperCase() : "GET",
              endpoint: `/api${request.url}${paramsString}`,
              body: (0, QueryParams_1.hasListProperty)(request) ? request.list : request.data
            },
            resolve: resolve3,
            reject
          };
          this.batchContainers.push(batchRequestContainer);
        });
      }
      executeBatch(client = ClientSdk_1._client) {
        if (!client) {
          throw new Error("No global client has been set up");
        }
        const requests = this.batchContainers.map((c) => c.request);
        if (requests.length === 0) {
          return Promise.resolve({ responses: [] });
        }
        return new Promise((resolve3, reject) => {
          let post;
          if (client.apiWorker) {
            post = client.apiWorker.postBatch(requests);
          } else {
            post = client.api.post("/batch", { requests });
          }
          post.then((response) => {
            this.handleBatchResponse(response, resolve3, reject);
          }, (error) => {
            this.failAll(error);
            reject(error);
          });
        });
      }
      handleBatchResponse(response, resolve3, reject) {
        var _a2;
        if (!((_a2 = response === null || response === void 0 ? void 0 : response.data) === null || _a2 === void 0 ? void 0 : _a2.responses)) {
          const error = new Error("Batch has no data");
          this.failAll(error);
          reject(error);
          return;
        }
        const responses = response.data.responses[0];
        this.batchContainers.forEach((batchContainer) => {
          const res = responses.find((r) => r.method === batchContainer.request.method && r.endpoint === batchContainer.request.endpoint && !r.processed);
          if (res) {
            res.processed = true;
            if (res.status === 200 || res.status === 201) {
              batchContainer.resolve(res.data);
            } else {
              res.config = {
                url: `${batchContainer.request.method}: ${batchContainer.request.endpoint}`
              };
              batchContainer.reject((0, handleHttpError_1.getHttpResponse)(res));
            }
          } else {
            batchContainer.reject({
              status: 500,
              statusText: `Endpoint mismatch, req: ${batchContainer.request.method}: ${batchContainer.request.endpoint}`
            });
          }
        });
        resolve3(response.data);
      }
      failAll(error) {
        this.batchContainers.forEach((c) => {
          if ("response" in error) {
            c.reject(error.response);
          } else {
            c.reject(error);
          }
        });
      }
    };
    exports2.BatchService = BatchService;
  }
});

// node_modules/@testquality/sdk/dist/services/http/index.js
var require_http = __commonJS({
  "node_modules/@testquality/sdk/dist/services/http/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_BatchService(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/integration/registerJira.js
var require_registerJira = __commonJS({
  "node_modules/@testquality/sdk/dist/integration/registerJira.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.registerJira = void 0;
    var actions_1 = require_actions();
    var ClientSdk_1 = require_ClientSdk();
    var registerJira = (data, queryParams) => {
      var _a2, _b;
      const config2 = {
        method: "post",
        url: (_a2 = queryParams === null || queryParams === void 0 ? void 0 : queryParams.url) !== null && _a2 !== void 0 ? _a2 : "/register_jira",
        params: queryParams === null || queryParams === void 0 ? void 0 : queryParams.params,
        data
      };
      return (queryParams === null || queryParams === void 0 ? void 0 : queryParams.batch) ? queryParams.batch.addBatch(config2) : (0, actions_1.getResponse)((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.api) !== null && _b !== void 0 ? _b : ClientSdk_1._client === null || ClientSdk_1._client === void 0 ? void 0 : ClientSdk_1._client.api, config2);
    };
    exports2.registerJira = registerJira;
  }
});

// node_modules/@testquality/sdk/dist/integration/index.js
var require_integration = __commonJS({
  "node_modules/@testquality/sdk/dist/integration/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_registerJira(), exports2);
  }
});

// node_modules/@testquality/sdk/dist/index.js
var require_dist = __commonJS({
  "node_modules/@testquality/sdk/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getGlobalClient = exports2.setGlobalClient = exports2.ClientSdk = void 0;
    __exportStar(require_auth2(), exports2);
    __exportStar(require_common4(), exports2);
    __exportStar(require_exceptions(), exports2);
    __exportStar(require_actions(), exports2);
    __exportStar(require_domain(), exports2);
    __exportStar(require_models(), exports2);
    __exportStar(require_Routes(), exports2);
    __exportStar(require_testRail(), exports2);
    __exportStar(require_requirements(), exports2);
    __exportStar(require_role(), exports2);
    __exportStar(require_http(), exports2);
    var ClientSdk_1 = require_ClientSdk();
    Object.defineProperty(exports2, "ClientSdk", { enumerable: true, get: function() {
      return ClientSdk_1.ClientSdk;
    } });
    Object.defineProperty(exports2, "setGlobalClient", { enumerable: true, get: function() {
      return ClientSdk_1.setGlobalClient;
    } });
    Object.defineProperty(exports2, "getGlobalClient", { enumerable: true, get: function() {
      return ClientSdk_1.getGlobalClient;
    } });
    __exportStar(require_integration(), exports2);
  }
});

// node_modules/glob/node_modules/brace-expansion/index.js
var require_brace_expansion2 = __commonJS({
  "node_modules/glob/node_modules/brace-expansion/index.js"(exports2, module2) {
    var balanced = require_balanced_match();
    module2.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m = balanced("{", "}", str);
      if (!m)
        return str.split(",");
      var pre = m.pre;
      var body = m.body;
      var post = m.post;
      var p = pre.split(",");
      p[p.length - 1] += "{" + body + "}";
      var postParts = parseCommaParts(post);
      if (post.length) {
        p[p.length - 1] += postParts.shift();
        p.push.apply(p, postParts);
      }
      parts.push.apply(parts, p);
      return parts;
    }
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand2(escapeBraces(str), true).map(unescapeBraces);
    }
    function embrace(str) {
      return "{" + str + "}";
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    function lte(i, y) {
      return i <= y;
    }
    function gte(i, y) {
      return i >= y;
    }
    function expand2(str, isTop) {
      var expansions = [];
      var m = balanced("{", "}", str);
      if (!m)
        return [str];
      var pre = m.pre;
      var post = m.post.length ? expand2(m.post, false) : [""];
      if (/\$$/.test(m.pre)) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + "{" + m.body + "}" + post[k];
          expansions.push(expansion);
        }
      } else {
        var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
        var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
        var isSequence = isNumericSequence || isAlphaSequence;
        var isOptions = m.body.indexOf(",") >= 0;
        if (!isSequence && !isOptions) {
          if (m.post.match(/,.*\}/)) {
            str = m.pre + "{" + m.body + escClose + m.post;
            return expand2(str);
          }
          return [str];
        }
        var n;
        if (isSequence) {
          n = m.body.split(/\.\./);
        } else {
          n = parseCommaParts(m.body);
          if (n.length === 1) {
            n = expand2(n[0], false).map(embrace);
            if (n.length === 1) {
              return post.map(function(p) {
                return m.pre + n[0] + p;
              });
            }
          }
        }
        var N;
        if (isSequence) {
          var x = numeric(n[0]);
          var y = numeric(n[1]);
          var width = Math.max(n[0].length, n[1].length);
          var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
          var test = lte;
          var reverse = y < x;
          if (reverse) {
            incr *= -1;
            test = gte;
          }
          var pad = n.some(isPadded);
          N = [];
          for (var i = x; test(i, y); i += incr) {
            var c;
            if (isAlphaSequence) {
              c = String.fromCharCode(i);
              if (c === "\\")
                c = "";
            } else {
              c = String(i);
              if (pad) {
                var need = width - c.length;
                if (need > 0) {
                  var z = new Array(need + 1).join("0");
                  if (i < 0)
                    c = "-" + z + c.slice(1);
                  else
                    c = z + c;
                }
              }
            }
            N.push(c);
          }
        } else {
          N = [];
          for (var j = 0; j < n.length; j++) {
            N.push.apply(N, expand2(n[j], false));
          }
        }
        for (var j = 0; j < N.length; j++) {
          for (var k = 0; k < post.length; k++) {
            var expansion = pre + N[j] + post[k];
            if (!isTop || isSequence || expansion)
              expansions.push(expansion);
          }
        }
      }
      return expansions;
    }
  }
});

// src/env.ts
var dotenv = __toESM(require_main());
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
var import_yup = __toESM(require_yup());
var import_debug = __toESM(require_src());
var debug = (0, import_debug.default)("tq:cli:env");
var schema = (0, import_yup.object)({
  api: (0, import_yup.object)({
    url: (0, import_yup.string)().default("https://api.testquality.com"),
    xDebug: (0, import_yup.boolean)().default(false)
  }).default({}),
  auth: (0, import_yup.object)({
    // both properties are stringified in EnvStorage
    remember: (0, import_yup.string)(),
    token: (0, import_yup.string)()
  }).default({}),
  clientId: (0, import_yup.string)().default("2"),
  clientSecret: (0, import_yup.string)().default("93MBS86X7JrK4Mrr1mk4PKfo6b1zRVx9Mrmx0nTa"),
  log: (0, import_yup.object)({
    data: (0, import_yup.boolean)().default(true),
    format: (0, import_yup.string)().default("short"),
    level: (0, import_yup.string)().default("info"),
    levelInString: (0, import_yup.boolean)().default(true)
  }),
  variables: (0, import_yup.object)({
    accessToken: (0, import_yup.string)(),
    expiresAt: (0, import_yup.string)(),
    password: (0, import_yup.string)(),
    projectId: (0, import_yup.string)(),
    refreshToken: (0, import_yup.string)(),
    username: (0, import_yup.string)()
  }).default({})
});
var envVars = [
  "APP_XDEBUG",
  "LOG_LEVEL",
  "LOG_LEVEL_IN_STRING",
  "LOG_FORMAT",
  "LOG_DATA",
  "TQ_ACCESS_TOKEN",
  "TQ_CLIENT_SECRET",
  "TQ_CLIENT_ID",
  "TQ_EXPIRES_AT",
  "TQ_HOST",
  "TQ_PASSWORD",
  "TQ_PROJECT_ID",
  "TQ_REFRESH_TOKEN",
  "TQ_REMEMBER",
  "TQ_TOKEN",
  "TQ_USERNAME"
];
var envFilePath = path.resolve(process.cwd(), ".testquality");
var readDotEnv = (envPath = envFilePath) => {
  debug("readDotEnv", envPath);
  if (fs.existsSync(envPath)) {
    const envFile = dotenv.config({ path: envPath });
    if (envFile.error && envFile.error.code !== "ENOENT") {
      console.error(envFile.error);
    } else {
      debug("readDotEnv.parsed %j", envFile.parsed);
    }
  }
  const parsed = envVars.reduce((acc, key) => {
    acc[key] = process.env[key];
    return acc;
  }, {});
  debug("readDotEnv.dotEnvParsed %j", parsed);
  return parsed;
};
var writeDotEnv = (dotEnvParsedUpdated = {}, envPath = envFilePath) => {
  debug("writeDotEnv %j", { dotEnvParsedUpdated, envPath });
  const content = Object.entries({
    ...readDotEnv(envPath),
    ...dotEnvParsedUpdated
  }).filter(([_, value]) => value !== void 0).map(([key, value]) => `${key}=${value}`);
  debug("writeDotEnv %j", { content });
  if (content.length > 0) {
    fs.writeFileSync(envPath, content.join("\n"), {
      encoding: "utf-8",
      flag: "w"
    });
  }
};
var dotEnvToEnv = (dotEnvParsed) => {
  return schema.validateSync({
    api: {
      url: dotEnvParsed.TQ_HOST,
      xDebug: dotEnvParsed.APP_XDEBUG
    },
    auth: {
      remember: dotEnvParsed.TQ_REMEMBER,
      token: dotEnvParsed.TQ_TOKEN
    },
    clientId: dotEnvParsed.TQ_CLIENT_ID,
    clientSecret: dotEnvParsed.TQ_CLIENT_SECRET,
    log: {
      data: dotEnvParsed.LOG_DATA,
      format: dotEnvParsed.LOG_FORMAT,
      level: dotEnvParsed.LOG_LEVEL,
      levelInString: dotEnvParsed.LOG_LEVEL_IN_STRING
    },
    variables: {
      accessToken: dotEnvParsed.TQ_ACCESS_TOKEN,
      expiresAt: dotEnvParsed.TQ_EXPIRES_AT,
      password: dotEnvParsed.TQ_PASSWORD,
      projectId: dotEnvParsed.TQ_PROJECT_ID,
      refreshToken: dotEnvParsed.TQ_REFRESH_TOKEN,
      username: dotEnvParsed.TQ_USERNAME
    }
  });
};
var envToDotEnv = (env2) => {
  return {
    APP_XDEBUG: env2.api.xDebug.toString(),
    LOG_DATA: env2.log.data.toString(),
    LOG_FORMAT: env2.log.format,
    LOG_LEVEL: env2.log.level,
    LOG_LEVEL_IN_STRING: env2.log.levelInString.toString(),
    TQ_ACCESS_TOKEN: env2.variables.accessToken,
    TQ_CLIENT_ID: env2.clientId,
    TQ_CLIENT_SECRET: env2.clientSecret,
    TQ_EXPIRES_AT: env2.variables.expiresAt,
    TQ_HOST: env2.api.url,
    TQ_PASSWORD: env2.variables.password,
    TQ_PROJECT_ID: env2.variables.projectId,
    TQ_REFRESH_TOKEN: env2.variables.refreshToken,
    TQ_REMEMBER: env2.auth.remember,
    TQ_TOKEN: env2.auth.token,
    TQ_USERNAME: env2.variables.username
  };
};
var env = dotEnvToEnv(readDotEnv());
var saveEnv = () => {
  writeDotEnv(envToDotEnv(env));
};

// src/index.ts
var yargs = __toESM(require_yargs2());

// src/Logger.ts
var import_bunyan = __toESM(require_bunyan());
var import_bunyan_format = __toESM(require_bunyan_format());

// src/errSerializer.ts
var Logger = __toESM(require_bunyan());
var errSerializer = (err) => {
  var _a2, _b;
  if ((_a2 = err.response) == null ? void 0 : _a2.data) {
    const serverError = Logger.stdSerializers.err(err);
    if (err.response.status) {
      serverError.statusCode = err.response.status;
    }
    const data = err.response.data;
    if (data) {
      const trace = (_b = data.trace) == null ? void 0 : _b.map((cur) => {
        const params = cur.args.map((cur2) => {
          return JSON.stringify(cur2);
        }).join(",");
        const rtn = `${cur.file}:${cur.line} - ` + (cur.class ? `${cur.class}` : "") + (cur.type ? `${cur.type}` : "") + (cur.function ? `${cur.function}` : "") + `(${params})`;
        return rtn;
      }).join("\n");
      const message = JSON.stringify(data.message);
      serverError.orgMessage = serverError.message;
      serverError.message = `${serverError.message}
${message}
Exception: ${data.exception_class}
${trace}`;
      serverError.code = data.code ? data.code : serverError.code;
      serverError.exception = data.exception_class;
      serverError.trace = trace;
    }
    return serverError;
  }
  return Logger.stdSerializers.err(err);
};

// src/Logger.ts
var logger = new import_bunyan.default({
  level: env.log.level,
  name: "cli",
  stream: (0, import_bunyan_format.default)({
    color: true,
    levelInString: env.log.levelInString,
    outputMode: env.log.format
  }),
  serializers: {
    err: errSerializer,
    req: import_bunyan.default.stdSerializers.req,
    res: import_bunyan.default.stdSerializers.res
  }
});

// src/Command.ts
var import_sdk = __toESM(require_dist());

// src/EnvStorage.ts
var import_debug2 = __toESM(require_src());
var debug2 = (0, import_debug2.default)("tq:cli:EnvStorage");
var _EnvStorage = class _EnvStorage {
  static enableSave() {
    _EnvStorage.save = true;
  }
  set(property, value, that = this) {
    const stringifiedValue = JSON.stringify(value);
    const hasValueChanged = env.auth[property] !== stringifiedValue;
    debug2("set %j", {
      property,
      value,
      hasValueChanged,
      save: _EnvStorage.save
    });
    if (hasValueChanged) {
      env.auth[property] = stringifiedValue;
      if (_EnvStorage.save) {
        saveEnv();
      }
    }
    if (that[property] !== value) {
      that[property] = value;
    }
  }
  get(property, defaultVal, that = this) {
    if (that[property] === void 0) {
      const value = env.auth[property];
      if (value !== void 0 && value !== null) {
        that[property] = JSON.parse(value);
      } else if (defaultVal !== void 0) {
        that[property] = defaultVal;
      }
    }
    return that[property];
  }
};
_EnvStorage.save = false;
var EnvStorage = _EnvStorage;

// src/logError.ts
var logError = (err) => {
  if (!err)
    return;
  if (
    // got 401, tried to refresh token, didn't find (ReturnToken.)refresh_token
    err.id === "NO_REFRESH_TOKEN" || err.code === "NO_REFRESH_TOKEN" || // got 401, tried to refresh token, refresh token request failed
    // new SDK only
    err.id === "REFRESH_TOKEN_ERROR" || err.code === "REFRESH_TOKEN_ERROR" || // got 401, unknown reason (simply not authorized)
    err.message === "Unauthenticated."
  ) {
    logger.error(
      "There was an authentication issue. Please try logging in again or using valid credentials.",
      err
    );
    return;
  }
  if (err.error) {
    logger.error(`Status Code ${err.statusCode}`, err.error);
  } else {
    logger.error(err);
  }
};

// src/Command.ts
var import_debug3 = __toESM(require_src());
var debug3 = (0, import_debug3.default)("tq:cli:Command");
var singleClient = new import_sdk.ClientSdk({
  clientId: env.clientId,
  clientSecret: env.clientSecret,
  baseUrl: env.api.url,
  debug: env.api.xDebug,
  errorHandler: (newError) => {
    logError(newError);
  },
  persistentStorage: new EnvStorage(),
  logger
});
(0, import_sdk.setGlobalClient)(singleClient);
var Command = class {
  constructor(command2, description, subBuilder, subHandler) {
    this.command = command2;
    this.description = description;
    this.subBuilder = subBuilder;
    this.subHandler = subHandler;
    this.builder = (args) => {
      return this.subBuilder(args);
    };
    this.handler = (args) => {
      if (args.verbose) {
        logger.info(`TestQuality Host: ${env.api.url}`);
        logger.info("Current path " + process.cwd());
      }
      if (args.save) {
        EnvStorage.enableSave();
      }
      this.subHandler(args);
    };
    this.client = singleClient;
  }
  getProjectId(args) {
    return new Promise((resolve3, reject) => {
      this.reLogin(args).then(() => {
        const projectName = args.project_name;
        if (projectName) {
          (0, import_sdk.projectGetMany)().then((projectList) => {
            const project = projectList.data.find(
              (p) => p.name.toLowerCase() === projectName.toLowerCase()
            );
            if (project) {
              this.projectId = project.id;
              if (args.save) {
                env.variables.projectId = this.projectId.toString();
                saveEnv();
              }
              resolve3(this.projectId);
            } else {
              resolve3(void 0);
            }
          }, reject);
        } else {
          const value = args.project_id || env.variables.projectId;
          if (value) {
            this.projectId = parseInt(value, 10);
            if (args.save) {
              env.variables.projectId = value;
              saveEnv();
            }
          }
          resolve3(this.projectId);
        }
      }, reject);
    });
  }
  reLogin(args) {
    debug3("reLogin %j", args);
    return new Promise((resolve3, reject) => {
      const user = args.username || env.variables.username;
      const password = args.password || env.variables.password;
      if (user && password) {
        this.client.getAuth().login(user, password, true).then(resolve3, reject);
      } else {
        const accessToken = args.access_token || env.variables.accessToken;
        const expiresAt = args.expires_at || env.variables.expiresAt;
        const refreshToken = args.refresh_token || env.variables.refreshToken;
        let token;
        if (accessToken) {
          token = {
            access_token: accessToken,
            expires_at: expiresAt,
            refresh_token: refreshToken
          };
        } else if (env.auth.token) {
          try {
            token = JSON.parse(env.auth.token);
          } catch (error) {
            logger.warn("Error parsing token from env.auth.token");
            reject(error);
          }
        }
        if (token) {
          this.client.getAuth().setToken(token, true).then(resolve3, reject);
        } else {
          resolve3(void 0);
        }
      }
    });
  }
  getParams(args) {
    let params = {};
    if (args.params) {
      if (Array.isArray(args.params)) {
        for (const param of args.params) {
          const parts = param.split("=");
          if (parts.length > 1) {
            params[parts[0]] = parts[1];
          }
        }
      } else {
        params = { ...args.params };
      }
    }
    return params;
  }
  async getId(args, type, projectId, required = true) {
    const id = args[type + "_id"];
    if (id) {
      return parseInt(id, 10);
    }
    const name = args[type + "_name"];
    if (!name) {
      if (required) {
        throw new Error(
          `${type}_name is required. Try adding "--${type}_name=<name>" or "--${type}_id=<number>"`
        );
      }
      return void 0;
    }
    if (!projectId) {
      throw new Error(
        `projectId is required. Try adding "--project_name=<name>" or "--project_id=<number>"`
      );
    }
    const list = await (0, import_sdk.getResponse)(this.client.api, {
      method: "get",
      url: `/${type}`,
      params: {
        project_id: projectId,
        name
      }
    });
    const item = list.data.find(
      (p) => p.name.toLowerCase() === name.toLowerCase()
    );
    if (!item) {
      throw new Error(`${type} ${name} not found!`);
    }
    return item.id;
  }
};

// src/LoginCommand.ts
var LoginCommand = class extends Command {
  constructor() {
    super(
      "login <username> <password>",
      "Login to TestQuality",
      (args) => {
        return args.positional("username", {
          describe: "User name you login as",
          type: "string"
        }).positional("password", {
          describe: "Password for user",
          type: "string"
        }).option("properties", {
          alias: "prop",
          describe: "Add Properties",
          type: "string"
        });
      },
      (args) => {
        if (args.username && args.password) {
          const prop = args.properties ? JSON.parse(args.properties) : void 0;
          this.client.getAuth().login(
            args.username,
            args.password,
            !!args.save,
            prop
          ).then(
            (body) => {
              console.log(body);
            },
            (error) => {
              logError(error);
            }
          );
        }
      }
    );
  }
};

// src/ProjectCommand.ts
var import_sdk2 = __toESM(require_dist());
var ProjectCommand = class extends Command {
  constructor() {
    super(
      "projects",
      "List projects TestQuality",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("delete", {
          alias: "dl",
          describe: "delete a suite",
          type: "boolean",
          default: false,
          boolean: true
        }).option("suite_id", {
          alias: "si",
          describe: "Suite to delete",
          type: "string"
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        });
      },
      (args) => {
        this.reLogin(args).then(
          () => {
            (0, import_sdk2.projectGetMany)({ params: { per_page: -1 } }).then(
              (projectList) => {
                if (args.verbose) {
                  console.log(projectList.data);
                } else {
                  console.log(
                    projectList.data.map((p) => {
                      return { id: p.id, key: p.key, name: p.name };
                    })
                  );
                }
              },
              (error) => {
                logError(error);
              }
            );
          },
          (error) => {
            logError(error);
          }
        );
      }
    );
  }
};

// src/PlanCommand.ts
var import_sdk3 = __toESM(require_dist());
var PlanCommand = class extends Command {
  constructor() {
    super(
      "plans",
      "List plans in project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        });
      },
      (args) => {
        this.getProjectId(args).then(
          (projectId) => {
            const params = this.getParams(args);
            if (projectId) {
              params.project_id = projectId;
            }
            if (args.revision_log) {
              params.revision_log = "true";
            }
            (0, import_sdk3.planGetMany)({
              params
            }).then(
              (planList) => {
                if (args.revision_log) {
                  console.log(planList);
                } else {
                  if (planList.total > 0) {
                    if (args.verbose) {
                      console.log(planList.data);
                    } else {
                      console.log(
                        planList.data.map((p) => {
                          return {
                            id: p.id,
                            key: p.key,
                            name: p.name,
                            project_id: p.project_id
                          };
                        })
                      );
                    }
                  } else {
                    console.log("Result is empty");
                  }
                }
              },
              (error) => {
                logError(error);
              }
            );
          },
          (error) => {
            logError(error);
          }
        );
      }
    );
  }
};

// src/MilestoneCommand.ts
var import_sdk4 = __toESM(require_dist());
var MilestoneCommand = class extends Command {
  constructor() {
    super(
      "milestones",
      "List milestones in project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        });
      },
      (args) => {
        this.getProjectId(args).then(
          (projectId) => {
            if (!projectId) {
              logError(
                'Project is required. Try adding "--project_name=<name>" or "--project_id=<number>"'
              );
            } else {
              (0, import_sdk4.milestoneGetMany)({
                params: {
                  project_id: projectId,
                  revision_log: args.revision_log ? true : void 0
                }
              }).then(
                (milestoneList) => {
                  if (args.revision_log) {
                    console.log(milestoneList);
                  } else {
                    console.log(
                      args.verbose ? milestoneList : milestoneList.data.map((p) => {
                        return { id: p.id, name: p.name };
                      })
                    );
                  }
                },
                (error) => {
                  logError(error);
                }
              );
            }
          },
          (error) => {
            logError(error);
          }
        );
      }
    );
  }
};

// src/UploadTestRunCommand.ts
var import_sdk5 = __toESM(require_dist());
var fs2 = __toESM(require("fs"));
var path3 = __toESM(require("path"));

// node_modules/glob/node_modules/minimatch/dist/mjs/index.js
var import_brace_expansion = __toESM(require_brace_expansion2(), 1);

// node_modules/glob/node_modules/minimatch/dist/mjs/assert-valid-pattern.js
var MAX_PATTERN_LENGTH = 1024 * 64;
var assertValidPattern = (pattern) => {
  if (typeof pattern !== "string") {
    throw new TypeError("invalid pattern");
  }
  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError("pattern is too long");
  }
};

// node_modules/glob/node_modules/minimatch/dist/mjs/brace-expressions.js
var posixClasses = {
  "[:alnum:]": ["\\p{L}\\p{Nl}\\p{Nd}", true],
  "[:alpha:]": ["\\p{L}\\p{Nl}", true],
  "[:ascii:]": ["\\x00-\\x7f", false],
  "[:blank:]": ["\\p{Zs}\\t", true],
  "[:cntrl:]": ["\\p{Cc}", true],
  "[:digit:]": ["\\p{Nd}", true],
  "[:graph:]": ["\\p{Z}\\p{C}", true, true],
  "[:lower:]": ["\\p{Ll}", true],
  "[:print:]": ["\\p{C}", true],
  "[:punct:]": ["\\p{P}", true],
  "[:space:]": ["\\p{Z}\\t\\r\\n\\v\\f", true],
  "[:upper:]": ["\\p{Lu}", true],
  "[:word:]": ["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}", true],
  "[:xdigit:]": ["A-Fa-f0-9", false]
};
var braceEscape = (s) => s.replace(/[[\]\\-]/g, "\\$&");
var regexpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
var rangesToString = (ranges) => ranges.join("");
var parseClass = (glob2, position) => {
  const pos = position;
  if (glob2.charAt(pos) !== "[") {
    throw new Error("not in a brace expression");
  }
  const ranges = [];
  const negs = [];
  let i = pos + 1;
  let sawStart = false;
  let uflag = false;
  let escaping = false;
  let negate = false;
  let endPos = pos;
  let rangeStart = "";
  WHILE:
    while (i < glob2.length) {
      const c = glob2.charAt(i);
      if ((c === "!" || c === "^") && i === pos + 1) {
        negate = true;
        i++;
        continue;
      }
      if (c === "]" && sawStart && !escaping) {
        endPos = i + 1;
        break;
      }
      sawStart = true;
      if (c === "\\") {
        if (!escaping) {
          escaping = true;
          i++;
          continue;
        }
      }
      if (c === "[" && !escaping) {
        for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
          if (glob2.startsWith(cls, i)) {
            if (rangeStart) {
              return ["$.", false, glob2.length - pos, true];
            }
            i += cls.length;
            if (neg)
              negs.push(unip);
            else
              ranges.push(unip);
            uflag = uflag || u;
            continue WHILE;
          }
        }
      }
      escaping = false;
      if (rangeStart) {
        if (c > rangeStart) {
          ranges.push(braceEscape(rangeStart) + "-" + braceEscape(c));
        } else if (c === rangeStart) {
          ranges.push(braceEscape(c));
        }
        rangeStart = "";
        i++;
        continue;
      }
      if (glob2.startsWith("-]", i + 1)) {
        ranges.push(braceEscape(c + "-"));
        i += 2;
        continue;
      }
      if (glob2.startsWith("-", i + 1)) {
        rangeStart = c;
        i += 2;
        continue;
      }
      ranges.push(braceEscape(c));
      i++;
    }
  if (endPos < i) {
    return ["", false, 0, false];
  }
  if (!ranges.length && !negs.length) {
    return ["$.", false, glob2.length - pos, true];
  }
  if (negs.length === 0 && ranges.length === 1 && /^\\?.$/.test(ranges[0]) && !negate) {
    const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];
    return [regexpEscape(r), false, endPos - pos, false];
  }
  const sranges = "[" + (negate ? "^" : "") + rangesToString(ranges) + "]";
  const snegs = "[" + (negate ? "" : "^") + rangesToString(negs) + "]";
  const comb = ranges.length && negs.length ? "(" + sranges + "|" + snegs + ")" : ranges.length ? sranges : snegs;
  return [comb, uflag, endPos - pos, true];
};

// node_modules/glob/node_modules/minimatch/dist/mjs/unescape.js
var unescape2 = (s, { windowsPathsNoEscape = false } = {}) => {
  return windowsPathsNoEscape ? s.replace(/\[([^\/\\])\]/g, "$1") : s.replace(/((?!\\).|^)\[([^\/\\])\]/g, "$1$2").replace(/\\([^\/])/g, "$1");
};

// node_modules/glob/node_modules/minimatch/dist/mjs/ast.js
var types = /* @__PURE__ */ new Set(["!", "?", "+", "*", "@"]);
var isExtglobType = (c) => types.has(c);
var startNoTraversal = "(?!(?:^|/)\\.\\.?(?:$|/))";
var startNoDot = "(?!\\.)";
var addPatternStart = /* @__PURE__ */ new Set(["[", "."]);
var justDots = /* @__PURE__ */ new Set(["..", "."]);
var reSpecials = new Set("().*{}+?[]^$\\!");
var regExpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
var qmark = "[^/]";
var star = qmark + "*?";
var starNoEmpty = qmark + "+?";
var _root, _hasMagic, _uflag, _parts, _parent, _parentIndex, _negs, _filledNegs, _options, _toString, _emptyExt, _fillNegs, fillNegs_fn, _parseAST, parseAST_fn, _partsToRegExp, partsToRegExp_fn, _parseGlob, parseGlob_fn;
var _AST = class _AST {
  constructor(type, parent, options = {}) {
    __privateAdd(this, _fillNegs);
    __privateAdd(this, _partsToRegExp);
    __publicField(this, "type");
    __privateAdd(this, _root, void 0);
    __privateAdd(this, _hasMagic, void 0);
    __privateAdd(this, _uflag, false);
    __privateAdd(this, _parts, []);
    __privateAdd(this, _parent, void 0);
    __privateAdd(this, _parentIndex, void 0);
    __privateAdd(this, _negs, void 0);
    __privateAdd(this, _filledNegs, false);
    __privateAdd(this, _options, void 0);
    __privateAdd(this, _toString, void 0);
    // set to true if it's an extglob with no children
    // (which really means one child of '')
    __privateAdd(this, _emptyExt, false);
    this.type = type;
    if (type)
      __privateSet(this, _hasMagic, true);
    __privateSet(this, _parent, parent);
    __privateSet(this, _root, __privateGet(this, _parent) ? __privateGet(__privateGet(this, _parent), _root) : this);
    __privateSet(this, _options, __privateGet(this, _root) === this ? options : __privateGet(__privateGet(this, _root), _options));
    __privateSet(this, _negs, __privateGet(this, _root) === this ? [] : __privateGet(__privateGet(this, _root), _negs));
    if (type === "!" && !__privateGet(__privateGet(this, _root), _filledNegs))
      __privateGet(this, _negs).push(this);
    __privateSet(this, _parentIndex, __privateGet(this, _parent) ? __privateGet(__privateGet(this, _parent), _parts).length : 0);
  }
  get hasMagic() {
    if (__privateGet(this, _hasMagic) !== void 0)
      return __privateGet(this, _hasMagic);
    for (const p of __privateGet(this, _parts)) {
      if (typeof p === "string")
        continue;
      if (p.type || p.hasMagic)
        return __privateSet(this, _hasMagic, true);
    }
    return __privateGet(this, _hasMagic);
  }
  // reconstructs the pattern
  toString() {
    if (__privateGet(this, _toString) !== void 0)
      return __privateGet(this, _toString);
    if (!this.type) {
      return __privateSet(this, _toString, __privateGet(this, _parts).map((p) => String(p)).join(""));
    } else {
      return __privateSet(this, _toString, this.type + "(" + __privateGet(this, _parts).map((p) => String(p)).join("|") + ")");
    }
  }
  push(...parts) {
    for (const p of parts) {
      if (p === "")
        continue;
      if (typeof p !== "string" && !(p instanceof _AST && __privateGet(p, _parent) === this)) {
        throw new Error("invalid part: " + p);
      }
      __privateGet(this, _parts).push(p);
    }
  }
  toJSON() {
    var _a2;
    const ret = this.type === null ? __privateGet(this, _parts).slice().map((p) => typeof p === "string" ? p : p.toJSON()) : [this.type, ...__privateGet(this, _parts).map((p) => p.toJSON())];
    if (this.isStart() && !this.type)
      ret.unshift([]);
    if (this.isEnd() && (this === __privateGet(this, _root) || __privateGet(__privateGet(this, _root), _filledNegs) && ((_a2 = __privateGet(this, _parent)) == null ? void 0 : _a2.type) === "!")) {
      ret.push({});
    }
    return ret;
  }
  isStart() {
    var _a2;
    if (__privateGet(this, _root) === this)
      return true;
    if (!((_a2 = __privateGet(this, _parent)) == null ? void 0 : _a2.isStart()))
      return false;
    if (__privateGet(this, _parentIndex) === 0)
      return true;
    const p = __privateGet(this, _parent);
    for (let i = 0; i < __privateGet(this, _parentIndex); i++) {
      const pp = __privateGet(p, _parts)[i];
      if (!(pp instanceof _AST && pp.type === "!")) {
        return false;
      }
    }
    return true;
  }
  isEnd() {
    var _a2, _b, _c;
    if (__privateGet(this, _root) === this)
      return true;
    if (((_a2 = __privateGet(this, _parent)) == null ? void 0 : _a2.type) === "!")
      return true;
    if (!((_b = __privateGet(this, _parent)) == null ? void 0 : _b.isEnd()))
      return false;
    if (!this.type)
      return (_c = __privateGet(this, _parent)) == null ? void 0 : _c.isEnd();
    const pl = __privateGet(this, _parent) ? __privateGet(__privateGet(this, _parent), _parts).length : 0;
    return __privateGet(this, _parentIndex) === pl - 1;
  }
  copyIn(part) {
    if (typeof part === "string")
      this.push(part);
    else
      this.push(part.clone(this));
  }
  clone(parent) {
    const c = new _AST(this.type, parent);
    for (const p of __privateGet(this, _parts)) {
      c.copyIn(p);
    }
    return c;
  }
  static fromGlob(pattern, options = {}) {
    var _a2;
    const ast = new _AST(null, void 0, options);
    __privateMethod(_a2 = _AST, _parseAST, parseAST_fn).call(_a2, pattern, ast, 0, options);
    return ast;
  }
  // returns the regular expression if there's magic, or the unescaped
  // string if not.
  toMMPattern() {
    if (this !== __privateGet(this, _root))
      return __privateGet(this, _root).toMMPattern();
    const glob2 = this.toString();
    const [re, body, hasMagic2, uflag] = this.toRegExpSource();
    const anyMagic = hasMagic2 || __privateGet(this, _hasMagic) || __privateGet(this, _options).nocase && !__privateGet(this, _options).nocaseMagicOnly && glob2.toUpperCase() !== glob2.toLowerCase();
    if (!anyMagic) {
      return body;
    }
    const flags = (__privateGet(this, _options).nocase ? "i" : "") + (uflag ? "u" : "");
    return Object.assign(new RegExp(`^${re}$`, flags), {
      _src: re,
      _glob: glob2
    });
  }
  // returns the string match, the regexp source, whether there's magic
  // in the regexp (so a regular expression is required) and whether or
  // not the uflag is needed for the regular expression (for posix classes)
  // TODO: instead of injecting the start/end at this point, just return
  // the BODY of the regexp, along with the start/end portions suitable
  // for binding the start/end in either a joined full-path makeRe context
  // (where we bind to (^|/), or a standalone matchPart context (where
  // we bind to ^, and not /).  Otherwise slashes get duped!
  //
  // In part-matching mode, the start is:
  // - if not isStart: nothing
  // - if traversal possible, but not allowed: ^(?!\.\.?$)
  // - if dots allowed or not possible: ^
  // - if dots possible and not allowed: ^(?!\.)
  // end is:
  // - if not isEnd(): nothing
  // - else: $
  //
  // In full-path matching mode, we put the slash at the START of the
  // pattern, so start is:
  // - if first pattern: same as part-matching mode
  // - if not isStart(): nothing
  // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
  // - if dots allowed or not possible: /
  // - if dots possible and not allowed: /(?!\.)
  // end is:
  // - if last pattern, same as part-matching mode
  // - else nothing
  //
  // Always put the (?:$|/) on negated tails, though, because that has to be
  // there to bind the end of the negated pattern portion, and it's easier to
  // just stick it in now rather than try to inject it later in the middle of
  // the pattern.
  //
  // We can just always return the same end, and leave it up to the caller
  // to know whether it's going to be used joined or in parts.
  // And, if the start is adjusted slightly, can do the same there:
  // - if not isStart: nothing
  // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
  // - if dots allowed or not possible: (?:/|^)
  // - if dots possible and not allowed: (?:/|^)(?!\.)
  //
  // But it's better to have a simpler binding without a conditional, for
  // performance, so probably better to return both start options.
  //
  // Then the caller just ignores the end if it's not the first pattern,
  // and the start always gets applied.
  //
  // But that's always going to be $ if it's the ending pattern, or nothing,
  // so the caller can just attach $ at the end of the pattern when building.
  //
  // So the todo is:
  // - better detect what kind of start is needed
  // - return both flavors of starting pattern
  // - attach $ at the end of the pattern when creating the actual RegExp
  //
  // Ah, but wait, no, that all only applies to the root when the first pattern
  // is not an extglob. If the first pattern IS an extglob, then we need all
  // that dot prevention biz to live in the extglob portions, because eg
  // +(*|.x*) can match .xy but not .yx.
  //
  // So, return the two flavors if it's #root and the first child is not an
  // AST, otherwise leave it to the child AST to handle it, and there,
  // use the (?:^|/) style of start binding.
  //
  // Even simplified further:
  // - Since the start for a join is eg /(?!\.) and the start for a part
  // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
  // or start or whatever) and prepend ^ or / at the Regexp construction.
  toRegExpSource(allowDot) {
    var _a2;
    const dot = allowDot ?? !!__privateGet(this, _options).dot;
    if (__privateGet(this, _root) === this)
      __privateMethod(this, _fillNegs, fillNegs_fn).call(this);
    if (!this.type) {
      const noEmpty = this.isStart() && this.isEnd();
      const src = __privateGet(this, _parts).map((p) => {
        var _a3;
        const [re, _, hasMagic2, uflag] = typeof p === "string" ? __privateMethod(_a3 = _AST, _parseGlob, parseGlob_fn).call(_a3, p, __privateGet(this, _hasMagic), noEmpty) : p.toRegExpSource(allowDot);
        __privateSet(this, _hasMagic, __privateGet(this, _hasMagic) || hasMagic2);
        __privateSet(this, _uflag, __privateGet(this, _uflag) || uflag);
        return re;
      }).join("");
      let start2 = "";
      if (this.isStart()) {
        if (typeof __privateGet(this, _parts)[0] === "string") {
          const dotTravAllowed = __privateGet(this, _parts).length === 1 && justDots.has(__privateGet(this, _parts)[0]);
          if (!dotTravAllowed) {
            const aps = addPatternStart;
            const needNoTrav = (
              // dots are allowed, and the pattern starts with [ or .
              dot && aps.has(src.charAt(0)) || // the pattern starts with \., and then [ or .
              src.startsWith("\\.") && aps.has(src.charAt(2)) || // the pattern starts with \.\., and then [ or .
              src.startsWith("\\.\\.") && aps.has(src.charAt(4))
            );
            const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));
            start2 = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : "";
          }
        }
      }
      let end = "";
      if (this.isEnd() && __privateGet(__privateGet(this, _root), _filledNegs) && ((_a2 = __privateGet(this, _parent)) == null ? void 0 : _a2.type) === "!") {
        end = "(?:$|\\/)";
      }
      const final2 = start2 + src + end;
      return [
        final2,
        unescape2(src),
        __privateSet(this, _hasMagic, !!__privateGet(this, _hasMagic)),
        __privateGet(this, _uflag)
      ];
    }
    const repeated = this.type === "*" || this.type === "+";
    const start = this.type === "!" ? "(?:(?!(?:" : "(?:";
    let body = __privateMethod(this, _partsToRegExp, partsToRegExp_fn).call(this, dot);
    if (this.isStart() && this.isEnd() && !body && this.type !== "!") {
      const s = this.toString();
      __privateSet(this, _parts, [s]);
      this.type = null;
      __privateSet(this, _hasMagic, void 0);
      return [s, unescape2(this.toString()), false, false];
    }
    let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot ? "" : __privateMethod(this, _partsToRegExp, partsToRegExp_fn).call(this, true);
    if (bodyDotAllowed === body) {
      bodyDotAllowed = "";
    }
    if (bodyDotAllowed) {
      body = `(?:${body})(?:${bodyDotAllowed})*?`;
    }
    let final = "";
    if (this.type === "!" && __privateGet(this, _emptyExt)) {
      final = (this.isStart() && !dot ? startNoDot : "") + starNoEmpty;
    } else {
      const close = this.type === "!" ? (
        // !() must match something,but !(x) can match ''
        "))" + (this.isStart() && !dot && !allowDot ? startNoDot : "") + star + ")"
      ) : this.type === "@" ? ")" : this.type === "?" ? ")?" : this.type === "+" && bodyDotAllowed ? ")" : this.type === "*" && bodyDotAllowed ? `)?` : `)${this.type}`;
      final = start + body + close;
    }
    return [
      final,
      unescape2(body),
      __privateSet(this, _hasMagic, !!__privateGet(this, _hasMagic)),
      __privateGet(this, _uflag)
    ];
  }
};
_root = new WeakMap();
_hasMagic = new WeakMap();
_uflag = new WeakMap();
_parts = new WeakMap();
_parent = new WeakMap();
_parentIndex = new WeakMap();
_negs = new WeakMap();
_filledNegs = new WeakMap();
_options = new WeakMap();
_toString = new WeakMap();
_emptyExt = new WeakMap();
_fillNegs = new WeakSet();
fillNegs_fn = function() {
  if (this !== __privateGet(this, _root))
    throw new Error("should only call on root");
  if (__privateGet(this, _filledNegs))
    return this;
  this.toString();
  __privateSet(this, _filledNegs, true);
  let n;
  while (n = __privateGet(this, _negs).pop()) {
    if (n.type !== "!")
      continue;
    let p = n;
    let pp = __privateGet(p, _parent);
    while (pp) {
      for (let i = __privateGet(p, _parentIndex) + 1; !pp.type && i < __privateGet(pp, _parts).length; i++) {
        for (const part of __privateGet(n, _parts)) {
          if (typeof part === "string") {
            throw new Error("string part in extglob AST??");
          }
          part.copyIn(__privateGet(pp, _parts)[i]);
        }
      }
      p = pp;
      pp = __privateGet(p, _parent);
    }
  }
  return this;
};
_parseAST = new WeakSet();
parseAST_fn = function(str, ast, pos, opt) {
  var _a2, _b;
  let escaping = false;
  let inBrace = false;
  let braceStart = -1;
  let braceNeg = false;
  if (ast.type === null) {
    let i2 = pos;
    let acc2 = "";
    while (i2 < str.length) {
      const c = str.charAt(i2++);
      if (escaping || c === "\\") {
        escaping = !escaping;
        acc2 += c;
        continue;
      }
      if (inBrace) {
        if (i2 === braceStart + 1) {
          if (c === "^" || c === "!") {
            braceNeg = true;
          }
        } else if (c === "]" && !(i2 === braceStart + 2 && braceNeg)) {
          inBrace = false;
        }
        acc2 += c;
        continue;
      } else if (c === "[") {
        inBrace = true;
        braceStart = i2;
        braceNeg = false;
        acc2 += c;
        continue;
      }
      if (!opt.noext && isExtglobType(c) && str.charAt(i2) === "(") {
        ast.push(acc2);
        acc2 = "";
        const ext2 = new _AST(c, ast);
        i2 = __privateMethod(_a2 = _AST, _parseAST, parseAST_fn).call(_a2, str, ext2, i2, opt);
        ast.push(ext2);
        continue;
      }
      acc2 += c;
    }
    ast.push(acc2);
    return i2;
  }
  let i = pos + 1;
  let part = new _AST(null, ast);
  const parts = [];
  let acc = "";
  while (i < str.length) {
    const c = str.charAt(i++);
    if (escaping || c === "\\") {
      escaping = !escaping;
      acc += c;
      continue;
    }
    if (inBrace) {
      if (i === braceStart + 1) {
        if (c === "^" || c === "!") {
          braceNeg = true;
        }
      } else if (c === "]" && !(i === braceStart + 2 && braceNeg)) {
        inBrace = false;
      }
      acc += c;
      continue;
    } else if (c === "[") {
      inBrace = true;
      braceStart = i;
      braceNeg = false;
      acc += c;
      continue;
    }
    if (isExtglobType(c) && str.charAt(i) === "(") {
      part.push(acc);
      acc = "";
      const ext2 = new _AST(c, part);
      part.push(ext2);
      i = __privateMethod(_b = _AST, _parseAST, parseAST_fn).call(_b, str, ext2, i, opt);
      continue;
    }
    if (c === "|") {
      part.push(acc);
      acc = "";
      parts.push(part);
      part = new _AST(null, ast);
      continue;
    }
    if (c === ")") {
      if (acc === "" && __privateGet(ast, _parts).length === 0) {
        __privateSet(ast, _emptyExt, true);
      }
      part.push(acc);
      acc = "";
      ast.push(...parts, part);
      return i;
    }
    acc += c;
  }
  ast.type = null;
  __privateSet(ast, _hasMagic, void 0);
  __privateSet(ast, _parts, [str.substring(pos - 1)]);
  return i;
};
_partsToRegExp = new WeakSet();
partsToRegExp_fn = function(dot) {
  return __privateGet(this, _parts).map((p) => {
    if (typeof p === "string") {
      throw new Error("string type in extglob ast??");
    }
    const [re, _, _hasMagic2, uflag] = p.toRegExpSource(dot);
    __privateSet(this, _uflag, __privateGet(this, _uflag) || uflag);
    return re;
  }).filter((p) => !(this.isStart() && this.isEnd()) || !!p).join("|");
};
_parseGlob = new WeakSet();
parseGlob_fn = function(glob2, hasMagic2, noEmpty = false) {
  let escaping = false;
  let re = "";
  let uflag = false;
  for (let i = 0; i < glob2.length; i++) {
    const c = glob2.charAt(i);
    if (escaping) {
      escaping = false;
      re += (reSpecials.has(c) ? "\\" : "") + c;
      continue;
    }
    if (c === "\\") {
      if (i === glob2.length - 1) {
        re += "\\\\";
      } else {
        escaping = true;
      }
      continue;
    }
    if (c === "[") {
      const [src, needUflag, consumed, magic] = parseClass(glob2, i);
      if (consumed) {
        re += src;
        uflag = uflag || needUflag;
        i += consumed - 1;
        hasMagic2 = hasMagic2 || magic;
        continue;
      }
    }
    if (c === "*") {
      if (noEmpty && glob2 === "*")
        re += starNoEmpty;
      else
        re += star;
      hasMagic2 = true;
      continue;
    }
    if (c === "?") {
      re += qmark;
      hasMagic2 = true;
      continue;
    }
    re += regExpEscape(c);
  }
  return [re, unescape2(glob2), !!hasMagic2, uflag];
};
__privateAdd(_AST, _parseAST);
__privateAdd(_AST, _parseGlob);
var AST = _AST;

// node_modules/glob/node_modules/minimatch/dist/mjs/escape.js
var escape = (s, { windowsPathsNoEscape = false } = {}) => {
  return windowsPathsNoEscape ? s.replace(/[?*()[\]]/g, "[$&]") : s.replace(/[?*()[\]\\]/g, "\\$&");
};

// node_modules/glob/node_modules/minimatch/dist/mjs/index.js
var minimatch = (p, pattern, options = {}) => {
  assertValidPattern(pattern);
  if (!options.nocomment && pattern.charAt(0) === "#") {
    return false;
  }
  return new Minimatch(pattern, options).match(p);
};
var starDotExtRE = /^\*+([^+@!?\*\[\(]*)$/;
var starDotExtTest = (ext2) => (f) => !f.startsWith(".") && f.endsWith(ext2);
var starDotExtTestDot = (ext2) => (f) => f.endsWith(ext2);
var starDotExtTestNocase = (ext2) => {
  ext2 = ext2.toLowerCase();
  return (f) => !f.startsWith(".") && f.toLowerCase().endsWith(ext2);
};
var starDotExtTestNocaseDot = (ext2) => {
  ext2 = ext2.toLowerCase();
  return (f) => f.toLowerCase().endsWith(ext2);
};
var starDotStarRE = /^\*+\.\*+$/;
var starDotStarTest = (f) => !f.startsWith(".") && f.includes(".");
var starDotStarTestDot = (f) => f !== "." && f !== ".." && f.includes(".");
var dotStarRE = /^\.\*+$/;
var dotStarTest = (f) => f !== "." && f !== ".." && f.startsWith(".");
var starRE = /^\*+$/;
var starTest = (f) => f.length !== 0 && !f.startsWith(".");
var starTestDot = (f) => f.length !== 0 && f !== "." && f !== "..";
var qmarksRE = /^\?+([^+@!?\*\[\(]*)?$/;
var qmarksTestNocase = ([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExt([$0]);
  if (!ext2)
    return noext;
  ext2 = ext2.toLowerCase();
  return (f) => noext(f) && f.toLowerCase().endsWith(ext2);
};
var qmarksTestNocaseDot = ([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExtDot([$0]);
  if (!ext2)
    return noext;
  ext2 = ext2.toLowerCase();
  return (f) => noext(f) && f.toLowerCase().endsWith(ext2);
};
var qmarksTestDot = ([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExtDot([$0]);
  return !ext2 ? noext : (f) => noext(f) && f.endsWith(ext2);
};
var qmarksTest = ([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExt([$0]);
  return !ext2 ? noext : (f) => noext(f) && f.endsWith(ext2);
};
var qmarksTestNoExt = ([$0]) => {
  const len = $0.length;
  return (f) => f.length === len && !f.startsWith(".");
};
var qmarksTestNoExtDot = ([$0]) => {
  const len = $0.length;
  return (f) => f.length === len && f !== "." && f !== "..";
};
var defaultPlatform = typeof process === "object" && process ? typeof process.env === "object" && process.env && process.env.__MINIMATCH_TESTING_PLATFORM__ || process.platform : "posix";
var path2 = {
  win32: { sep: "\\" },
  posix: { sep: "/" }
};
var sep = defaultPlatform === "win32" ? path2.win32.sep : path2.posix.sep;
minimatch.sep = sep;
var GLOBSTAR = Symbol("globstar **");
minimatch.GLOBSTAR = GLOBSTAR;
var qmark2 = "[^/]";
var star2 = qmark2 + "*?";
var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
var filter = (pattern, options = {}) => (p) => minimatch(p, pattern, options);
minimatch.filter = filter;
var ext = (a, b = {}) => Object.assign({}, a, b);
var defaults = (def) => {
  if (!def || typeof def !== "object" || !Object.keys(def).length) {
    return minimatch;
  }
  const orig = minimatch;
  const m = (p, pattern, options = {}) => orig(p, pattern, ext(def, options));
  return Object.assign(m, {
    Minimatch: class Minimatch extends orig.Minimatch {
      constructor(pattern, options = {}) {
        super(pattern, ext(def, options));
      }
      static defaults(options) {
        return orig.defaults(ext(def, options)).Minimatch;
      }
    },
    AST: class AST extends orig.AST {
      /* c8 ignore start */
      constructor(type, parent, options = {}) {
        super(type, parent, ext(def, options));
      }
      /* c8 ignore stop */
      static fromGlob(pattern, options = {}) {
        return orig.AST.fromGlob(pattern, ext(def, options));
      }
    },
    unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),
    escape: (s, options = {}) => orig.escape(s, ext(def, options)),
    filter: (pattern, options = {}) => orig.filter(pattern, ext(def, options)),
    defaults: (options) => orig.defaults(ext(def, options)),
    makeRe: (pattern, options = {}) => orig.makeRe(pattern, ext(def, options)),
    braceExpand: (pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)),
    match: (list, pattern, options = {}) => orig.match(list, pattern, ext(def, options)),
    sep: orig.sep,
    GLOBSTAR
  });
};
minimatch.defaults = defaults;
var braceExpand = (pattern, options = {}) => {
  assertValidPattern(pattern);
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    return [pattern];
  }
  return (0, import_brace_expansion.default)(pattern);
};
minimatch.braceExpand = braceExpand;
var makeRe = (pattern, options = {}) => new Minimatch(pattern, options).makeRe();
minimatch.makeRe = makeRe;
var match = (list, pattern, options = {}) => {
  const mm = new Minimatch(pattern, options);
  list = list.filter((f) => mm.match(f));
  if (mm.options.nonull && !list.length) {
    list.push(pattern);
  }
  return list;
};
minimatch.match = match;
var globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/;
var regExpEscape2 = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
var Minimatch = class {
  options;
  set;
  pattern;
  windowsPathsNoEscape;
  nonegate;
  negate;
  comment;
  empty;
  preserveMultipleSlashes;
  partial;
  globSet;
  globParts;
  nocase;
  isWindows;
  platform;
  windowsNoMagicRoot;
  regexp;
  constructor(pattern, options = {}) {
    assertValidPattern(pattern);
    options = options || {};
    this.options = options;
    this.pattern = pattern;
    this.platform = options.platform || defaultPlatform;
    this.isWindows = this.platform === "win32";
    this.windowsPathsNoEscape = !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;
    if (this.windowsPathsNoEscape) {
      this.pattern = this.pattern.replace(/\\/g, "/");
    }
    this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;
    this.regexp = null;
    this.negate = false;
    this.nonegate = !!options.nonegate;
    this.comment = false;
    this.empty = false;
    this.partial = !!options.partial;
    this.nocase = !!this.options.nocase;
    this.windowsNoMagicRoot = options.windowsNoMagicRoot !== void 0 ? options.windowsNoMagicRoot : !!(this.isWindows && this.nocase);
    this.globSet = [];
    this.globParts = [];
    this.set = [];
    this.make();
  }
  hasMagic() {
    if (this.options.magicalBraces && this.set.length > 1) {
      return true;
    }
    for (const pattern of this.set) {
      for (const part of pattern) {
        if (typeof part !== "string")
          return true;
      }
    }
    return false;
  }
  debug(..._) {
  }
  make() {
    const pattern = this.pattern;
    const options = this.options;
    if (!options.nocomment && pattern.charAt(0) === "#") {
      this.comment = true;
      return;
    }
    if (!pattern) {
      this.empty = true;
      return;
    }
    this.parseNegate();
    this.globSet = [...new Set(this.braceExpand())];
    if (options.debug) {
      this.debug = (...args) => console.error(...args);
    }
    this.debug(this.pattern, this.globSet);
    const rawGlobParts = this.globSet.map((s) => this.slashSplit(s));
    this.globParts = this.preprocess(rawGlobParts);
    this.debug(this.pattern, this.globParts);
    let set = this.globParts.map((s, _, __) => {
      if (this.isWindows && this.windowsNoMagicRoot) {
        const isUNC = s[0] === "" && s[1] === "" && (s[2] === "?" || !globMagic.test(s[2])) && !globMagic.test(s[3]);
        const isDrive = /^[a-z]:/i.test(s[0]);
        if (isUNC) {
          return [...s.slice(0, 4), ...s.slice(4).map((ss) => this.parse(ss))];
        } else if (isDrive) {
          return [s[0], ...s.slice(1).map((ss) => this.parse(ss))];
        }
      }
      return s.map((ss) => this.parse(ss));
    });
    this.debug(this.pattern, set);
    this.set = set.filter((s) => s.indexOf(false) === -1);
    if (this.isWindows) {
      for (let i = 0; i < this.set.length; i++) {
        const p = this.set[i];
        if (p[0] === "" && p[1] === "" && this.globParts[i][2] === "?" && typeof p[3] === "string" && /^[a-z]:$/i.test(p[3])) {
          p[2] = "?";
        }
      }
    }
    this.debug(this.pattern, this.set);
  }
  // various transforms to equivalent pattern sets that are
  // faster to process in a filesystem walk.  The goal is to
  // eliminate what we can, and push all ** patterns as far
  // to the right as possible, even if it increases the number
  // of patterns that we have to process.
  preprocess(globParts) {
    if (this.options.noglobstar) {
      for (let i = 0; i < globParts.length; i++) {
        for (let j = 0; j < globParts[i].length; j++) {
          if (globParts[i][j] === "**") {
            globParts[i][j] = "*";
          }
        }
      }
    }
    const { optimizationLevel = 1 } = this.options;
    if (optimizationLevel >= 2) {
      globParts = this.firstPhasePreProcess(globParts);
      globParts = this.secondPhasePreProcess(globParts);
    } else if (optimizationLevel >= 1) {
      globParts = this.levelOneOptimize(globParts);
    } else {
      globParts = this.adjascentGlobstarOptimize(globParts);
    }
    return globParts;
  }
  // just get rid of adjascent ** portions
  adjascentGlobstarOptimize(globParts) {
    return globParts.map((parts) => {
      let gs = -1;
      while (-1 !== (gs = parts.indexOf("**", gs + 1))) {
        let i = gs;
        while (parts[i + 1] === "**") {
          i++;
        }
        if (i !== gs) {
          parts.splice(gs, i - gs);
        }
      }
      return parts;
    });
  }
  // get rid of adjascent ** and resolve .. portions
  levelOneOptimize(globParts) {
    return globParts.map((parts) => {
      parts = parts.reduce((set, part) => {
        const prev = set[set.length - 1];
        if (part === "**" && prev === "**") {
          return set;
        }
        if (part === "..") {
          if (prev && prev !== ".." && prev !== "." && prev !== "**") {
            set.pop();
            return set;
          }
        }
        set.push(part);
        return set;
      }, []);
      return parts.length === 0 ? [""] : parts;
    });
  }
  levelTwoFileOptimize(parts) {
    if (!Array.isArray(parts)) {
      parts = this.slashSplit(parts);
    }
    let didSomething = false;
    do {
      didSomething = false;
      if (!this.preserveMultipleSlashes) {
        for (let i = 1; i < parts.length - 1; i++) {
          const p = parts[i];
          if (i === 1 && p === "" && parts[0] === "")
            continue;
          if (p === "." || p === "") {
            didSomething = true;
            parts.splice(i, 1);
            i--;
          }
        }
        if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
          didSomething = true;
          parts.pop();
        }
      }
      let dd = 0;
      while (-1 !== (dd = parts.indexOf("..", dd + 1))) {
        const p = parts[dd - 1];
        if (p && p !== "." && p !== ".." && p !== "**") {
          didSomething = true;
          parts.splice(dd - 1, 2);
          dd -= 2;
        }
      }
    } while (didSomething);
    return parts.length === 0 ? [""] : parts;
  }
  // First phase: single-pattern processing
  // <pre> is 1 or more portions
  // <rest> is 1 or more portions
  // <p> is any portion other than ., .., '', or **
  // <e> is . or ''
  //
  // **/.. is *brutal* for filesystem walking performance, because
  // it effectively resets the recursive walk each time it occurs,
  // and ** cannot be reduced out by a .. pattern part like a regexp
  // or most strings (other than .., ., and '') can be.
  //
  // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
  // <pre>/<e>/<rest> -> <pre>/<rest>
  // <pre>/<p>/../<rest> -> <pre>/<rest>
  // **/**/<rest> -> **/<rest>
  //
  // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
  // this WOULD be allowed if ** did follow symlinks, or * didn't
  firstPhasePreProcess(globParts) {
    let didSomething = false;
    do {
      didSomething = false;
      for (let parts of globParts) {
        let gs = -1;
        while (-1 !== (gs = parts.indexOf("**", gs + 1))) {
          let gss = gs;
          while (parts[gss + 1] === "**") {
            gss++;
          }
          if (gss > gs) {
            parts.splice(gs + 1, gss - gs);
          }
          let next = parts[gs + 1];
          const p = parts[gs + 2];
          const p2 = parts[gs + 3];
          if (next !== "..")
            continue;
          if (!p || p === "." || p === ".." || !p2 || p2 === "." || p2 === "..") {
            continue;
          }
          didSomething = true;
          parts.splice(gs, 1);
          const other = parts.slice(0);
          other[gs] = "**";
          globParts.push(other);
          gs--;
        }
        if (!this.preserveMultipleSlashes) {
          for (let i = 1; i < parts.length - 1; i++) {
            const p = parts[i];
            if (i === 1 && p === "" && parts[0] === "")
              continue;
            if (p === "." || p === "") {
              didSomething = true;
              parts.splice(i, 1);
              i--;
            }
          }
          if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
            didSomething = true;
            parts.pop();
          }
        }
        let dd = 0;
        while (-1 !== (dd = parts.indexOf("..", dd + 1))) {
          const p = parts[dd - 1];
          if (p && p !== "." && p !== ".." && p !== "**") {
            didSomething = true;
            const needDot = dd === 1 && parts[dd + 1] === "**";
            const splin = needDot ? ["."] : [];
            parts.splice(dd - 1, 2, ...splin);
            if (parts.length === 0)
              parts.push("");
            dd -= 2;
          }
        }
      }
    } while (didSomething);
    return globParts;
  }
  // second phase: multi-pattern dedupes
  // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
  // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
  // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
  //
  // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
  // ^-- not valid because ** doens't follow symlinks
  secondPhasePreProcess(globParts) {
    for (let i = 0; i < globParts.length - 1; i++) {
      for (let j = i + 1; j < globParts.length; j++) {
        const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);
        if (!matched)
          continue;
        globParts[i] = matched;
        globParts[j] = [];
      }
    }
    return globParts.filter((gs) => gs.length);
  }
  partsMatch(a, b, emptyGSMatch = false) {
    let ai = 0;
    let bi = 0;
    let result = [];
    let which = "";
    while (ai < a.length && bi < b.length) {
      if (a[ai] === b[bi]) {
        result.push(which === "b" ? b[bi] : a[ai]);
        ai++;
        bi++;
      } else if (emptyGSMatch && a[ai] === "**" && b[bi] === a[ai + 1]) {
        result.push(a[ai]);
        ai++;
      } else if (emptyGSMatch && b[bi] === "**" && a[ai] === b[bi + 1]) {
        result.push(b[bi]);
        bi++;
      } else if (a[ai] === "*" && b[bi] && (this.options.dot || !b[bi].startsWith(".")) && b[bi] !== "**") {
        if (which === "b")
          return false;
        which = "a";
        result.push(a[ai]);
        ai++;
        bi++;
      } else if (b[bi] === "*" && a[ai] && (this.options.dot || !a[ai].startsWith(".")) && a[ai] !== "**") {
        if (which === "a")
          return false;
        which = "b";
        result.push(b[bi]);
        ai++;
        bi++;
      } else {
        return false;
      }
    }
    return a.length === b.length && result;
  }
  parseNegate() {
    if (this.nonegate)
      return;
    const pattern = this.pattern;
    let negate = false;
    let negateOffset = 0;
    for (let i = 0; i < pattern.length && pattern.charAt(i) === "!"; i++) {
      negate = !negate;
      negateOffset++;
    }
    if (negateOffset)
      this.pattern = pattern.slice(negateOffset);
    this.negate = negate;
  }
  // set partial to true to test if, for example,
  // "/a/b" matches the start of "/*/b/*/d"
  // Partial means, if you run out of file before you run
  // out of pattern, then that's fine, as long as all
  // the parts match.
  matchOne(file, pattern, partial = false) {
    const options = this.options;
    if (this.isWindows) {
      const fileDrive = typeof file[0] === "string" && /^[a-z]:$/i.test(file[0]);
      const fileUNC = !fileDrive && file[0] === "" && file[1] === "" && file[2] === "?" && /^[a-z]:$/i.test(file[3]);
      const patternDrive = typeof pattern[0] === "string" && /^[a-z]:$/i.test(pattern[0]);
      const patternUNC = !patternDrive && pattern[0] === "" && pattern[1] === "" && pattern[2] === "?" && typeof pattern[3] === "string" && /^[a-z]:$/i.test(pattern[3]);
      const fdi = fileUNC ? 3 : fileDrive ? 0 : void 0;
      const pdi = patternUNC ? 3 : patternDrive ? 0 : void 0;
      if (typeof fdi === "number" && typeof pdi === "number") {
        const [fd, pd] = [file[fdi], pattern[pdi]];
        if (fd.toLowerCase() === pd.toLowerCase()) {
          pattern[pdi] = fd;
          if (pdi > fdi) {
            pattern = pattern.slice(pdi);
          } else if (fdi > pdi) {
            file = file.slice(fdi);
          }
        }
      }
    }
    const { optimizationLevel = 1 } = this.options;
    if (optimizationLevel >= 2) {
      file = this.levelTwoFileOptimize(file);
    }
    this.debug("matchOne", this, { file, pattern });
    this.debug("matchOne", file.length, pattern.length);
    for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
      this.debug("matchOne loop");
      var p = pattern[pi];
      var f = file[fi];
      this.debug(pattern, p, f);
      if (p === false) {
        return false;
      }
      if (p === GLOBSTAR) {
        this.debug("GLOBSTAR", [pattern, p, f]);
        var fr = fi;
        var pr = pi + 1;
        if (pr === pl) {
          this.debug("** at the end");
          for (; fi < fl; fi++) {
            if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
              return false;
          }
          return true;
        }
        while (fr < fl) {
          var swallowee = file[fr];
          this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug("globstar found match!", fr, fl, swallowee);
            return true;
          } else {
            if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
              this.debug("dot detected!", file, fr, pattern, pr);
              break;
            }
            this.debug("globstar swallow a segment, and continue");
            fr++;
          }
        }
        if (partial) {
          this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
          if (fr === fl) {
            return true;
          }
        }
        return false;
      }
      let hit;
      if (typeof p === "string") {
        hit = f === p;
        this.debug("string match", p, f, hit);
      } else {
        hit = p.test(f);
        this.debug("pattern match", p, f, hit);
      }
      if (!hit)
        return false;
    }
    if (fi === fl && pi === pl) {
      return true;
    } else if (fi === fl) {
      return partial;
    } else if (pi === pl) {
      return fi === fl - 1 && file[fi] === "";
    } else {
      throw new Error("wtf?");
    }
  }
  braceExpand() {
    return braceExpand(this.pattern, this.options);
  }
  parse(pattern) {
    assertValidPattern(pattern);
    const options = this.options;
    if (pattern === "**")
      return GLOBSTAR;
    if (pattern === "")
      return "";
    let m;
    let fastTest = null;
    if (m = pattern.match(starRE)) {
      fastTest = options.dot ? starTestDot : starTest;
    } else if (m = pattern.match(starDotExtRE)) {
      fastTest = (options.nocase ? options.dot ? starDotExtTestNocaseDot : starDotExtTestNocase : options.dot ? starDotExtTestDot : starDotExtTest)(m[1]);
    } else if (m = pattern.match(qmarksRE)) {
      fastTest = (options.nocase ? options.dot ? qmarksTestNocaseDot : qmarksTestNocase : options.dot ? qmarksTestDot : qmarksTest)(m);
    } else if (m = pattern.match(starDotStarRE)) {
      fastTest = options.dot ? starDotStarTestDot : starDotStarTest;
    } else if (m = pattern.match(dotStarRE)) {
      fastTest = dotStarTest;
    }
    const re = AST.fromGlob(pattern, this.options).toMMPattern();
    return fastTest ? Object.assign(re, { test: fastTest }) : re;
  }
  makeRe() {
    if (this.regexp || this.regexp === false)
      return this.regexp;
    const set = this.set;
    if (!set.length) {
      this.regexp = false;
      return this.regexp;
    }
    const options = this.options;
    const twoStar = options.noglobstar ? star2 : options.dot ? twoStarDot : twoStarNoDot;
    const flags = new Set(options.nocase ? ["i"] : []);
    let re = set.map((pattern) => {
      const pp = pattern.map((p) => {
        if (p instanceof RegExp) {
          for (const f of p.flags.split(""))
            flags.add(f);
        }
        return typeof p === "string" ? regExpEscape2(p) : p === GLOBSTAR ? GLOBSTAR : p._src;
      });
      pp.forEach((p, i) => {
        const next = pp[i + 1];
        const prev = pp[i - 1];
        if (p !== GLOBSTAR || prev === GLOBSTAR) {
          return;
        }
        if (prev === void 0) {
          if (next !== void 0 && next !== GLOBSTAR) {
            pp[i + 1] = "(?:\\/|" + twoStar + "\\/)?" + next;
          } else {
            pp[i] = twoStar;
          }
        } else if (next === void 0) {
          pp[i - 1] = prev + "(?:\\/|" + twoStar + ")?";
        } else if (next !== GLOBSTAR) {
          pp[i - 1] = prev + "(?:\\/|\\/" + twoStar + "\\/)" + next;
          pp[i + 1] = GLOBSTAR;
        }
      });
      return pp.filter((p) => p !== GLOBSTAR).join("/");
    }).join("|");
    const [open, close] = set.length > 1 ? ["(?:", ")"] : ["", ""];
    re = "^" + open + re + close + "$";
    if (this.negate)
      re = "^(?!" + re + ").+$";
    try {
      this.regexp = new RegExp(re, [...flags].join(""));
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp;
  }
  slashSplit(p) {
    if (this.preserveMultipleSlashes) {
      return p.split("/");
    } else if (this.isWindows && /^\/\/[^\/]+/.test(p)) {
      return ["", ...p.split(/\/+/)];
    } else {
      return p.split(/\/+/);
    }
  }
  match(f, partial = this.partial) {
    this.debug("match", f, this.pattern);
    if (this.comment) {
      return false;
    }
    if (this.empty) {
      return f === "";
    }
    if (f === "/" && partial) {
      return true;
    }
    const options = this.options;
    if (this.isWindows) {
      f = f.split("\\").join("/");
    }
    const ff = this.slashSplit(f);
    this.debug(this.pattern, "split", ff);
    const set = this.set;
    this.debug(this.pattern, "set", set);
    let filename = ff[ff.length - 1];
    if (!filename) {
      for (let i = ff.length - 2; !filename && i >= 0; i--) {
        filename = ff[i];
      }
    }
    for (let i = 0; i < set.length; i++) {
      const pattern = set[i];
      let file = ff;
      if (options.matchBase && pattern.length === 1) {
        file = [filename];
      }
      const hit = this.matchOne(file, pattern, partial);
      if (hit) {
        if (options.flipNegate) {
          return true;
        }
        return !this.negate;
      }
    }
    if (options.flipNegate) {
      return false;
    }
    return this.negate;
  }
  static defaults(def) {
    return minimatch.defaults(def).Minimatch;
  }
};
minimatch.AST = AST;
minimatch.Minimatch = Minimatch;
minimatch.escape = escape;
minimatch.unescape = unescape2;

// node_modules/path-scurry/node_modules/lru-cache/dist/mjs/index.js
var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
var warned = /* @__PURE__ */ new Set();
var PROCESS = typeof process === "object" && !!process ? process : {};
var emitWarning = (msg, type, code, fn) => {
  typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
};
var AC = globalThis.AbortController;
var AS = globalThis.AbortSignal;
var _a;
if (typeof AC === "undefined") {
  AS = class AbortSignal {
    onabort;
    _onabort = [];
    reason;
    aborted = false;
    addEventListener(_, fn) {
      this._onabort.push(fn);
    }
  };
  AC = class AbortController {
    constructor() {
      warnACPolyfill();
    }
    signal = new AS();
    abort(reason) {
      var _a2, _b;
      if (this.signal.aborted)
        return;
      this.signal.reason = reason;
      this.signal.aborted = true;
      for (const fn of this.signal._onabort) {
        fn(reason);
      }
      (_b = (_a2 = this.signal).onabort) == null ? void 0 : _b.call(_a2, reason);
    }
  };
  let printACPolyfillWarning = ((_a = PROCESS.env) == null ? void 0 : _a.LRU_CACHE_IGNORE_AC_WARNING) !== "1";
  const warnACPolyfill = () => {
    if (!printACPolyfillWarning)
      return;
    printACPolyfillWarning = false;
    emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
  };
}
var shouldWarn = (code) => !warned.has(code);
var TYPE = Symbol("type");
var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
var ZeroArray = class extends Array {
  constructor(size) {
    super(size);
    this.fill(0);
  }
};
var Stack = class _Stack {
  heap;
  length;
  // private constructor
  static #constructing = false;
  static create(max) {
    const HeapCls = getUintArray(max);
    if (!HeapCls)
      return [];
    _Stack.#constructing = true;
    const s = new _Stack(max, HeapCls);
    _Stack.#constructing = false;
    return s;
  }
  constructor(max, HeapCls) {
    if (!_Stack.#constructing) {
      throw new TypeError("instantiate Stack using Stack.create(n)");
    }
    this.heap = new HeapCls(max);
    this.length = 0;
  }
  push(n) {
    this.heap[this.length++] = n;
  }
  pop() {
    return this.heap[--this.length];
  }
};
var _max, _maxSize, _dispose, _disposeAfter, _fetchMethod, _size, _calculatedSize, _keyMap, _keyList, _valList, _next, _prev, _head, _tail, _free, _disposed, _sizes, _starts, _ttls, _hasDispose, _hasFetchMethod, _hasDisposeAfter, _initializeTTLTracking, initializeTTLTracking_fn, _updateItemAge, _statusTTL, _setItemTTL, _isStale, _initializeSizeTracking, initializeSizeTracking_fn, _removeItemSize, _addItemSize, _requireSize, _indexes, indexes_fn, _rindexes, rindexes_fn, _isValidIndex, isValidIndex_fn, _evict, evict_fn, _backgroundFetch, backgroundFetch_fn, _isBackgroundFetch, isBackgroundFetch_fn, _connect, connect_fn, _moveToTail, moveToTail_fn;
var _LRUCache = class _LRUCache {
  constructor(options) {
    __privateAdd(this, _initializeTTLTracking);
    __privateAdd(this, _initializeSizeTracking);
    __privateAdd(this, _indexes);
    __privateAdd(this, _rindexes);
    __privateAdd(this, _isValidIndex);
    __privateAdd(this, _evict);
    __privateAdd(this, _backgroundFetch);
    __privateAdd(this, _isBackgroundFetch);
    __privateAdd(this, _connect);
    __privateAdd(this, _moveToTail);
    // properties coming in from the options of these, only max and maxSize
    // really *need* to be protected. The rest can be modified, as they just
    // set defaults for various methods.
    __privateAdd(this, _max, void 0);
    __privateAdd(this, _maxSize, void 0);
    __privateAdd(this, _dispose, void 0);
    __privateAdd(this, _disposeAfter, void 0);
    __privateAdd(this, _fetchMethod, void 0);
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    __publicField(this, "ttl");
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    __publicField(this, "ttlResolution");
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    __publicField(this, "ttlAutopurge");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    __publicField(this, "updateAgeOnGet");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    __publicField(this, "updateAgeOnHas");
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    __publicField(this, "allowStale");
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    __publicField(this, "noDisposeOnSet");
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    __publicField(this, "noUpdateTTL");
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    __publicField(this, "maxEntrySize");
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    __publicField(this, "sizeCalculation");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    __publicField(this, "noDeleteOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    __publicField(this, "noDeleteOnStaleGet");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    __publicField(this, "allowStaleOnFetchAbort");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    __publicField(this, "allowStaleOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    __publicField(this, "ignoreFetchAbort");
    // computed properties
    __privateAdd(this, _size, void 0);
    __privateAdd(this, _calculatedSize, void 0);
    __privateAdd(this, _keyMap, void 0);
    __privateAdd(this, _keyList, void 0);
    __privateAdd(this, _valList, void 0);
    __privateAdd(this, _next, void 0);
    __privateAdd(this, _prev, void 0);
    __privateAdd(this, _head, void 0);
    __privateAdd(this, _tail, void 0);
    __privateAdd(this, _free, void 0);
    __privateAdd(this, _disposed, void 0);
    __privateAdd(this, _sizes, void 0);
    __privateAdd(this, _starts, void 0);
    __privateAdd(this, _ttls, void 0);
    __privateAdd(this, _hasDispose, void 0);
    __privateAdd(this, _hasFetchMethod, void 0);
    __privateAdd(this, _hasDisposeAfter, void 0);
    // conditionally set private methods related to TTL
    __privateAdd(this, _updateItemAge, () => {
    });
    __privateAdd(this, _statusTTL, () => {
    });
    __privateAdd(this, _setItemTTL, () => {
    });
    /* c8 ignore stop */
    __privateAdd(this, _isStale, () => false);
    __privateAdd(this, _removeItemSize, (_i) => {
    });
    __privateAdd(this, _addItemSize, (_i, _s, _st) => {
    });
    __privateAdd(this, _requireSize, (_k, _v, size, sizeCalculation) => {
      if (size || sizeCalculation) {
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      }
      return 0;
    });
    const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
    if (max !== 0 && !isPosInt(max)) {
      throw new TypeError("max option must be a nonnegative integer");
    }
    const UintArray = max ? getUintArray(max) : Array;
    if (!UintArray) {
      throw new Error("invalid max value: " + max);
    }
    __privateSet(this, _max, max);
    __privateSet(this, _maxSize, maxSize);
    this.maxEntrySize = maxEntrySize || __privateGet(this, _maxSize);
    this.sizeCalculation = sizeCalculation;
    if (this.sizeCalculation) {
      if (!__privateGet(this, _maxSize) && !this.maxEntrySize) {
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      }
      if (typeof this.sizeCalculation !== "function") {
        throw new TypeError("sizeCalculation set to non-function");
      }
    }
    if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
      throw new TypeError("fetchMethod must be a function if specified");
    }
    __privateSet(this, _fetchMethod, fetchMethod);
    __privateSet(this, _hasFetchMethod, !!fetchMethod);
    __privateSet(this, _keyMap, /* @__PURE__ */ new Map());
    __privateSet(this, _keyList, new Array(max).fill(void 0));
    __privateSet(this, _valList, new Array(max).fill(void 0));
    __privateSet(this, _next, new UintArray(max));
    __privateSet(this, _prev, new UintArray(max));
    __privateSet(this, _head, 0);
    __privateSet(this, _tail, 0);
    __privateSet(this, _free, Stack.create(max));
    __privateSet(this, _size, 0);
    __privateSet(this, _calculatedSize, 0);
    if (typeof dispose === "function") {
      __privateSet(this, _dispose, dispose);
    }
    if (typeof disposeAfter === "function") {
      __privateSet(this, _disposeAfter, disposeAfter);
      __privateSet(this, _disposed, []);
    } else {
      __privateSet(this, _disposeAfter, void 0);
      __privateSet(this, _disposed, void 0);
    }
    __privateSet(this, _hasDispose, !!__privateGet(this, _dispose));
    __privateSet(this, _hasDisposeAfter, !!__privateGet(this, _disposeAfter));
    this.noDisposeOnSet = !!noDisposeOnSet;
    this.noUpdateTTL = !!noUpdateTTL;
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
    this.ignoreFetchAbort = !!ignoreFetchAbort;
    if (this.maxEntrySize !== 0) {
      if (__privateGet(this, _maxSize) !== 0) {
        if (!isPosInt(__privateGet(this, _maxSize))) {
          throw new TypeError("maxSize must be a positive integer if specified");
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      }
      __privateMethod(this, _initializeSizeTracking, initializeSizeTracking_fn).call(this);
    }
    this.allowStale = !!allowStale;
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
    this.updateAgeOnGet = !!updateAgeOnGet;
    this.updateAgeOnHas = !!updateAgeOnHas;
    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
    this.ttlAutopurge = !!ttlAutopurge;
    this.ttl = ttl || 0;
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError("ttl must be a positive integer if specified");
      }
      __privateMethod(this, _initializeTTLTracking, initializeTTLTracking_fn).call(this);
    }
    if (__privateGet(this, _max) === 0 && this.ttl === 0 && __privateGet(this, _maxSize) === 0) {
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    }
    if (!this.ttlAutopurge && !__privateGet(this, _max) && !__privateGet(this, _maxSize)) {
      const code = "LRU_CACHE_UNBOUNDED";
      if (shouldWarn(code)) {
        warned.add(code);
        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
        emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
      }
    }
  }
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(c) {
    return {
      // properties
      starts: __privateGet(c, _starts),
      ttls: __privateGet(c, _ttls),
      sizes: __privateGet(c, _sizes),
      keyMap: __privateGet(c, _keyMap),
      keyList: __privateGet(c, _keyList),
      valList: __privateGet(c, _valList),
      next: __privateGet(c, _next),
      prev: __privateGet(c, _prev),
      get head() {
        return __privateGet(c, _head);
      },
      get tail() {
        return __privateGet(c, _tail);
      },
      free: __privateGet(c, _free),
      // methods
      isBackgroundFetch: (p) => {
        var _a2;
        return __privateMethod(_a2 = c, _isBackgroundFetch, isBackgroundFetch_fn).call(_a2, p);
      },
      backgroundFetch: (k, index, options, context) => {
        var _a2;
        return __privateMethod(_a2 = c, _backgroundFetch, backgroundFetch_fn).call(_a2, k, index, options, context);
      },
      moveToTail: (index) => {
        var _a2;
        return __privateMethod(_a2 = c, _moveToTail, moveToTail_fn).call(_a2, index);
      },
      indexes: (options) => {
        var _a2;
        return __privateMethod(_a2 = c, _indexes, indexes_fn).call(_a2, options);
      },
      rindexes: (options) => {
        var _a2;
        return __privateMethod(_a2 = c, _rindexes, rindexes_fn).call(_a2, options);
      },
      isStale: (index) => {
        var _a2;
        return __privateGet(_a2 = c, _isStale).call(_a2, index);
      }
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return __privateGet(this, _max);
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return __privateGet(this, _maxSize);
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return __privateGet(this, _calculatedSize);
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return __privateGet(this, _size);
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return __privateGet(this, _fetchMethod);
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return __privateGet(this, _dispose);
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return __privateGet(this, _disposeAfter);
  }
  /**
   * Return the remaining TTL time for a given entry key
   */
  getRemainingTTL(key) {
    return __privateGet(this, _keyMap).has(key) ? Infinity : 0;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const i of __privateMethod(this, _indexes, indexes_fn).call(this)) {
      if (__privateGet(this, _valList)[i] !== void 0 && __privateGet(this, _keyList)[i] !== void 0 && !__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
        yield [__privateGet(this, _keyList)[i], __privateGet(this, _valList)[i]];
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const i of __privateMethod(this, _rindexes, rindexes_fn).call(this)) {
      if (__privateGet(this, _valList)[i] !== void 0 && __privateGet(this, _keyList)[i] !== void 0 && !__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
        yield [__privateGet(this, _keyList)[i], __privateGet(this, _valList)[i]];
      }
    }
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const i of __privateMethod(this, _indexes, indexes_fn).call(this)) {
      const k = __privateGet(this, _keyList)[i];
      if (k !== void 0 && !__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
        yield k;
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const i of __privateMethod(this, _rindexes, rindexes_fn).call(this)) {
      const k = __privateGet(this, _keyList)[i];
      if (k !== void 0 && !__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
        yield k;
      }
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const i of __privateMethod(this, _indexes, indexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i];
      if (v !== void 0 && !__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
        yield __privateGet(this, _valList)[i];
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const i of __privateMethod(this, _rindexes, rindexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i];
      if (v !== void 0 && !__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
        yield __privateGet(this, _valList)[i];
      }
    }
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [Symbol.iterator]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to Array.find().  fn is called as fn(value, key, cache).
   */
  find(fn, getOptions = {}) {
    for (const i of __privateMethod(this, _indexes, indexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i];
      const value = __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      if (fn(value, __privateGet(this, _keyList)[i], this)) {
        return this.get(__privateGet(this, _keyList)[i], getOptions);
      }
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from
   * most recently used to least recently used.  fn is called as
   * fn(value, key, cache).  Does not update age or recenty of use.
   * Does not iterate over stale values.
   */
  forEach(fn, thisp = this) {
    for (const i of __privateMethod(this, _indexes, indexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i];
      const value = __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, __privateGet(this, _keyList)[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(fn, thisp = this) {
    for (const i of __privateMethod(this, _rindexes, rindexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i];
      const value = __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, __privateGet(this, _keyList)[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let deleted = false;
    for (const i of __privateMethod(this, _rindexes, rindexes_fn).call(this, { allowStale: true })) {
      if (__privateGet(this, _isStale).call(this, i)) {
        this.delete(__privateGet(this, _keyList)[i]);
        deleted = true;
      }
    }
    return deleted;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to cache.load()
   */
  dump() {
    const arr = [];
    for (const i of __privateMethod(this, _indexes, indexes_fn).call(this, { allowStale: true })) {
      const key = __privateGet(this, _keyList)[i];
      const v = __privateGet(this, _valList)[i];
      const value = __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      if (value === void 0 || key === void 0)
        continue;
      const entry = { value };
      if (__privateGet(this, _ttls) && __privateGet(this, _starts)) {
        entry.ttl = __privateGet(this, _ttls)[i];
        const age = perf.now() - __privateGet(this, _starts)[i];
        entry.start = Math.floor(Date.now() - age);
      }
      if (__privateGet(this, _sizes)) {
        entry.size = __privateGet(this, _sizes)[i];
      }
      arr.unshift([key, entry]);
    }
    return arr;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   * Note that the shape of the resulting cache may be different if the
   * same options are not used in both caches.
   */
  load(arr) {
    this.clear();
    for (const [key, entry] of arr) {
      if (entry.start) {
        const age = Date.now() - entry.start;
        entry.start = perf.now() - age;
      }
      this.set(key, entry.value, entry);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   */
  set(k, v, setOptions = {}) {
    var _a2, _b, _c, _d, _e;
    if (v === void 0) {
      this.delete(k);
      return this;
    }
    const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
    let { noUpdateTTL = this.noUpdateTTL } = setOptions;
    const size = __privateGet(this, _requireSize).call(this, k, v, setOptions.size || 0, sizeCalculation);
    if (this.maxEntrySize && size > this.maxEntrySize) {
      if (status) {
        status.set = "miss";
        status.maxEntrySizeExceeded = true;
      }
      this.delete(k);
      return this;
    }
    let index = __privateGet(this, _size) === 0 ? void 0 : __privateGet(this, _keyMap).get(k);
    if (index === void 0) {
      index = __privateGet(this, _size) === 0 ? __privateGet(this, _tail) : __privateGet(this, _free).length !== 0 ? __privateGet(this, _free).pop() : __privateGet(this, _size) === __privateGet(this, _max) ? __privateMethod(this, _evict, evict_fn).call(this, false) : __privateGet(this, _size);
      __privateGet(this, _keyList)[index] = k;
      __privateGet(this, _valList)[index] = v;
      __privateGet(this, _keyMap).set(k, index);
      __privateGet(this, _next)[__privateGet(this, _tail)] = index;
      __privateGet(this, _prev)[index] = __privateGet(this, _tail);
      __privateSet(this, _tail, index);
      __privateWrapper(this, _size)._++;
      __privateGet(this, _addItemSize).call(this, index, size, status);
      if (status)
        status.set = "add";
      noUpdateTTL = false;
    } else {
      __privateMethod(this, _moveToTail, moveToTail_fn).call(this, index);
      const oldVal = __privateGet(this, _valList)[index];
      if (v !== oldVal) {
        if (__privateGet(this, _hasFetchMethod) && __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, oldVal)) {
          oldVal.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: s } = oldVal;
          if (s !== void 0 && !noDisposeOnSet) {
            if (__privateGet(this, _hasDispose)) {
              (_a2 = __privateGet(this, _dispose)) == null ? void 0 : _a2.call(this, s, k, "set");
            }
            if (__privateGet(this, _hasDisposeAfter)) {
              (_b = __privateGet(this, _disposed)) == null ? void 0 : _b.push([s, k, "set"]);
            }
          }
        } else if (!noDisposeOnSet) {
          if (__privateGet(this, _hasDispose)) {
            (_c = __privateGet(this, _dispose)) == null ? void 0 : _c.call(this, oldVal, k, "set");
          }
          if (__privateGet(this, _hasDisposeAfter)) {
            (_d = __privateGet(this, _disposed)) == null ? void 0 : _d.push([oldVal, k, "set"]);
          }
        }
        __privateGet(this, _removeItemSize).call(this, index);
        __privateGet(this, _addItemSize).call(this, index, size, status);
        __privateGet(this, _valList)[index] = v;
        if (status) {
          status.set = "replace";
          const oldValue = oldVal && __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, oldVal) ? oldVal.__staleWhileFetching : oldVal;
          if (oldValue !== void 0)
            status.oldValue = oldValue;
        }
      } else if (status) {
        status.set = "update";
      }
    }
    if (ttl !== 0 && !__privateGet(this, _ttls)) {
      __privateMethod(this, _initializeTTLTracking, initializeTTLTracking_fn).call(this);
    }
    if (__privateGet(this, _ttls)) {
      if (!noUpdateTTL) {
        __privateGet(this, _setItemTTL).call(this, index, ttl, start);
      }
      if (status)
        __privateGet(this, _statusTTL).call(this, status, index);
    }
    if (!noDisposeOnSet && __privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
      const dt = __privateGet(this, _disposed);
      let task;
      while (task = dt == null ? void 0 : dt.shift()) {
        (_e = __privateGet(this, _disposeAfter)) == null ? void 0 : _e.call(this, ...task);
      }
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    var _a2;
    try {
      while (__privateGet(this, _size)) {
        const val = __privateGet(this, _valList)[__privateGet(this, _head)];
        __privateMethod(this, _evict, evict_fn).call(this, true);
        if (__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, val)) {
          if (val.__staleWhileFetching) {
            return val.__staleWhileFetching;
          }
        } else if (val !== void 0) {
          return val;
        }
      }
    } finally {
      if (__privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
        const dt = __privateGet(this, _disposed);
        let task;
        while (task = dt == null ? void 0 : dt.shift()) {
          (_a2 = __privateGet(this, _disposeAfter)) == null ? void 0 : _a2.call(this, ...task);
        }
      }
    }
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(k, hasOptions = {}) {
    const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
    const index = __privateGet(this, _keyMap).get(k);
    if (index !== void 0) {
      const v = __privateGet(this, _valList)[index];
      if (__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v) && v.__staleWhileFetching === void 0) {
        return false;
      }
      if (!__privateGet(this, _isStale).call(this, index)) {
        if (updateAgeOnHas) {
          __privateGet(this, _updateItemAge).call(this, index);
        }
        if (status) {
          status.has = "hit";
          __privateGet(this, _statusTTL).call(this, status, index);
        }
        return true;
      } else if (status) {
        status.has = "stale";
        __privateGet(this, _statusTTL).call(this, status, index);
      }
    } else if (status) {
      status.has = "miss";
    }
    return false;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(k, peekOptions = {}) {
    const { allowStale = this.allowStale } = peekOptions;
    const index = __privateGet(this, _keyMap).get(k);
    if (index !== void 0 && (allowStale || !__privateGet(this, _isStale).call(this, index))) {
      const v = __privateGet(this, _valList)[index];
      return __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
    }
  }
  async fetch(k, fetchOptions = {}) {
    const {
      // get options
      allowStale = this.allowStale,
      updateAgeOnGet = this.updateAgeOnGet,
      noDeleteOnStaleGet = this.noDeleteOnStaleGet,
      // set options
      ttl = this.ttl,
      noDisposeOnSet = this.noDisposeOnSet,
      size = 0,
      sizeCalculation = this.sizeCalculation,
      noUpdateTTL = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
      ignoreFetchAbort = this.ignoreFetchAbort,
      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
      context,
      forceRefresh = false,
      status,
      signal
    } = fetchOptions;
    if (!__privateGet(this, _hasFetchMethod)) {
      if (status)
        status.fetch = "get";
      return this.get(k, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        status
      });
    }
    const options = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort,
      status,
      signal
    };
    let index = __privateGet(this, _keyMap).get(k);
    if (index === void 0) {
      if (status)
        status.fetch = "miss";
      const p = __privateMethod(this, _backgroundFetch, backgroundFetch_fn).call(this, k, index, options, context);
      return p.__returned = p;
    } else {
      const v = __privateGet(this, _valList)[index];
      if (__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v)) {
        const stale = allowStale && v.__staleWhileFetching !== void 0;
        if (status) {
          status.fetch = "inflight";
          if (stale)
            status.returnedStale = true;
        }
        return stale ? v.__staleWhileFetching : v.__returned = v;
      }
      const isStale = __privateGet(this, _isStale).call(this, index);
      if (!forceRefresh && !isStale) {
        if (status)
          status.fetch = "hit";
        __privateMethod(this, _moveToTail, moveToTail_fn).call(this, index);
        if (updateAgeOnGet) {
          __privateGet(this, _updateItemAge).call(this, index);
        }
        if (status)
          __privateGet(this, _statusTTL).call(this, status, index);
        return v;
      }
      const p = __privateMethod(this, _backgroundFetch, backgroundFetch_fn).call(this, k, index, options, context);
      const hasStale = p.__staleWhileFetching !== void 0;
      const staleVal = hasStale && allowStale;
      if (status) {
        status.fetch = isStale ? "stale" : "refresh";
        if (staleVal && isStale)
          status.returnedStale = true;
      }
      return staleVal ? p.__staleWhileFetching : p.__returned = p;
    }
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(k, getOptions = {}) {
    const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
    const index = __privateGet(this, _keyMap).get(k);
    if (index !== void 0) {
      const value = __privateGet(this, _valList)[index];
      const fetching = __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, value);
      if (status)
        __privateGet(this, _statusTTL).call(this, status, index);
      if (__privateGet(this, _isStale).call(this, index)) {
        if (status)
          status.get = "stale";
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            this.delete(k);
          }
          if (status && allowStale)
            status.returnedStale = true;
          return allowStale ? value : void 0;
        } else {
          if (status && allowStale && value.__staleWhileFetching !== void 0) {
            status.returnedStale = true;
          }
          return allowStale ? value.__staleWhileFetching : void 0;
        }
      } else {
        if (status)
          status.get = "hit";
        if (fetching) {
          return value.__staleWhileFetching;
        }
        __privateMethod(this, _moveToTail, moveToTail_fn).call(this, index);
        if (updateAgeOnGet) {
          __privateGet(this, _updateItemAge).call(this, index);
        }
        return value;
      }
    } else if (status) {
      status.get = "miss";
    }
  }
  /**
   * Deletes a key out of the cache.
   * Returns true if the key was deleted, false otherwise.
   */
  delete(k) {
    var _a2, _b, _c, _d;
    let deleted = false;
    if (__privateGet(this, _size) !== 0) {
      const index = __privateGet(this, _keyMap).get(k);
      if (index !== void 0) {
        deleted = true;
        if (__privateGet(this, _size) === 1) {
          this.clear();
        } else {
          __privateGet(this, _removeItemSize).call(this, index);
          const v = __privateGet(this, _valList)[index];
          if (__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v)) {
            v.__abortController.abort(new Error("deleted"));
          } else if (__privateGet(this, _hasDispose) || __privateGet(this, _hasDisposeAfter)) {
            if (__privateGet(this, _hasDispose)) {
              (_a2 = __privateGet(this, _dispose)) == null ? void 0 : _a2.call(this, v, k, "delete");
            }
            if (__privateGet(this, _hasDisposeAfter)) {
              (_b = __privateGet(this, _disposed)) == null ? void 0 : _b.push([v, k, "delete"]);
            }
          }
          __privateGet(this, _keyMap).delete(k);
          __privateGet(this, _keyList)[index] = void 0;
          __privateGet(this, _valList)[index] = void 0;
          if (index === __privateGet(this, _tail)) {
            __privateSet(this, _tail, __privateGet(this, _prev)[index]);
          } else if (index === __privateGet(this, _head)) {
            __privateSet(this, _head, __privateGet(this, _next)[index]);
          } else {
            __privateGet(this, _next)[__privateGet(this, _prev)[index]] = __privateGet(this, _next)[index];
            __privateGet(this, _prev)[__privateGet(this, _next)[index]] = __privateGet(this, _prev)[index];
          }
          __privateWrapper(this, _size)._--;
          __privateGet(this, _free).push(index);
        }
      }
    }
    if (__privateGet(this, _hasDisposeAfter) && ((_c = __privateGet(this, _disposed)) == null ? void 0 : _c.length)) {
      const dt = __privateGet(this, _disposed);
      let task;
      while (task = dt == null ? void 0 : dt.shift()) {
        (_d = __privateGet(this, _disposeAfter)) == null ? void 0 : _d.call(this, ...task);
      }
    }
    return deleted;
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    var _a2, _b, _c;
    for (const index of __privateMethod(this, _rindexes, rindexes_fn).call(this, { allowStale: true })) {
      const v = __privateGet(this, _valList)[index];
      if (__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v)) {
        v.__abortController.abort(new Error("deleted"));
      } else {
        const k = __privateGet(this, _keyList)[index];
        if (__privateGet(this, _hasDispose)) {
          (_a2 = __privateGet(this, _dispose)) == null ? void 0 : _a2.call(this, v, k, "delete");
        }
        if (__privateGet(this, _hasDisposeAfter)) {
          (_b = __privateGet(this, _disposed)) == null ? void 0 : _b.push([v, k, "delete"]);
        }
      }
    }
    __privateGet(this, _keyMap).clear();
    __privateGet(this, _valList).fill(void 0);
    __privateGet(this, _keyList).fill(void 0);
    if (__privateGet(this, _ttls) && __privateGet(this, _starts)) {
      __privateGet(this, _ttls).fill(0);
      __privateGet(this, _starts).fill(0);
    }
    if (__privateGet(this, _sizes)) {
      __privateGet(this, _sizes).fill(0);
    }
    __privateSet(this, _head, 0);
    __privateSet(this, _tail, 0);
    __privateGet(this, _free).length = 0;
    __privateSet(this, _calculatedSize, 0);
    __privateSet(this, _size, 0);
    if (__privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
      const dt = __privateGet(this, _disposed);
      let task;
      while (task = dt == null ? void 0 : dt.shift()) {
        (_c = __privateGet(this, _disposeAfter)) == null ? void 0 : _c.call(this, ...task);
      }
    }
  }
};
_max = new WeakMap();
_maxSize = new WeakMap();
_dispose = new WeakMap();
_disposeAfter = new WeakMap();
_fetchMethod = new WeakMap();
_size = new WeakMap();
_calculatedSize = new WeakMap();
_keyMap = new WeakMap();
_keyList = new WeakMap();
_valList = new WeakMap();
_next = new WeakMap();
_prev = new WeakMap();
_head = new WeakMap();
_tail = new WeakMap();
_free = new WeakMap();
_disposed = new WeakMap();
_sizes = new WeakMap();
_starts = new WeakMap();
_ttls = new WeakMap();
_hasDispose = new WeakMap();
_hasFetchMethod = new WeakMap();
_hasDisposeAfter = new WeakMap();
_initializeTTLTracking = new WeakSet();
initializeTTLTracking_fn = function() {
  const ttls = new ZeroArray(__privateGet(this, _max));
  const starts = new ZeroArray(__privateGet(this, _max));
  __privateSet(this, _ttls, ttls);
  __privateSet(this, _starts, starts);
  __privateSet(this, _setItemTTL, (index, ttl, start = perf.now()) => {
    starts[index] = ttl !== 0 ? start : 0;
    ttls[index] = ttl;
    if (ttl !== 0 && this.ttlAutopurge) {
      const t = setTimeout(() => {
        if (__privateGet(this, _isStale).call(this, index)) {
          this.delete(__privateGet(this, _keyList)[index]);
        }
      }, ttl + 1);
      if (t.unref) {
        t.unref();
      }
    }
  });
  __privateSet(this, _updateItemAge, (index) => {
    starts[index] = ttls[index] !== 0 ? perf.now() : 0;
  });
  __privateSet(this, _statusTTL, (status, index) => {
    if (ttls[index]) {
      const ttl = ttls[index];
      const start = starts[index];
      status.ttl = ttl;
      status.start = start;
      status.now = cachedNow || getNow();
      const age = status.now - start;
      status.remainingTTL = ttl - age;
    }
  });
  let cachedNow = 0;
  const getNow = () => {
    const n = perf.now();
    if (this.ttlResolution > 0) {
      cachedNow = n;
      const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
      if (t.unref) {
        t.unref();
      }
    }
    return n;
  };
  this.getRemainingTTL = (key) => {
    const index = __privateGet(this, _keyMap).get(key);
    if (index === void 0) {
      return 0;
    }
    const ttl = ttls[index];
    const start = starts[index];
    if (ttl === 0 || start === 0) {
      return Infinity;
    }
    const age = (cachedNow || getNow()) - start;
    return ttl - age;
  };
  __privateSet(this, _isStale, (index) => {
    return ttls[index] !== 0 && starts[index] !== 0 && (cachedNow || getNow()) - starts[index] > ttls[index];
  });
};
_updateItemAge = new WeakMap();
_statusTTL = new WeakMap();
_setItemTTL = new WeakMap();
_isStale = new WeakMap();
_initializeSizeTracking = new WeakSet();
initializeSizeTracking_fn = function() {
  const sizes = new ZeroArray(__privateGet(this, _max));
  __privateSet(this, _calculatedSize, 0);
  __privateSet(this, _sizes, sizes);
  __privateSet(this, _removeItemSize, (index) => {
    __privateSet(this, _calculatedSize, __privateGet(this, _calculatedSize) - sizes[index]);
    sizes[index] = 0;
  });
  __privateSet(this, _requireSize, (k, v, size, sizeCalculation) => {
    if (__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v)) {
      return 0;
    }
    if (!isPosInt(size)) {
      if (sizeCalculation) {
        if (typeof sizeCalculation !== "function") {
          throw new TypeError("sizeCalculation must be a function");
        }
        size = sizeCalculation(v, k);
        if (!isPosInt(size)) {
          throw new TypeError("sizeCalculation return invalid (expect positive integer)");
        }
      } else {
        throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
      }
    }
    return size;
  });
  __privateSet(this, _addItemSize, (index, size, status) => {
    sizes[index] = size;
    if (__privateGet(this, _maxSize)) {
      const maxSize = __privateGet(this, _maxSize) - sizes[index];
      while (__privateGet(this, _calculatedSize) > maxSize) {
        __privateMethod(this, _evict, evict_fn).call(this, true);
      }
    }
    __privateSet(this, _calculatedSize, __privateGet(this, _calculatedSize) + sizes[index]);
    if (status) {
      status.entrySize = size;
      status.totalCalculatedSize = __privateGet(this, _calculatedSize);
    }
  });
};
_removeItemSize = new WeakMap();
_addItemSize = new WeakMap();
_requireSize = new WeakMap();
_indexes = new WeakSet();
indexes_fn = function* ({ allowStale = this.allowStale } = {}) {
  if (__privateGet(this, _size)) {
    for (let i = __privateGet(this, _tail); true; ) {
      if (!__privateMethod(this, _isValidIndex, isValidIndex_fn).call(this, i)) {
        break;
      }
      if (allowStale || !__privateGet(this, _isStale).call(this, i)) {
        yield i;
      }
      if (i === __privateGet(this, _head)) {
        break;
      } else {
        i = __privateGet(this, _prev)[i];
      }
    }
  }
};
_rindexes = new WeakSet();
rindexes_fn = function* ({ allowStale = this.allowStale } = {}) {
  if (__privateGet(this, _size)) {
    for (let i = __privateGet(this, _head); true; ) {
      if (!__privateMethod(this, _isValidIndex, isValidIndex_fn).call(this, i)) {
        break;
      }
      if (allowStale || !__privateGet(this, _isStale).call(this, i)) {
        yield i;
      }
      if (i === __privateGet(this, _tail)) {
        break;
      } else {
        i = __privateGet(this, _next)[i];
      }
    }
  }
};
_isValidIndex = new WeakSet();
isValidIndex_fn = function(index) {
  return index !== void 0 && __privateGet(this, _keyMap).get(__privateGet(this, _keyList)[index]) === index;
};
_evict = new WeakSet();
evict_fn = function(free) {
  var _a2, _b;
  const head = __privateGet(this, _head);
  const k = __privateGet(this, _keyList)[head];
  const v = __privateGet(this, _valList)[head];
  if (__privateGet(this, _hasFetchMethod) && __privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v)) {
    v.__abortController.abort(new Error("evicted"));
  } else if (__privateGet(this, _hasDispose) || __privateGet(this, _hasDisposeAfter)) {
    if (__privateGet(this, _hasDispose)) {
      (_a2 = __privateGet(this, _dispose)) == null ? void 0 : _a2.call(this, v, k, "evict");
    }
    if (__privateGet(this, _hasDisposeAfter)) {
      (_b = __privateGet(this, _disposed)) == null ? void 0 : _b.push([v, k, "evict"]);
    }
  }
  __privateGet(this, _removeItemSize).call(this, head);
  if (free) {
    __privateGet(this, _keyList)[head] = void 0;
    __privateGet(this, _valList)[head] = void 0;
    __privateGet(this, _free).push(head);
  }
  if (__privateGet(this, _size) === 1) {
    __privateSet(this, _head, __privateSet(this, _tail, 0));
    __privateGet(this, _free).length = 0;
  } else {
    __privateSet(this, _head, __privateGet(this, _next)[head]);
  }
  __privateGet(this, _keyMap).delete(k);
  __privateWrapper(this, _size)._--;
  return head;
};
_backgroundFetch = new WeakSet();
backgroundFetch_fn = function(k, index, options, context) {
  const v = index === void 0 ? void 0 : __privateGet(this, _valList)[index];
  if (__privateMethod(this, _isBackgroundFetch, isBackgroundFetch_fn).call(this, v)) {
    return v;
  }
  const ac = new AC();
  const { signal } = options;
  signal == null ? void 0 : signal.addEventListener("abort", () => ac.abort(signal.reason), {
    signal: ac.signal
  });
  const fetchOpts = {
    signal: ac.signal,
    options,
    context
  };
  const cb = (v2, updateCache = false) => {
    const { aborted } = ac.signal;
    const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
    if (options.status) {
      if (aborted && !updateCache) {
        options.status.fetchAborted = true;
        options.status.fetchError = ac.signal.reason;
        if (ignoreAbort)
          options.status.fetchAbortIgnored = true;
      } else {
        options.status.fetchResolved = true;
      }
    }
    if (aborted && !ignoreAbort && !updateCache) {
      return fetchFail(ac.signal.reason);
    }
    const bf2 = p;
    if (__privateGet(this, _valList)[index] === p) {
      if (v2 === void 0) {
        if (bf2.__staleWhileFetching) {
          __privateGet(this, _valList)[index] = bf2.__staleWhileFetching;
        } else {
          this.delete(k);
        }
      } else {
        if (options.status)
          options.status.fetchUpdated = true;
        this.set(k, v2, fetchOpts.options);
      }
    }
    return v2;
  };
  const eb = (er) => {
    if (options.status) {
      options.status.fetchRejected = true;
      options.status.fetchError = er;
    }
    return fetchFail(er);
  };
  const fetchFail = (er) => {
    const { aborted } = ac.signal;
    const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
    const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
    const noDelete = allowStale || options.noDeleteOnFetchRejection;
    const bf2 = p;
    if (__privateGet(this, _valList)[index] === p) {
      const del = !noDelete || bf2.__staleWhileFetching === void 0;
      if (del) {
        this.delete(k);
      } else if (!allowStaleAborted) {
        __privateGet(this, _valList)[index] = bf2.__staleWhileFetching;
      }
    }
    if (allowStale) {
      if (options.status && bf2.__staleWhileFetching !== void 0) {
        options.status.returnedStale = true;
      }
      return bf2.__staleWhileFetching;
    } else if (bf2.__returned === bf2) {
      throw er;
    }
  };
  const pcall = (res, rej) => {
    var _a2;
    const fmp = (_a2 = __privateGet(this, _fetchMethod)) == null ? void 0 : _a2.call(this, k, v, fetchOpts);
    if (fmp && fmp instanceof Promise) {
      fmp.then((v2) => res(v2 === void 0 ? void 0 : v2), rej);
    }
    ac.signal.addEventListener("abort", () => {
      if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
        res(void 0);
        if (options.allowStaleOnFetchAbort) {
          res = (v2) => cb(v2, true);
        }
      }
    });
  };
  if (options.status)
    options.status.fetchDispatched = true;
  const p = new Promise(pcall).then(cb, eb);
  const bf = Object.assign(p, {
    __abortController: ac,
    __staleWhileFetching: v,
    __returned: void 0
  });
  if (index === void 0) {
    this.set(k, bf, { ...fetchOpts.options, status: void 0 });
    index = __privateGet(this, _keyMap).get(k);
  } else {
    __privateGet(this, _valList)[index] = bf;
  }
  return bf;
};
_isBackgroundFetch = new WeakSet();
isBackgroundFetch_fn = function(p) {
  if (!__privateGet(this, _hasFetchMethod))
    return false;
  const b = p;
  return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
};
_connect = new WeakSet();
connect_fn = function(p, n) {
  __privateGet(this, _prev)[n] = p;
  __privateGet(this, _next)[p] = n;
};
_moveToTail = new WeakSet();
moveToTail_fn = function(index) {
  if (index !== __privateGet(this, _tail)) {
    if (index === __privateGet(this, _head)) {
      __privateSet(this, _head, __privateGet(this, _next)[index]);
    } else {
      __privateMethod(this, _connect, connect_fn).call(this, __privateGet(this, _prev)[index], __privateGet(this, _next)[index]);
    }
    __privateMethod(this, _connect, connect_fn).call(this, __privateGet(this, _tail), index);
    __privateSet(this, _tail, index);
  }
};
var LRUCache = _LRUCache;

// node_modules/path-scurry/dist/mjs/index.js
var import_path = require("path");
var import_url = require("url");
var actualFS = __toESM(require("fs"), 1);
var import_fs = require("fs");
var import_promises = require("fs/promises");

// node_modules/minipass/dist/esm/index.js
var import_events = require("events");
var import_stream = __toESM(require("stream"), 1);
var import_string_decoder = require("string_decoder");
var proc = typeof process === "object" && process ? process : {
  stdout: null,
  stderr: null
};
var isStream = (s) => !!s && typeof s === "object" && (s instanceof Minipass || s instanceof import_stream.default || isReadable(s) || isWritable(s));
var isReadable = (s) => !!s && typeof s === "object" && s instanceof import_events.EventEmitter && typeof s.pipe === "function" && // node core Writable streams have a pipe() method, but it throws
s.pipe !== import_stream.default.Writable.prototype.pipe;
var isWritable = (s) => !!s && typeof s === "object" && s instanceof import_events.EventEmitter && typeof s.write === "function" && typeof s.end === "function";
var EOF = Symbol("EOF");
var MAYBE_EMIT_END = Symbol("maybeEmitEnd");
var EMITTED_END = Symbol("emittedEnd");
var EMITTING_END = Symbol("emittingEnd");
var EMITTED_ERROR = Symbol("emittedError");
var CLOSED = Symbol("closed");
var READ = Symbol("read");
var FLUSH = Symbol("flush");
var FLUSHCHUNK = Symbol("flushChunk");
var ENCODING = Symbol("encoding");
var DECODER = Symbol("decoder");
var FLOWING = Symbol("flowing");
var PAUSED = Symbol("paused");
var RESUME = Symbol("resume");
var BUFFER = Symbol("buffer");
var PIPES = Symbol("pipes");
var BUFFERLENGTH = Symbol("bufferLength");
var BUFFERPUSH = Symbol("bufferPush");
var BUFFERSHIFT = Symbol("bufferShift");
var OBJECTMODE = Symbol("objectMode");
var DESTROYED = Symbol("destroyed");
var ERROR = Symbol("error");
var EMITDATA = Symbol("emitData");
var EMITEND = Symbol("emitEnd");
var EMITEND2 = Symbol("emitEnd2");
var ASYNC = Symbol("async");
var ABORT = Symbol("abort");
var ABORTED = Symbol("aborted");
var SIGNAL = Symbol("signal");
var DATALISTENERS = Symbol("dataListeners");
var DISCARDED = Symbol("discarded");
var defer = (fn) => Promise.resolve().then(fn);
var nodefer = (fn) => fn();
var isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
var isArrayBufferLike = (b) => b instanceof ArrayBuffer || !!b && typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
var isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
var Pipe = class {
  src;
  dest;
  opts;
  ondrain;
  constructor(src, dest, opts) {
    this.src = src;
    this.dest = dest;
    this.opts = opts;
    this.ondrain = () => src[RESUME]();
    this.dest.on("drain", this.ondrain);
  }
  unpipe() {
    this.dest.removeListener("drain", this.ondrain);
  }
  // only here for the prototype
  /* c8 ignore start */
  proxyErrors(_er) {
  }
  /* c8 ignore stop */
  end() {
    this.unpipe();
    if (this.opts.end)
      this.dest.end();
  }
};
var PipeProxyErrors = class extends Pipe {
  unpipe() {
    this.src.removeListener("error", this.proxyErrors);
    super.unpipe();
  }
  constructor(src, dest, opts) {
    super(src, dest, opts);
    this.proxyErrors = (er) => dest.emit("error", er);
    src.on("error", this.proxyErrors);
  }
};
var isObjectModeOptions = (o) => !!o.objectMode;
var isEncodingOptions = (o) => !o.objectMode && !!o.encoding && o.encoding !== "buffer";
var Minipass = class extends import_events.EventEmitter {
  [FLOWING] = false;
  [PAUSED] = false;
  [PIPES] = [];
  [BUFFER] = [];
  [OBJECTMODE];
  [ENCODING];
  [ASYNC];
  [DECODER];
  [EOF] = false;
  [EMITTED_END] = false;
  [EMITTING_END] = false;
  [CLOSED] = false;
  [EMITTED_ERROR] = null;
  [BUFFERLENGTH] = 0;
  [DESTROYED] = false;
  [SIGNAL];
  [ABORTED] = false;
  [DATALISTENERS] = 0;
  [DISCARDED] = false;
  /**
   * true if the stream can be written
   */
  writable = true;
  /**
   * true if the stream can be read
   */
  readable = true;
  /**
   * If `RType` is Buffer, then options do not need to be provided.
   * Otherwise, an options object must be provided to specify either
   * {@link Minipass.SharedOptions.objectMode} or
   * {@link Minipass.SharedOptions.encoding}, as appropriate.
   */
  constructor(...args) {
    const options = args[0] || {};
    super();
    if (options.objectMode && typeof options.encoding === "string") {
      throw new TypeError("Encoding and objectMode may not be used together");
    }
    if (isObjectModeOptions(options)) {
      this[OBJECTMODE] = true;
      this[ENCODING] = null;
    } else if (isEncodingOptions(options)) {
      this[ENCODING] = options.encoding;
      this[OBJECTMODE] = false;
    } else {
      this[OBJECTMODE] = false;
      this[ENCODING] = null;
    }
    this[ASYNC] = !!options.async;
    this[DECODER] = this[ENCODING] ? new import_string_decoder.StringDecoder(this[ENCODING]) : null;
    if (options && options.debugExposeBuffer === true) {
      Object.defineProperty(this, "buffer", { get: () => this[BUFFER] });
    }
    if (options && options.debugExposePipes === true) {
      Object.defineProperty(this, "pipes", { get: () => this[PIPES] });
    }
    const { signal } = options;
    if (signal) {
      this[SIGNAL] = signal;
      if (signal.aborted) {
        this[ABORT]();
      } else {
        signal.addEventListener("abort", () => this[ABORT]());
      }
    }
  }
  /**
   * The amount of data stored in the buffer waiting to be read.
   *
   * For Buffer strings, this will be the total byte length.
   * For string encoding streams, this will be the string character length,
   * according to JavaScript's `string.length` logic.
   * For objectMode streams, this is a count of the items waiting to be
   * emitted.
   */
  get bufferLength() {
    return this[BUFFERLENGTH];
  }
  /**
   * The `BufferEncoding` currently in use, or `null`
   */
  get encoding() {
    return this[ENCODING];
  }
  /**
   * @deprecated - This is a read only property
   */
  set encoding(_enc) {
    throw new Error("Encoding must be set at instantiation time");
  }
  /**
   * @deprecated - Encoding may only be set at instantiation time
   */
  setEncoding(_enc) {
    throw new Error("Encoding must be set at instantiation time");
  }
  /**
   * True if this is an objectMode stream
   */
  get objectMode() {
    return this[OBJECTMODE];
  }
  /**
   * @deprecated - This is a read-only property
   */
  set objectMode(_om) {
    throw new Error("objectMode must be set at instantiation time");
  }
  /**
   * true if this is an async stream
   */
  get ["async"]() {
    return this[ASYNC];
  }
  /**
   * Set to true to make this stream async.
   *
   * Once set, it cannot be unset, as this would potentially cause incorrect
   * behavior.  Ie, a sync stream can be made async, but an async stream
   * cannot be safely made sync.
   */
  set ["async"](a) {
    this[ASYNC] = this[ASYNC] || !!a;
  }
  // drop everything and get out of the flow completely
  [ABORT]() {
    var _a2, _b;
    this[ABORTED] = true;
    this.emit("abort", (_a2 = this[SIGNAL]) == null ? void 0 : _a2.reason);
    this.destroy((_b = this[SIGNAL]) == null ? void 0 : _b.reason);
  }
  /**
   * True if the stream has been aborted.
   */
  get aborted() {
    return this[ABORTED];
  }
  /**
   * No-op setter. Stream aborted status is set via the AbortSignal provided
   * in the constructor options.
   */
  set aborted(_) {
  }
  write(chunk, encoding, cb) {
    var _a2;
    if (this[ABORTED])
      return false;
    if (this[EOF])
      throw new Error("write after end");
    if (this[DESTROYED]) {
      this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), { code: "ERR_STREAM_DESTROYED" }));
      return true;
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = "utf8";
    }
    if (!encoding)
      encoding = "utf8";
    const fn = this[ASYNC] ? defer : nodefer;
    if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
      if (isArrayBufferView(chunk)) {
        chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
      } else if (isArrayBufferLike(chunk)) {
        chunk = Buffer.from(chunk);
      } else if (typeof chunk !== "string") {
        throw new Error("Non-contiguous data written to non-objectMode stream");
      }
    }
    if (this[OBJECTMODE]) {
      if (this[FLOWING] && this[BUFFERLENGTH] !== 0)
        this[FLUSH](true);
      if (this[FLOWING])
        this.emit("data", chunk);
      else
        this[BUFFERPUSH](chunk);
      if (this[BUFFERLENGTH] !== 0)
        this.emit("readable");
      if (cb)
        fn(cb);
      return this[FLOWING];
    }
    if (!chunk.length) {
      if (this[BUFFERLENGTH] !== 0)
        this.emit("readable");
      if (cb)
        fn(cb);
      return this[FLOWING];
    }
    if (typeof chunk === "string" && // unless it is a string already ready for us to use
    !(encoding === this[ENCODING] && !((_a2 = this[DECODER]) == null ? void 0 : _a2.lastNeed))) {
      chunk = Buffer.from(chunk, encoding);
    }
    if (Buffer.isBuffer(chunk) && this[ENCODING]) {
      chunk = this[DECODER].write(chunk);
    }
    if (this[FLOWING] && this[BUFFERLENGTH] !== 0)
      this[FLUSH](true);
    if (this[FLOWING])
      this.emit("data", chunk);
    else
      this[BUFFERPUSH](chunk);
    if (this[BUFFERLENGTH] !== 0)
      this.emit("readable");
    if (cb)
      fn(cb);
    return this[FLOWING];
  }
  /**
   * Low-level explicit read method.
   *
   * In objectMode, the argument is ignored, and one item is returned if
   * available.
   *
   * `n` is the number of bytes (or in the case of encoding streams,
   * characters) to consume. If `n` is not provided, then the entire buffer
   * is returned, or `null` is returned if no data is available.
   *
   * If `n` is greater that the amount of data in the internal buffer,
   * then `null` is returned.
   */
  read(n) {
    if (this[DESTROYED])
      return null;
    this[DISCARDED] = false;
    if (this[BUFFERLENGTH] === 0 || n === 0 || n && n > this[BUFFERLENGTH]) {
      this[MAYBE_EMIT_END]();
      return null;
    }
    if (this[OBJECTMODE])
      n = null;
    if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {
      this[BUFFER] = [
        this[ENCODING] ? this[BUFFER].join("") : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])
      ];
    }
    const ret = this[READ](n || null, this[BUFFER][0]);
    this[MAYBE_EMIT_END]();
    return ret;
  }
  [READ](n, chunk) {
    if (this[OBJECTMODE])
      this[BUFFERSHIFT]();
    else {
      const c = chunk;
      if (n === c.length || n === null)
        this[BUFFERSHIFT]();
      else if (typeof c === "string") {
        this[BUFFER][0] = c.slice(n);
        chunk = c.slice(0, n);
        this[BUFFERLENGTH] -= n;
      } else {
        this[BUFFER][0] = c.subarray(n);
        chunk = c.subarray(0, n);
        this[BUFFERLENGTH] -= n;
      }
    }
    this.emit("data", chunk);
    if (!this[BUFFER].length && !this[EOF])
      this.emit("drain");
    return chunk;
  }
  end(chunk, encoding, cb) {
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = void 0;
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = "utf8";
    }
    if (chunk !== void 0)
      this.write(chunk, encoding);
    if (cb)
      this.once("end", cb);
    this[EOF] = true;
    this.writable = false;
    if (this[FLOWING] || !this[PAUSED])
      this[MAYBE_EMIT_END]();
    return this;
  }
  // don't let the internal resume be overwritten
  [RESUME]() {
    if (this[DESTROYED])
      return;
    if (!this[DATALISTENERS] && !this[PIPES].length) {
      this[DISCARDED] = true;
    }
    this[PAUSED] = false;
    this[FLOWING] = true;
    this.emit("resume");
    if (this[BUFFER].length)
      this[FLUSH]();
    else if (this[EOF])
      this[MAYBE_EMIT_END]();
    else
      this.emit("drain");
  }
  /**
   * Resume the stream if it is currently in a paused state
   *
   * If called when there are no pipe destinations or `data` event listeners,
   * this will place the stream in a "discarded" state, where all data will
   * be thrown away. The discarded state is removed if a pipe destination or
   * data handler is added, if pause() is called, or if any synchronous or
   * asynchronous iteration is started.
   */
  resume() {
    return this[RESUME]();
  }
  /**
   * Pause the stream
   */
  pause() {
    this[FLOWING] = false;
    this[PAUSED] = true;
    this[DISCARDED] = false;
  }
  /**
   * true if the stream has been forcibly destroyed
   */
  get destroyed() {
    return this[DESTROYED];
  }
  /**
   * true if the stream is currently in a flowing state, meaning that
   * any writes will be immediately emitted.
   */
  get flowing() {
    return this[FLOWING];
  }
  /**
   * true if the stream is currently in a paused state
   */
  get paused() {
    return this[PAUSED];
  }
  [BUFFERPUSH](chunk) {
    if (this[OBJECTMODE])
      this[BUFFERLENGTH] += 1;
    else
      this[BUFFERLENGTH] += chunk.length;
    this[BUFFER].push(chunk);
  }
  [BUFFERSHIFT]() {
    if (this[OBJECTMODE])
      this[BUFFERLENGTH] -= 1;
    else
      this[BUFFERLENGTH] -= this[BUFFER][0].length;
    return this[BUFFER].shift();
  }
  [FLUSH](noDrain = false) {
    do {
    } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length);
    if (!noDrain && !this[BUFFER].length && !this[EOF])
      this.emit("drain");
  }
  [FLUSHCHUNK](chunk) {
    this.emit("data", chunk);
    return this[FLOWING];
  }
  /**
   * Pipe all data emitted by this stream into the destination provided.
   *
   * Triggers the flow of data.
   */
  pipe(dest, opts) {
    if (this[DESTROYED])
      return dest;
    this[DISCARDED] = false;
    const ended = this[EMITTED_END];
    opts = opts || {};
    if (dest === proc.stdout || dest === proc.stderr)
      opts.end = false;
    else
      opts.end = opts.end !== false;
    opts.proxyErrors = !!opts.proxyErrors;
    if (ended) {
      if (opts.end)
        dest.end();
    } else {
      this[PIPES].push(!opts.proxyErrors ? new Pipe(this, dest, opts) : new PipeProxyErrors(this, dest, opts));
      if (this[ASYNC])
        defer(() => this[RESUME]());
      else
        this[RESUME]();
    }
    return dest;
  }
  /**
   * Fully unhook a piped destination stream.
   *
   * If the destination stream was the only consumer of this stream (ie,
   * there are no other piped destinations or `'data'` event listeners)
   * then the flow of data will stop until there is another consumer or
   * {@link Minipass#resume} is explicitly called.
   */
  unpipe(dest) {
    const p = this[PIPES].find((p2) => p2.dest === dest);
    if (p) {
      if (this[PIPES].length === 1) {
        if (this[FLOWING] && this[DATALISTENERS] === 0) {
          this[FLOWING] = false;
        }
        this[PIPES] = [];
      } else
        this[PIPES].splice(this[PIPES].indexOf(p), 1);
      p.unpipe();
    }
  }
  /**
   * Alias for {@link Minipass#on}
   */
  addListener(ev, handler) {
    return this.on(ev, handler);
  }
  /**
   * Mostly identical to `EventEmitter.on`, with the following
   * behavior differences to prevent data loss and unnecessary hangs:
   *
   * - Adding a 'data' event handler will trigger the flow of data
   *
   * - Adding a 'readable' event handler when there is data waiting to be read
   *   will cause 'readable' to be emitted immediately.
   *
   * - Adding an 'endish' event handler ('end', 'finish', etc.) which has
   *   already passed will cause the event to be emitted immediately and all
   *   handlers removed.
   *
   * - Adding an 'error' event handler after an error has been emitted will
   *   cause the event to be re-emitted immediately with the error previously
   *   raised.
   */
  on(ev, handler) {
    const ret = super.on(ev, handler);
    if (ev === "data") {
      this[DISCARDED] = false;
      this[DATALISTENERS]++;
      if (!this[PIPES].length && !this[FLOWING]) {
        this[RESUME]();
      }
    } else if (ev === "readable" && this[BUFFERLENGTH] !== 0) {
      super.emit("readable");
    } else if (isEndish(ev) && this[EMITTED_END]) {
      super.emit(ev);
      this.removeAllListeners(ev);
    } else if (ev === "error" && this[EMITTED_ERROR]) {
      const h = handler;
      if (this[ASYNC])
        defer(() => h.call(this, this[EMITTED_ERROR]));
      else
        h.call(this, this[EMITTED_ERROR]);
    }
    return ret;
  }
  /**
   * Alias for {@link Minipass#off}
   */
  removeListener(ev, handler) {
    return this.off(ev, handler);
  }
  /**
   * Mostly identical to `EventEmitter.off`
   *
   * If a 'data' event handler is removed, and it was the last consumer
   * (ie, there are no pipe destinations or other 'data' event listeners),
   * then the flow of data will stop until there is another consumer or
   * {@link Minipass#resume} is explicitly called.
   */
  off(ev, handler) {
    const ret = super.off(ev, handler);
    if (ev === "data") {
      this[DATALISTENERS] = this.listeners("data").length;
      if (this[DATALISTENERS] === 0 && !this[DISCARDED] && !this[PIPES].length) {
        this[FLOWING] = false;
      }
    }
    return ret;
  }
  /**
   * Mostly identical to `EventEmitter.removeAllListeners`
   *
   * If all 'data' event handlers are removed, and they were the last consumer
   * (ie, there are no pipe destinations), then the flow of data will stop
   * until there is another consumer or {@link Minipass#resume} is explicitly
   * called.
   */
  removeAllListeners(ev) {
    const ret = super.removeAllListeners(ev);
    if (ev === "data" || ev === void 0) {
      this[DATALISTENERS] = 0;
      if (!this[DISCARDED] && !this[PIPES].length) {
        this[FLOWING] = false;
      }
    }
    return ret;
  }
  /**
   * true if the 'end' event has been emitted
   */
  get emittedEnd() {
    return this[EMITTED_END];
  }
  [MAYBE_EMIT_END]() {
    if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this[BUFFER].length === 0 && this[EOF]) {
      this[EMITTING_END] = true;
      this.emit("end");
      this.emit("prefinish");
      this.emit("finish");
      if (this[CLOSED])
        this.emit("close");
      this[EMITTING_END] = false;
    }
  }
  /**
   * Mostly identical to `EventEmitter.emit`, with the following
   * behavior differences to prevent data loss and unnecessary hangs:
   *
   * If the stream has been destroyed, and the event is something other
   * than 'close' or 'error', then `false` is returned and no handlers
   * are called.
   *
   * If the event is 'end', and has already been emitted, then the event
   * is ignored. If the stream is in a paused or non-flowing state, then
   * the event will be deferred until data flow resumes. If the stream is
   * async, then handlers will be called on the next tick rather than
   * immediately.
   *
   * If the event is 'close', and 'end' has not yet been emitted, then
   * the event will be deferred until after 'end' is emitted.
   *
   * If the event is 'error', and an AbortSignal was provided for the stream,
   * and there are no listeners, then the event is ignored, matching the
   * behavior of node core streams in the presense of an AbortSignal.
   *
   * If the event is 'finish' or 'prefinish', then all listeners will be
   * removed after emitting the event, to prevent double-firing.
   */
  emit(ev, ...args) {
    const data = args[0];
    if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED]) {
      return false;
    } else if (ev === "data") {
      return !this[OBJECTMODE] && !data ? false : this[ASYNC] ? (defer(() => this[EMITDATA](data)), true) : this[EMITDATA](data);
    } else if (ev === "end") {
      return this[EMITEND]();
    } else if (ev === "close") {
      this[CLOSED] = true;
      if (!this[EMITTED_END] && !this[DESTROYED])
        return false;
      const ret2 = super.emit("close");
      this.removeAllListeners("close");
      return ret2;
    } else if (ev === "error") {
      this[EMITTED_ERROR] = data;
      super.emit(ERROR, data);
      const ret2 = !this[SIGNAL] || this.listeners("error").length ? super.emit("error", data) : false;
      this[MAYBE_EMIT_END]();
      return ret2;
    } else if (ev === "resume") {
      const ret2 = super.emit("resume");
      this[MAYBE_EMIT_END]();
      return ret2;
    } else if (ev === "finish" || ev === "prefinish") {
      const ret2 = super.emit(ev);
      this.removeAllListeners(ev);
      return ret2;
    }
    const ret = super.emit(ev, ...args);
    this[MAYBE_EMIT_END]();
    return ret;
  }
  [EMITDATA](data) {
    for (const p of this[PIPES]) {
      if (p.dest.write(data) === false)
        this.pause();
    }
    const ret = this[DISCARDED] ? false : super.emit("data", data);
    this[MAYBE_EMIT_END]();
    return ret;
  }
  [EMITEND]() {
    if (this[EMITTED_END])
      return false;
    this[EMITTED_END] = true;
    this.readable = false;
    return this[ASYNC] ? (defer(() => this[EMITEND2]()), true) : this[EMITEND2]();
  }
  [EMITEND2]() {
    if (this[DECODER]) {
      const data = this[DECODER].end();
      if (data) {
        for (const p of this[PIPES]) {
          p.dest.write(data);
        }
        if (!this[DISCARDED])
          super.emit("data", data);
      }
    }
    for (const p of this[PIPES]) {
      p.end();
    }
    const ret = super.emit("end");
    this.removeAllListeners("end");
    return ret;
  }
  /**
   * Return a Promise that resolves to an array of all emitted data once
   * the stream ends.
   */
  async collect() {
    const buf = Object.assign([], {
      dataLength: 0
    });
    if (!this[OBJECTMODE])
      buf.dataLength = 0;
    const p = this.promise();
    this.on("data", (c) => {
      buf.push(c);
      if (!this[OBJECTMODE])
        buf.dataLength += c.length;
    });
    await p;
    return buf;
  }
  /**
   * Return a Promise that resolves to the concatenation of all emitted data
   * once the stream ends.
   *
   * Not allowed on objectMode streams.
   */
  async concat() {
    if (this[OBJECTMODE]) {
      throw new Error("cannot concat in objectMode");
    }
    const buf = await this.collect();
    return this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength);
  }
  /**
   * Return a void Promise that resolves once the stream ends.
   */
  async promise() {
    return new Promise((resolve3, reject) => {
      this.on(DESTROYED, () => reject(new Error("stream destroyed")));
      this.on("error", (er) => reject(er));
      this.on("end", () => resolve3());
    });
  }
  /**
   * Asynchronous `for await of` iteration.
   *
   * This will continue emitting all chunks until the stream terminates.
   */
  [Symbol.asyncIterator]() {
    this[DISCARDED] = false;
    let stopped = false;
    const stop = async () => {
      this.pause();
      stopped = true;
      return { value: void 0, done: true };
    };
    const next = () => {
      if (stopped)
        return stop();
      const res = this.read();
      if (res !== null)
        return Promise.resolve({ done: false, value: res });
      if (this[EOF])
        return stop();
      let resolve3;
      let reject;
      const onerr = (er) => {
        this.off("data", ondata);
        this.off("end", onend);
        this.off(DESTROYED, ondestroy);
        stop();
        reject(er);
      };
      const ondata = (value) => {
        this.off("error", onerr);
        this.off("end", onend);
        this.off(DESTROYED, ondestroy);
        this.pause();
        resolve3({ value, done: !!this[EOF] });
      };
      const onend = () => {
        this.off("error", onerr);
        this.off("data", ondata);
        this.off(DESTROYED, ondestroy);
        stop();
        resolve3({ done: true, value: void 0 });
      };
      const ondestroy = () => onerr(new Error("stream destroyed"));
      return new Promise((res2, rej) => {
        reject = rej;
        resolve3 = res2;
        this.once(DESTROYED, ondestroy);
        this.once("error", onerr);
        this.once("end", onend);
        this.once("data", ondata);
      });
    };
    return {
      next,
      throw: stop,
      return: stop,
      [Symbol.asyncIterator]() {
        return this;
      }
    };
  }
  /**
   * Synchronous `for of` iteration.
   *
   * The iteration will terminate when the internal buffer runs out, even
   * if the stream has not yet terminated.
   */
  [Symbol.iterator]() {
    this[DISCARDED] = false;
    let stopped = false;
    const stop = () => {
      this.pause();
      this.off(ERROR, stop);
      this.off(DESTROYED, stop);
      this.off("end", stop);
      stopped = true;
      return { done: true, value: void 0 };
    };
    const next = () => {
      if (stopped)
        return stop();
      const value = this.read();
      return value === null ? stop() : { done: false, value };
    };
    this.once("end", stop);
    this.once(ERROR, stop);
    this.once(DESTROYED, stop);
    return {
      next,
      throw: stop,
      return: stop,
      [Symbol.iterator]() {
        return this;
      }
    };
  }
  /**
   * Destroy a stream, preventing it from being used for any further purpose.
   *
   * If the stream has a `close()` method, then it will be called on
   * destruction.
   *
   * After destruction, any attempt to write data, read data, or emit most
   * events will be ignored.
   *
   * If an error argument is provided, then it will be emitted in an
   * 'error' event.
   */
  destroy(er) {
    if (this[DESTROYED]) {
      if (er)
        this.emit("error", er);
      else
        this.emit(DESTROYED);
      return this;
    }
    this[DESTROYED] = true;
    this[DISCARDED] = true;
    this[BUFFER].length = 0;
    this[BUFFERLENGTH] = 0;
    const wc = this;
    if (typeof wc.close === "function" && !this[CLOSED])
      wc.close();
    if (er)
      this.emit("error", er);
    else
      this.emit(DESTROYED);
    return this;
  }
  /**
   * Alias for {@link isStream}
   *
   * Former export location, maintained for backwards compatibility.
   *
   * @deprecated
   */
  static get isStream() {
    return isStream;
  }
};

// node_modules/path-scurry/dist/mjs/index.js
var realpathSync = import_fs.realpathSync.native;
var defaultFS = {
  lstatSync: import_fs.lstatSync,
  readdir: import_fs.readdir,
  readdirSync: import_fs.readdirSync,
  readlinkSync: import_fs.readlinkSync,
  realpathSync,
  promises: {
    lstat: import_promises.lstat,
    readdir: import_promises.readdir,
    readlink: import_promises.readlink,
    realpath: import_promises.realpath
  }
};
var fsFromOption = (fsOption) => !fsOption || fsOption === defaultFS || fsOption === actualFS ? defaultFS : {
  ...defaultFS,
  ...fsOption,
  promises: {
    ...defaultFS.promises,
    ...fsOption.promises || {}
  }
};
var uncDriveRegexp = /^\\\\\?\\([a-z]:)\\?$/i;
var uncToDrive = (rootPath) => rootPath.replace(/\//g, "\\").replace(uncDriveRegexp, "$1\\");
var eitherSep = /[\\\/]/;
var UNKNOWN = 0;
var IFIFO = 1;
var IFCHR = 2;
var IFDIR = 4;
var IFBLK = 6;
var IFREG = 8;
var IFLNK = 10;
var IFSOCK = 12;
var IFMT = 15;
var IFMT_UNKNOWN = ~IFMT;
var READDIR_CALLED = 16;
var LSTAT_CALLED = 32;
var ENOTDIR = 64;
var ENOENT = 128;
var ENOREADLINK = 256;
var ENOREALPATH = 512;
var ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH;
var TYPEMASK = 1023;
var entToType = (s) => s.isFile() ? IFREG : s.isDirectory() ? IFDIR : s.isSymbolicLink() ? IFLNK : s.isCharacterDevice() ? IFCHR : s.isBlockDevice() ? IFBLK : s.isSocket() ? IFSOCK : s.isFIFO() ? IFIFO : UNKNOWN;
var normalizeCache = /* @__PURE__ */ new Map();
var normalize = (s) => {
  const c = normalizeCache.get(s);
  if (c)
    return c;
  const n = s.normalize("NFKD");
  normalizeCache.set(s, n);
  return n;
};
var normalizeNocaseCache = /* @__PURE__ */ new Map();
var normalizeNocase = (s) => {
  const c = normalizeNocaseCache.get(s);
  if (c)
    return c;
  const n = normalize(s.toLowerCase());
  normalizeNocaseCache.set(s, n);
  return n;
};
var ResolveCache = class extends LRUCache {
  constructor() {
    super({ max: 256 });
  }
};
var ChildrenCache = class extends LRUCache {
  constructor(maxSize = 16 * 1024) {
    super({
      maxSize,
      // parent + children
      sizeCalculation: (a) => a.length + 1
    });
  }
};
var setAsCwd = Symbol("PathScurry setAsCwd");
var _fs, _dev, _mode, _nlink, _uid, _gid, _rdev, _blksize, _ino, _size2, _blocks, _atimeMs, _mtimeMs, _ctimeMs, _birthtimeMs, _atime, _mtime, _ctime, _birthtime, _matchName, _depth, _fullpath, _fullpathPosix, _relative, _relativePosix, _type, _children, _linkTarget, _realpath, _resolveParts, resolveParts_fn, _readdirSuccess, readdirSuccess_fn, _markENOENT, markENOENT_fn, _markChildrenENOENT, markChildrenENOENT_fn, _markENOREALPATH, markENOREALPATH_fn, _markENOTDIR, markENOTDIR_fn, _readdirFail, readdirFail_fn, _lstatFail, lstatFail_fn, _readlinkFail, readlinkFail_fn, _readdirAddChild, readdirAddChild_fn, _readdirAddNewChild, readdirAddNewChild_fn, _readdirMaybePromoteChild, readdirMaybePromoteChild_fn, _readdirPromoteChild, readdirPromoteChild_fn, _applyStat, applyStat_fn, _onReaddirCB, _readdirCBInFlight, _callOnReaddirCB, callOnReaddirCB_fn, _asyncReaddirInFlight;
var PathBase = class {
  /**
   * Do not create new Path objects directly.  They should always be accessed
   * via the PathScurry class or other methods on the Path class.
   *
   * @internal
   */
  constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
    __privateAdd(this, _resolveParts);
    __privateAdd(this, _readdirSuccess);
    __privateAdd(this, _markENOENT);
    __privateAdd(this, _markChildrenENOENT);
    __privateAdd(this, _markENOREALPATH);
    // save the information when we know the entry is not a dir
    __privateAdd(this, _markENOTDIR);
    __privateAdd(this, _readdirFail);
    __privateAdd(this, _lstatFail);
    __privateAdd(this, _readlinkFail);
    __privateAdd(this, _readdirAddChild);
    __privateAdd(this, _readdirAddNewChild);
    __privateAdd(this, _readdirMaybePromoteChild);
    __privateAdd(this, _readdirPromoteChild);
    __privateAdd(this, _applyStat);
    __privateAdd(this, _callOnReaddirCB);
    /**
     * the basename of this path
     *
     * **Important**: *always* test the path name against any test string
     * usingthe {@link isNamed} method, and not by directly comparing this
     * string. Otherwise, unicode path strings that the system sees as identical
     * will not be properly treated as the same path, leading to incorrect
     * behavior and possible security issues.
     */
    __publicField(this, "name");
    /**
     * the Path entry corresponding to the path root.
     *
     * @internal
     */
    __publicField(this, "root");
    /**
     * All roots found within the current PathScurry family
     *
     * @internal
     */
    __publicField(this, "roots");
    /**
     * a reference to the parent path, or undefined in the case of root entries
     *
     * @internal
     */
    __publicField(this, "parent");
    /**
     * boolean indicating whether paths are compared case-insensitively
     * @internal
     */
    __publicField(this, "nocase");
    // potential default fs override
    __privateAdd(this, _fs, void 0);
    // Stats fields
    __privateAdd(this, _dev, void 0);
    __privateAdd(this, _mode, void 0);
    __privateAdd(this, _nlink, void 0);
    __privateAdd(this, _uid, void 0);
    __privateAdd(this, _gid, void 0);
    __privateAdd(this, _rdev, void 0);
    __privateAdd(this, _blksize, void 0);
    __privateAdd(this, _ino, void 0);
    __privateAdd(this, _size2, void 0);
    __privateAdd(this, _blocks, void 0);
    __privateAdd(this, _atimeMs, void 0);
    __privateAdd(this, _mtimeMs, void 0);
    __privateAdd(this, _ctimeMs, void 0);
    __privateAdd(this, _birthtimeMs, void 0);
    __privateAdd(this, _atime, void 0);
    __privateAdd(this, _mtime, void 0);
    __privateAdd(this, _ctime, void 0);
    __privateAdd(this, _birthtime, void 0);
    __privateAdd(this, _matchName, void 0);
    __privateAdd(this, _depth, void 0);
    __privateAdd(this, _fullpath, void 0);
    __privateAdd(this, _fullpathPosix, void 0);
    __privateAdd(this, _relative, void 0);
    __privateAdd(this, _relativePosix, void 0);
    __privateAdd(this, _type, void 0);
    __privateAdd(this, _children, void 0);
    __privateAdd(this, _linkTarget, void 0);
    __privateAdd(this, _realpath, void 0);
    __privateAdd(this, _onReaddirCB, []);
    __privateAdd(this, _readdirCBInFlight, false);
    __privateAdd(this, _asyncReaddirInFlight, void 0);
    this.name = name;
    __privateSet(this, _matchName, nocase ? normalizeNocase(name) : normalize(name));
    __privateSet(this, _type, type & TYPEMASK);
    this.nocase = nocase;
    this.roots = roots;
    this.root = root || this;
    __privateSet(this, _children, children);
    __privateSet(this, _fullpath, opts.fullpath);
    __privateSet(this, _relative, opts.relative);
    __privateSet(this, _relativePosix, opts.relativePosix);
    this.parent = opts.parent;
    if (this.parent) {
      __privateSet(this, _fs, __privateGet(this.parent, _fs));
    } else {
      __privateSet(this, _fs, fsFromOption(opts.fs));
    }
  }
  get dev() {
    return __privateGet(this, _dev);
  }
  get mode() {
    return __privateGet(this, _mode);
  }
  get nlink() {
    return __privateGet(this, _nlink);
  }
  get uid() {
    return __privateGet(this, _uid);
  }
  get gid() {
    return __privateGet(this, _gid);
  }
  get rdev() {
    return __privateGet(this, _rdev);
  }
  get blksize() {
    return __privateGet(this, _blksize);
  }
  get ino() {
    return __privateGet(this, _ino);
  }
  get size() {
    return __privateGet(this, _size2);
  }
  get blocks() {
    return __privateGet(this, _blocks);
  }
  get atimeMs() {
    return __privateGet(this, _atimeMs);
  }
  get mtimeMs() {
    return __privateGet(this, _mtimeMs);
  }
  get ctimeMs() {
    return __privateGet(this, _ctimeMs);
  }
  get birthtimeMs() {
    return __privateGet(this, _birthtimeMs);
  }
  get atime() {
    return __privateGet(this, _atime);
  }
  get mtime() {
    return __privateGet(this, _mtime);
  }
  get ctime() {
    return __privateGet(this, _ctime);
  }
  get birthtime() {
    return __privateGet(this, _birthtime);
  }
  /**
   * This property is for compatibility with the Dirent class as of
   * Node v20, where Dirent['path'] refers to the path of the directory
   * that was passed to readdir.  So, somewhat counterintuitively, this
   * property refers to the *parent* path, not the path object itself.
   * For root entries, it's the path to the entry itself.
   */
  get path() {
    return (this.parent || this).fullpath();
  }
  /**
   * Returns the depth of the Path object from its root.
   *
   * For example, a path at `/foo/bar` would have a depth of 2.
   */
  depth() {
    if (__privateGet(this, _depth) !== void 0)
      return __privateGet(this, _depth);
    if (!this.parent)
      return __privateSet(this, _depth, 0);
    return __privateSet(this, _depth, this.parent.depth() + 1);
  }
  /**
   * @internal
   */
  childrenCache() {
    return __privateGet(this, _children);
  }
  /**
   * Get the Path object referenced by the string path, resolved from this Path
   */
  resolve(path4) {
    var _a2;
    if (!path4) {
      return this;
    }
    const rootPath = this.getRootString(path4);
    const dir = path4.substring(rootPath.length);
    const dirParts = dir.split(this.splitSep);
    const result = rootPath ? __privateMethod(_a2 = this.getRoot(rootPath), _resolveParts, resolveParts_fn).call(_a2, dirParts) : __privateMethod(this, _resolveParts, resolveParts_fn).call(this, dirParts);
    return result;
  }
  /**
   * Returns the cached children Path objects, if still available.  If they
   * have fallen out of the cache, then returns an empty array, and resets the
   * READDIR_CALLED bit, so that future calls to readdir() will require an fs
   * lookup.
   *
   * @internal
   */
  children() {
    const cached = __privateGet(this, _children).get(this);
    if (cached) {
      return cached;
    }
    const children = Object.assign([], { provisional: 0 });
    __privateGet(this, _children).set(this, children);
    __privateSet(this, _type, __privateGet(this, _type) & ~READDIR_CALLED);
    return children;
  }
  /**
   * Resolves a path portion and returns or creates the child Path.
   *
   * Returns `this` if pathPart is `''` or `'.'`, or `parent` if pathPart is
   * `'..'`.
   *
   * This should not be called directly.  If `pathPart` contains any path
   * separators, it will lead to unsafe undefined behavior.
   *
   * Use `Path.resolve()` instead.
   *
   * @internal
   */
  child(pathPart, opts) {
    if (pathPart === "" || pathPart === ".") {
      return this;
    }
    if (pathPart === "..") {
      return this.parent || this;
    }
    const children = this.children();
    const name = this.nocase ? normalizeNocase(pathPart) : normalize(pathPart);
    for (const p of children) {
      if (__privateGet(p, _matchName) === name) {
        return p;
      }
    }
    const s = this.parent ? this.sep : "";
    const fullpath = __privateGet(this, _fullpath) ? __privateGet(this, _fullpath) + s + pathPart : void 0;
    const pchild = this.newChild(pathPart, UNKNOWN, {
      ...opts,
      parent: this,
      fullpath
    });
    if (!this.canReaddir()) {
      __privateSet(pchild, _type, __privateGet(pchild, _type) | ENOENT);
    }
    children.push(pchild);
    return pchild;
  }
  /**
   * The relative path from the cwd. If it does not share an ancestor with
   * the cwd, then this ends up being equivalent to the fullpath()
   */
  relative() {
    if (__privateGet(this, _relative) !== void 0) {
      return __privateGet(this, _relative);
    }
    const name = this.name;
    const p = this.parent;
    if (!p) {
      return __privateSet(this, _relative, this.name);
    }
    const pv = p.relative();
    return pv + (!pv || !p.parent ? "" : this.sep) + name;
  }
  /**
   * The relative path from the cwd, using / as the path separator.
   * If it does not share an ancestor with
   * the cwd, then this ends up being equivalent to the fullpathPosix()
   * On posix systems, this is identical to relative().
   */
  relativePosix() {
    if (this.sep === "/")
      return this.relative();
    if (__privateGet(this, _relativePosix) !== void 0)
      return __privateGet(this, _relativePosix);
    const name = this.name;
    const p = this.parent;
    if (!p) {
      return __privateSet(this, _relativePosix, this.fullpathPosix());
    }
    const pv = p.relativePosix();
    return pv + (!pv || !p.parent ? "" : "/") + name;
  }
  /**
   * The fully resolved path string for this Path entry
   */
  fullpath() {
    if (__privateGet(this, _fullpath) !== void 0) {
      return __privateGet(this, _fullpath);
    }
    const name = this.name;
    const p = this.parent;
    if (!p) {
      return __privateSet(this, _fullpath, this.name);
    }
    const pv = p.fullpath();
    const fp = pv + (!p.parent ? "" : this.sep) + name;
    return __privateSet(this, _fullpath, fp);
  }
  /**
   * On platforms other than windows, this is identical to fullpath.
   *
   * On windows, this is overridden to return the forward-slash form of the
   * full UNC path.
   */
  fullpathPosix() {
    if (__privateGet(this, _fullpathPosix) !== void 0)
      return __privateGet(this, _fullpathPosix);
    if (this.sep === "/")
      return __privateSet(this, _fullpathPosix, this.fullpath());
    if (!this.parent) {
      const p2 = this.fullpath().replace(/\\/g, "/");
      if (/^[a-z]:\//i.test(p2)) {
        return __privateSet(this, _fullpathPosix, `//?/${p2}`);
      } else {
        return __privateSet(this, _fullpathPosix, p2);
      }
    }
    const p = this.parent;
    const pfpp = p.fullpathPosix();
    const fpp = pfpp + (!pfpp || !p.parent ? "" : "/") + this.name;
    return __privateSet(this, _fullpathPosix, fpp);
  }
  /**
   * Is the Path of an unknown type?
   *
   * Note that we might know *something* about it if there has been a previous
   * filesystem operation, for example that it does not exist, or is not a
   * link, or whether it has child entries.
   */
  isUnknown() {
    return (__privateGet(this, _type) & IFMT) === UNKNOWN;
  }
  isType(type) {
    return this[`is${type}`]();
  }
  getType() {
    return this.isUnknown() ? "Unknown" : this.isDirectory() ? "Directory" : this.isFile() ? "File" : this.isSymbolicLink() ? "SymbolicLink" : this.isFIFO() ? "FIFO" : this.isCharacterDevice() ? "CharacterDevice" : this.isBlockDevice() ? "BlockDevice" : (
      /* c8 ignore start */
      this.isSocket() ? "Socket" : "Unknown"
    );
  }
  /**
   * Is the Path a regular file?
   */
  isFile() {
    return (__privateGet(this, _type) & IFMT) === IFREG;
  }
  /**
   * Is the Path a directory?
   */
  isDirectory() {
    return (__privateGet(this, _type) & IFMT) === IFDIR;
  }
  /**
   * Is the path a character device?
   */
  isCharacterDevice() {
    return (__privateGet(this, _type) & IFMT) === IFCHR;
  }
  /**
   * Is the path a block device?
   */
  isBlockDevice() {
    return (__privateGet(this, _type) & IFMT) === IFBLK;
  }
  /**
   * Is the path a FIFO pipe?
   */
  isFIFO() {
    return (__privateGet(this, _type) & IFMT) === IFIFO;
  }
  /**
   * Is the path a socket?
   */
  isSocket() {
    return (__privateGet(this, _type) & IFMT) === IFSOCK;
  }
  /**
   * Is the path a symbolic link?
   */
  isSymbolicLink() {
    return (__privateGet(this, _type) & IFLNK) === IFLNK;
  }
  /**
   * Return the entry if it has been subject of a successful lstat, or
   * undefined otherwise.
   *
   * Does not read the filesystem, so an undefined result *could* simply
   * mean that we haven't called lstat on it.
   */
  lstatCached() {
    return __privateGet(this, _type) & LSTAT_CALLED ? this : void 0;
  }
  /**
   * Return the cached link target if the entry has been the subject of a
   * successful readlink, or undefined otherwise.
   *
   * Does not read the filesystem, so an undefined result *could* just mean we
   * don't have any cached data. Only use it if you are very sure that a
   * readlink() has been called at some point.
   */
  readlinkCached() {
    return __privateGet(this, _linkTarget);
  }
  /**
   * Returns the cached realpath target if the entry has been the subject
   * of a successful realpath, or undefined otherwise.
   *
   * Does not read the filesystem, so an undefined result *could* just mean we
   * don't have any cached data. Only use it if you are very sure that a
   * realpath() has been called at some point.
   */
  realpathCached() {
    return __privateGet(this, _realpath);
  }
  /**
   * Returns the cached child Path entries array if the entry has been the
   * subject of a successful readdir(), or [] otherwise.
   *
   * Does not read the filesystem, so an empty array *could* just mean we
   * don't have any cached data. Only use it if you are very sure that a
   * readdir() has been called recently enough to still be valid.
   */
  readdirCached() {
    const children = this.children();
    return children.slice(0, children.provisional);
  }
  /**
   * Return true if it's worth trying to readlink.  Ie, we don't (yet) have
   * any indication that readlink will definitely fail.
   *
   * Returns false if the path is known to not be a symlink, if a previous
   * readlink failed, or if the entry does not exist.
   */
  canReadlink() {
    if (__privateGet(this, _linkTarget))
      return true;
    if (!this.parent)
      return false;
    const ifmt = __privateGet(this, _type) & IFMT;
    return !(ifmt !== UNKNOWN && ifmt !== IFLNK || __privateGet(this, _type) & ENOREADLINK || __privateGet(this, _type) & ENOENT);
  }
  /**
   * Return true if readdir has previously been successfully called on this
   * path, indicating that cachedReaddir() is likely valid.
   */
  calledReaddir() {
    return !!(__privateGet(this, _type) & READDIR_CALLED);
  }
  /**
   * Returns true if the path is known to not exist. That is, a previous lstat
   * or readdir failed to verify its existence when that would have been
   * expected, or a parent entry was marked either enoent or enotdir.
   */
  isENOENT() {
    return !!(__privateGet(this, _type) & ENOENT);
  }
  /**
   * Return true if the path is a match for the given path name.  This handles
   * case sensitivity and unicode normalization.
   *
   * Note: even on case-sensitive systems, it is **not** safe to test the
   * equality of the `.name` property to determine whether a given pathname
   * matches, due to unicode normalization mismatches.
   *
   * Always use this method instead of testing the `path.name` property
   * directly.
   */
  isNamed(n) {
    return !this.nocase ? __privateGet(this, _matchName) === normalize(n) : __privateGet(this, _matchName) === normalizeNocase(n);
  }
  /**
   * Return the Path object corresponding to the target of a symbolic link.
   *
   * If the Path is not a symbolic link, or if the readlink call fails for any
   * reason, `undefined` is returned.
   *
   * Result is cached, and thus may be outdated if the filesystem is mutated.
   */
  async readlink() {
    const target = __privateGet(this, _linkTarget);
    if (target) {
      return target;
    }
    if (!this.canReadlink()) {
      return void 0;
    }
    if (!this.parent) {
      return void 0;
    }
    try {
      const read = await __privateGet(this, _fs).promises.readlink(this.fullpath());
      const linkTarget = this.parent.resolve(read);
      if (linkTarget) {
        return __privateSet(this, _linkTarget, linkTarget);
      }
    } catch (er) {
      __privateMethod(this, _readlinkFail, readlinkFail_fn).call(this, er.code);
      return void 0;
    }
  }
  /**
   * Synchronous {@link PathBase.readlink}
   */
  readlinkSync() {
    const target = __privateGet(this, _linkTarget);
    if (target) {
      return target;
    }
    if (!this.canReadlink()) {
      return void 0;
    }
    if (!this.parent) {
      return void 0;
    }
    try {
      const read = __privateGet(this, _fs).readlinkSync(this.fullpath());
      const linkTarget = this.parent.resolve(read);
      if (linkTarget) {
        return __privateSet(this, _linkTarget, linkTarget);
      }
    } catch (er) {
      __privateMethod(this, _readlinkFail, readlinkFail_fn).call(this, er.code);
      return void 0;
    }
  }
  /**
   * Call lstat() on this Path, and update all known information that can be
   * determined.
   *
   * Note that unlike `fs.lstat()`, the returned value does not contain some
   * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
   * information is required, you will need to call `fs.lstat` yourself.
   *
   * If the Path refers to a nonexistent file, or if the lstat call fails for
   * any reason, `undefined` is returned.  Otherwise the updated Path object is
   * returned.
   *
   * Results are cached, and thus may be out of date if the filesystem is
   * mutated.
   */
  async lstat() {
    if ((__privateGet(this, _type) & ENOENT) === 0) {
      try {
        __privateMethod(this, _applyStat, applyStat_fn).call(this, await __privateGet(this, _fs).promises.lstat(this.fullpath()));
        return this;
      } catch (er) {
        __privateMethod(this, _lstatFail, lstatFail_fn).call(this, er.code);
      }
    }
  }
  /**
   * synchronous {@link PathBase.lstat}
   */
  lstatSync() {
    if ((__privateGet(this, _type) & ENOENT) === 0) {
      try {
        __privateMethod(this, _applyStat, applyStat_fn).call(this, __privateGet(this, _fs).lstatSync(this.fullpath()));
        return this;
      } catch (er) {
        __privateMethod(this, _lstatFail, lstatFail_fn).call(this, er.code);
      }
    }
  }
  /**
   * Standard node-style callback interface to get list of directory entries.
   *
   * If the Path cannot or does not contain any children, then an empty array
   * is returned.
   *
   * Results are cached, and thus may be out of date if the filesystem is
   * mutated.
   *
   * @param cb The callback called with (er, entries).  Note that the `er`
   * param is somewhat extraneous, as all readdir() errors are handled and
   * simply result in an empty set of entries being returned.
   * @param allowZalgo Boolean indicating that immediately known results should
   * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release
   * zalgo at your peril, the dark pony lord is devious and unforgiving.
   */
  readdirCB(cb, allowZalgo = false) {
    if (!this.canReaddir()) {
      if (allowZalgo)
        cb(null, []);
      else
        queueMicrotask(() => cb(null, []));
      return;
    }
    const children = this.children();
    if (this.calledReaddir()) {
      const c = children.slice(0, children.provisional);
      if (allowZalgo)
        cb(null, c);
      else
        queueMicrotask(() => cb(null, c));
      return;
    }
    __privateGet(this, _onReaddirCB).push(cb);
    if (__privateGet(this, _readdirCBInFlight)) {
      return;
    }
    __privateSet(this, _readdirCBInFlight, true);
    const fullpath = this.fullpath();
    __privateGet(this, _fs).readdir(fullpath, { withFileTypes: true }, (er, entries) => {
      if (er) {
        __privateMethod(this, _readdirFail, readdirFail_fn).call(this, er.code);
        children.provisional = 0;
      } else {
        for (const e of entries) {
          __privateMethod(this, _readdirAddChild, readdirAddChild_fn).call(this, e, children);
        }
        __privateMethod(this, _readdirSuccess, readdirSuccess_fn).call(this, children);
      }
      __privateMethod(this, _callOnReaddirCB, callOnReaddirCB_fn).call(this, children.slice(0, children.provisional));
      return;
    });
  }
  /**
   * Return an array of known child entries.
   *
   * If the Path cannot or does not contain any children, then an empty array
   * is returned.
   *
   * Results are cached, and thus may be out of date if the filesystem is
   * mutated.
   */
  async readdir() {
    if (!this.canReaddir()) {
      return [];
    }
    const children = this.children();
    if (this.calledReaddir()) {
      return children.slice(0, children.provisional);
    }
    const fullpath = this.fullpath();
    if (__privateGet(this, _asyncReaddirInFlight)) {
      await __privateGet(this, _asyncReaddirInFlight);
    } else {
      let resolve3 = () => {
      };
      __privateSet(this, _asyncReaddirInFlight, new Promise((res) => resolve3 = res));
      try {
        for (const e of await __privateGet(this, _fs).promises.readdir(fullpath, {
          withFileTypes: true
        })) {
          __privateMethod(this, _readdirAddChild, readdirAddChild_fn).call(this, e, children);
        }
        __privateMethod(this, _readdirSuccess, readdirSuccess_fn).call(this, children);
      } catch (er) {
        __privateMethod(this, _readdirFail, readdirFail_fn).call(this, er.code);
        children.provisional = 0;
      }
      __privateSet(this, _asyncReaddirInFlight, void 0);
      resolve3();
    }
    return children.slice(0, children.provisional);
  }
  /**
   * synchronous {@link PathBase.readdir}
   */
  readdirSync() {
    if (!this.canReaddir()) {
      return [];
    }
    const children = this.children();
    if (this.calledReaddir()) {
      return children.slice(0, children.provisional);
    }
    const fullpath = this.fullpath();
    try {
      for (const e of __privateGet(this, _fs).readdirSync(fullpath, {
        withFileTypes: true
      })) {
        __privateMethod(this, _readdirAddChild, readdirAddChild_fn).call(this, e, children);
      }
      __privateMethod(this, _readdirSuccess, readdirSuccess_fn).call(this, children);
    } catch (er) {
      __privateMethod(this, _readdirFail, readdirFail_fn).call(this, er.code);
      children.provisional = 0;
    }
    return children.slice(0, children.provisional);
  }
  canReaddir() {
    if (__privateGet(this, _type) & ENOCHILD)
      return false;
    const ifmt = IFMT & __privateGet(this, _type);
    if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) {
      return false;
    }
    return true;
  }
  shouldWalk(dirs, walkFilter) {
    return (__privateGet(this, _type) & IFDIR) === IFDIR && !(__privateGet(this, _type) & ENOCHILD) && !dirs.has(this) && (!walkFilter || walkFilter(this));
  }
  /**
   * Return the Path object corresponding to path as resolved
   * by realpath(3).
   *
   * If the realpath call fails for any reason, `undefined` is returned.
   *
   * Result is cached, and thus may be outdated if the filesystem is mutated.
   * On success, returns a Path object.
   */
  async realpath() {
    if (__privateGet(this, _realpath))
      return __privateGet(this, _realpath);
    if ((ENOREALPATH | ENOREADLINK | ENOENT) & __privateGet(this, _type))
      return void 0;
    try {
      const rp = await __privateGet(this, _fs).promises.realpath(this.fullpath());
      return __privateSet(this, _realpath, this.resolve(rp));
    } catch (_) {
      __privateMethod(this, _markENOREALPATH, markENOREALPATH_fn).call(this);
    }
  }
  /**
   * Synchronous {@link realpath}
   */
  realpathSync() {
    if (__privateGet(this, _realpath))
      return __privateGet(this, _realpath);
    if ((ENOREALPATH | ENOREADLINK | ENOENT) & __privateGet(this, _type))
      return void 0;
    try {
      const rp = __privateGet(this, _fs).realpathSync(this.fullpath());
      return __privateSet(this, _realpath, this.resolve(rp));
    } catch (_) {
      __privateMethod(this, _markENOREALPATH, markENOREALPATH_fn).call(this);
    }
  }
  /**
   * Internal method to mark this Path object as the scurry cwd,
   * called by {@link PathScurry#chdir}
   *
   * @internal
   */
  [setAsCwd](oldCwd) {
    if (oldCwd === this)
      return;
    const changed = /* @__PURE__ */ new Set([]);
    let rp = [];
    let p = this;
    while (p && p.parent) {
      changed.add(p);
      __privateSet(p, _relative, rp.join(this.sep));
      __privateSet(p, _relativePosix, rp.join("/"));
      p = p.parent;
      rp.push("..");
    }
    p = oldCwd;
    while (p && p.parent && !changed.has(p)) {
      __privateSet(p, _relative, void 0);
      __privateSet(p, _relativePosix, void 0);
      p = p.parent;
    }
  }
};
_fs = new WeakMap();
_dev = new WeakMap();
_mode = new WeakMap();
_nlink = new WeakMap();
_uid = new WeakMap();
_gid = new WeakMap();
_rdev = new WeakMap();
_blksize = new WeakMap();
_ino = new WeakMap();
_size2 = new WeakMap();
_blocks = new WeakMap();
_atimeMs = new WeakMap();
_mtimeMs = new WeakMap();
_ctimeMs = new WeakMap();
_birthtimeMs = new WeakMap();
_atime = new WeakMap();
_mtime = new WeakMap();
_ctime = new WeakMap();
_birthtime = new WeakMap();
_matchName = new WeakMap();
_depth = new WeakMap();
_fullpath = new WeakMap();
_fullpathPosix = new WeakMap();
_relative = new WeakMap();
_relativePosix = new WeakMap();
_type = new WeakMap();
_children = new WeakMap();
_linkTarget = new WeakMap();
_realpath = new WeakMap();
_resolveParts = new WeakSet();
resolveParts_fn = function(dirParts) {
  let p = this;
  for (const part of dirParts) {
    p = p.child(part);
  }
  return p;
};
_readdirSuccess = new WeakSet();
readdirSuccess_fn = function(children) {
  var _a2;
  __privateSet(this, _type, __privateGet(this, _type) | READDIR_CALLED);
  for (let p = children.provisional; p < children.length; p++) {
    __privateMethod(_a2 = children[p], _markENOENT, markENOENT_fn).call(_a2);
  }
};
_markENOENT = new WeakSet();
markENOENT_fn = function() {
  if (__privateGet(this, _type) & ENOENT)
    return;
  __privateSet(this, _type, (__privateGet(this, _type) | ENOENT) & IFMT_UNKNOWN);
  __privateMethod(this, _markChildrenENOENT, markChildrenENOENT_fn).call(this);
};
_markChildrenENOENT = new WeakSet();
markChildrenENOENT_fn = function() {
  var _a2;
  const children = this.children();
  children.provisional = 0;
  for (const p of children) {
    __privateMethod(_a2 = p, _markENOENT, markENOENT_fn).call(_a2);
  }
};
_markENOREALPATH = new WeakSet();
markENOREALPATH_fn = function() {
  __privateSet(this, _type, __privateGet(this, _type) | ENOREALPATH);
  __privateMethod(this, _markENOTDIR, markENOTDIR_fn).call(this);
};
_markENOTDIR = new WeakSet();
markENOTDIR_fn = function() {
  if (__privateGet(this, _type) & ENOTDIR)
    return;
  let t = __privateGet(this, _type);
  if ((t & IFMT) === IFDIR)
    t &= IFMT_UNKNOWN;
  __privateSet(this, _type, t | ENOTDIR);
  __privateMethod(this, _markChildrenENOENT, markChildrenENOENT_fn).call(this);
};
_readdirFail = new WeakSet();
readdirFail_fn = function(code = "") {
  if (code === "ENOTDIR" || code === "EPERM") {
    __privateMethod(this, _markENOTDIR, markENOTDIR_fn).call(this);
  } else if (code === "ENOENT") {
    __privateMethod(this, _markENOENT, markENOENT_fn).call(this);
  } else {
    this.children().provisional = 0;
  }
};
_lstatFail = new WeakSet();
lstatFail_fn = function(code = "") {
  var _a2;
  if (code === "ENOTDIR") {
    const p = this.parent;
    __privateMethod(_a2 = p, _markENOTDIR, markENOTDIR_fn).call(_a2);
  } else if (code === "ENOENT") {
    __privateMethod(this, _markENOENT, markENOENT_fn).call(this);
  }
};
_readlinkFail = new WeakSet();
readlinkFail_fn = function(code = "") {
  var _a2;
  let ter = __privateGet(this, _type);
  ter |= ENOREADLINK;
  if (code === "ENOENT")
    ter |= ENOENT;
  if (code === "EINVAL" || code === "UNKNOWN") {
    ter &= IFMT_UNKNOWN;
  }
  __privateSet(this, _type, ter);
  if (code === "ENOTDIR" && this.parent) {
    __privateMethod(_a2 = this.parent, _markENOTDIR, markENOTDIR_fn).call(_a2);
  }
};
_readdirAddChild = new WeakSet();
readdirAddChild_fn = function(e, c) {
  return __privateMethod(this, _readdirMaybePromoteChild, readdirMaybePromoteChild_fn).call(this, e, c) || __privateMethod(this, _readdirAddNewChild, readdirAddNewChild_fn).call(this, e, c);
};
_readdirAddNewChild = new WeakSet();
readdirAddNewChild_fn = function(e, c) {
  const type = entToType(e);
  const child = this.newChild(e.name, type, { parent: this });
  const ifmt = __privateGet(child, _type) & IFMT;
  if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) {
    __privateSet(child, _type, __privateGet(child, _type) | ENOTDIR);
  }
  c.unshift(child);
  c.provisional++;
  return child;
};
_readdirMaybePromoteChild = new WeakSet();
readdirMaybePromoteChild_fn = function(e, c) {
  for (let p = c.provisional; p < c.length; p++) {
    const pchild = c[p];
    const name = this.nocase ? normalizeNocase(e.name) : normalize(e.name);
    if (name !== __privateGet(pchild, _matchName)) {
      continue;
    }
    return __privateMethod(this, _readdirPromoteChild, readdirPromoteChild_fn).call(this, e, pchild, p, c);
  }
};
_readdirPromoteChild = new WeakSet();
readdirPromoteChild_fn = function(e, p, index, c) {
  const v = p.name;
  __privateSet(p, _type, __privateGet(p, _type) & IFMT_UNKNOWN | entToType(e));
  if (v !== e.name)
    p.name = e.name;
  if (index !== c.provisional) {
    if (index === c.length - 1)
      c.pop();
    else
      c.splice(index, 1);
    c.unshift(p);
  }
  c.provisional++;
  return p;
};
_applyStat = new WeakSet();
applyStat_fn = function(st) {
  const { atime, atimeMs, birthtime, birthtimeMs, blksize, blocks, ctime, ctimeMs, dev, gid, ino, mode, mtime, mtimeMs, nlink, rdev, size, uid } = st;
  __privateSet(this, _atime, atime);
  __privateSet(this, _atimeMs, atimeMs);
  __privateSet(this, _birthtime, birthtime);
  __privateSet(this, _birthtimeMs, birthtimeMs);
  __privateSet(this, _blksize, blksize);
  __privateSet(this, _blocks, blocks);
  __privateSet(this, _ctime, ctime);
  __privateSet(this, _ctimeMs, ctimeMs);
  __privateSet(this, _dev, dev);
  __privateSet(this, _gid, gid);
  __privateSet(this, _ino, ino);
  __privateSet(this, _mode, mode);
  __privateSet(this, _mtime, mtime);
  __privateSet(this, _mtimeMs, mtimeMs);
  __privateSet(this, _nlink, nlink);
  __privateSet(this, _rdev, rdev);
  __privateSet(this, _size2, size);
  __privateSet(this, _uid, uid);
  const ifmt = entToType(st);
  __privateSet(this, _type, __privateGet(this, _type) & IFMT_UNKNOWN | ifmt | LSTAT_CALLED);
  if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) {
    __privateSet(this, _type, __privateGet(this, _type) | ENOTDIR);
  }
};
_onReaddirCB = new WeakMap();
_readdirCBInFlight = new WeakMap();
_callOnReaddirCB = new WeakSet();
callOnReaddirCB_fn = function(children) {
  __privateSet(this, _readdirCBInFlight, false);
  const cbs = __privateGet(this, _onReaddirCB).slice();
  __privateGet(this, _onReaddirCB).length = 0;
  cbs.forEach((cb) => cb(null, children));
};
_asyncReaddirInFlight = new WeakMap();
var PathWin32 = class _PathWin32 extends PathBase {
  /**
   * Separator for generating path strings.
   */
  sep = "\\";
  /**
   * Separator for parsing path strings.
   */
  splitSep = eitherSep;
  /**
   * Do not create new Path objects directly.  They should always be accessed
   * via the PathScurry class or other methods on the Path class.
   *
   * @internal
   */
  constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
    super(name, type, root, roots, nocase, children, opts);
  }
  /**
   * @internal
   */
  newChild(name, type = UNKNOWN, opts = {}) {
    return new _PathWin32(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
  }
  /**
   * @internal
   */
  getRootString(path4) {
    return import_path.win32.parse(path4).root;
  }
  /**
   * @internal
   */
  getRoot(rootPath) {
    rootPath = uncToDrive(rootPath.toUpperCase());
    if (rootPath === this.root.name) {
      return this.root;
    }
    for (const [compare, root] of Object.entries(this.roots)) {
      if (this.sameRoot(rootPath, compare)) {
        return this.roots[rootPath] = root;
      }
    }
    return this.roots[rootPath] = new PathScurryWin32(rootPath, this).root;
  }
  /**
   * @internal
   */
  sameRoot(rootPath, compare = this.root.name) {
    rootPath = rootPath.toUpperCase().replace(/\//g, "\\").replace(uncDriveRegexp, "$1\\");
    return rootPath === compare;
  }
};
var PathPosix = class _PathPosix extends PathBase {
  /**
   * separator for parsing path strings
   */
  splitSep = "/";
  /**
   * separator for generating path strings
   */
  sep = "/";
  /**
   * Do not create new Path objects directly.  They should always be accessed
   * via the PathScurry class or other methods on the Path class.
   *
   * @internal
   */
  constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
    super(name, type, root, roots, nocase, children, opts);
  }
  /**
   * @internal
   */
  getRootString(path4) {
    return path4.startsWith("/") ? "/" : "";
  }
  /**
   * @internal
   */
  getRoot(_rootPath) {
    return this.root;
  }
  /**
   * @internal
   */
  newChild(name, type = UNKNOWN, opts = {}) {
    return new _PathPosix(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
  }
};
var _resolveCache, _resolvePosixCache, _children2, _fs2;
var PathScurryBase = class {
  /**
   * This class should not be instantiated directly.
   *
   * Use PathScurryWin32, PathScurryDarwin, PathScurryPosix, or PathScurry
   *
   * @internal
   */
  constructor(cwd = process.cwd(), pathImpl, sep2, { nocase, childrenCacheSize = 16 * 1024, fs: fs6 = defaultFS } = {}) {
    /**
     * The root Path entry for the current working directory of this Scurry
     */
    __publicField(this, "root");
    /**
     * The string path for the root of this Scurry's current working directory
     */
    __publicField(this, "rootPath");
    /**
     * A collection of all roots encountered, referenced by rootPath
     */
    __publicField(this, "roots");
    /**
     * The Path entry corresponding to this PathScurry's current working directory.
     */
    __publicField(this, "cwd");
    __privateAdd(this, _resolveCache, void 0);
    __privateAdd(this, _resolvePosixCache, void 0);
    __privateAdd(this, _children2, void 0);
    /**
     * Perform path comparisons case-insensitively.
     *
     * Defaults true on Darwin and Windows systems, false elsewhere.
     */
    __publicField(this, "nocase");
    __privateAdd(this, _fs2, void 0);
    __privateSet(this, _fs2, fsFromOption(fs6));
    if (cwd instanceof URL || cwd.startsWith("file://")) {
      cwd = (0, import_url.fileURLToPath)(cwd);
    }
    const cwdPath = pathImpl.resolve(cwd);
    this.roots = /* @__PURE__ */ Object.create(null);
    this.rootPath = this.parseRootPath(cwdPath);
    __privateSet(this, _resolveCache, new ResolveCache());
    __privateSet(this, _resolvePosixCache, new ResolveCache());
    __privateSet(this, _children2, new ChildrenCache(childrenCacheSize));
    const split = cwdPath.substring(this.rootPath.length).split(sep2);
    if (split.length === 1 && !split[0]) {
      split.pop();
    }
    if (nocase === void 0) {
      throw new TypeError("must provide nocase setting to PathScurryBase ctor");
    }
    this.nocase = nocase;
    this.root = this.newRoot(__privateGet(this, _fs2));
    this.roots[this.rootPath] = this.root;
    let prev = this.root;
    let len = split.length - 1;
    const joinSep = pathImpl.sep;
    let abs = this.rootPath;
    let sawFirst = false;
    for (const part of split) {
      const l = len--;
      prev = prev.child(part, {
        relative: new Array(l).fill("..").join(joinSep),
        relativePosix: new Array(l).fill("..").join("/"),
        fullpath: abs += (sawFirst ? "" : joinSep) + part
      });
      sawFirst = true;
    }
    this.cwd = prev;
  }
  /**
   * Get the depth of a provided path, string, or the cwd
   */
  depth(path4 = this.cwd) {
    if (typeof path4 === "string") {
      path4 = this.cwd.resolve(path4);
    }
    return path4.depth();
  }
  /**
   * Return the cache of child entries.  Exposed so subclasses can create
   * child Path objects in a platform-specific way.
   *
   * @internal
   */
  childrenCache() {
    return __privateGet(this, _children2);
  }
  /**
   * Resolve one or more path strings to a resolved string
   *
   * Same interface as require('path').resolve.
   *
   * Much faster than path.resolve() when called multiple times for the same
   * path, because the resolved Path objects are cached.  Much slower
   * otherwise.
   */
  resolve(...paths) {
    let r = "";
    for (let i = paths.length - 1; i >= 0; i--) {
      const p = paths[i];
      if (!p || p === ".")
        continue;
      r = r ? `${p}/${r}` : p;
      if (this.isAbsolute(p)) {
        break;
      }
    }
    const cached = __privateGet(this, _resolveCache).get(r);
    if (cached !== void 0) {
      return cached;
    }
    const result = this.cwd.resolve(r).fullpath();
    __privateGet(this, _resolveCache).set(r, result);
    return result;
  }
  /**
   * Resolve one or more path strings to a resolved string, returning
   * the posix path.  Identical to .resolve() on posix systems, but on
   * windows will return a forward-slash separated UNC path.
   *
   * Same interface as require('path').resolve.
   *
   * Much faster than path.resolve() when called multiple times for the same
   * path, because the resolved Path objects are cached.  Much slower
   * otherwise.
   */
  resolvePosix(...paths) {
    let r = "";
    for (let i = paths.length - 1; i >= 0; i--) {
      const p = paths[i];
      if (!p || p === ".")
        continue;
      r = r ? `${p}/${r}` : p;
      if (this.isAbsolute(p)) {
        break;
      }
    }
    const cached = __privateGet(this, _resolvePosixCache).get(r);
    if (cached !== void 0) {
      return cached;
    }
    const result = this.cwd.resolve(r).fullpathPosix();
    __privateGet(this, _resolvePosixCache).set(r, result);
    return result;
  }
  /**
   * find the relative path from the cwd to the supplied path string or entry
   */
  relative(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.relative();
  }
  /**
   * find the relative path from the cwd to the supplied path string or
   * entry, using / as the path delimiter, even on Windows.
   */
  relativePosix(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.relativePosix();
  }
  /**
   * Return the basename for the provided string or Path object
   */
  basename(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.name;
  }
  /**
   * Return the dirname for the provided string or Path object
   */
  dirname(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return (entry.parent || entry).fullpath();
  }
  async readdir(entry = this.cwd, opts = {
    withFileTypes: true
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes } = opts;
    if (!entry.canReaddir()) {
      return [];
    } else {
      const p = await entry.readdir();
      return withFileTypes ? p : p.map((e) => e.name);
    }
  }
  readdirSync(entry = this.cwd, opts = {
    withFileTypes: true
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true } = opts;
    if (!entry.canReaddir()) {
      return [];
    } else if (withFileTypes) {
      return entry.readdirSync();
    } else {
      return entry.readdirSync().map((e) => e.name);
    }
  }
  /**
   * Call lstat() on the string or Path object, and update all known
   * information that can be determined.
   *
   * Note that unlike `fs.lstat()`, the returned value does not contain some
   * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
   * information is required, you will need to call `fs.lstat` yourself.
   *
   * If the Path refers to a nonexistent file, or if the lstat call fails for
   * any reason, `undefined` is returned.  Otherwise the updated Path object is
   * returned.
   *
   * Results are cached, and thus may be out of date if the filesystem is
   * mutated.
   */
  async lstat(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.lstat();
  }
  /**
   * synchronous {@link PathScurryBase.lstat}
   */
  lstatSync(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.lstatSync();
  }
  async readlink(entry = this.cwd, { withFileTypes } = {
    withFileTypes: false
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      withFileTypes = entry.withFileTypes;
      entry = this.cwd;
    }
    const e = await entry.readlink();
    return withFileTypes ? e : e == null ? void 0 : e.fullpath();
  }
  readlinkSync(entry = this.cwd, { withFileTypes } = {
    withFileTypes: false
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      withFileTypes = entry.withFileTypes;
      entry = this.cwd;
    }
    const e = entry.readlinkSync();
    return withFileTypes ? e : e == null ? void 0 : e.fullpath();
  }
  async realpath(entry = this.cwd, { withFileTypes } = {
    withFileTypes: false
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      withFileTypes = entry.withFileTypes;
      entry = this.cwd;
    }
    const e = await entry.realpath();
    return withFileTypes ? e : e == null ? void 0 : e.fullpath();
  }
  realpathSync(entry = this.cwd, { withFileTypes } = {
    withFileTypes: false
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      withFileTypes = entry.withFileTypes;
      entry = this.cwd;
    }
    const e = entry.realpathSync();
    return withFileTypes ? e : e == null ? void 0 : e.fullpath();
  }
  async walk(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    const results = [];
    if (!filter2 || filter2(entry)) {
      results.push(withFileTypes ? entry : entry.fullpath());
    }
    const dirs = /* @__PURE__ */ new Set();
    const walk = (dir, cb) => {
      dirs.add(dir);
      dir.readdirCB((er, entries) => {
        if (er) {
          return cb(er);
        }
        let len = entries.length;
        if (!len)
          return cb();
        const next = () => {
          if (--len === 0) {
            cb();
          }
        };
        for (const e of entries) {
          if (!filter2 || filter2(e)) {
            results.push(withFileTypes ? e : e.fullpath());
          }
          if (follow && e.isSymbolicLink()) {
            e.realpath().then((r) => (r == null ? void 0 : r.isUnknown()) ? r.lstat() : r).then((r) => (r == null ? void 0 : r.shouldWalk(dirs, walkFilter)) ? walk(r, next) : next());
          } else {
            if (e.shouldWalk(dirs, walkFilter)) {
              walk(e, next);
            } else {
              next();
            }
          }
        }
      }, true);
    };
    const start = entry;
    return new Promise((res, rej) => {
      walk(start, (er) => {
        if (er)
          return rej(er);
        res(results);
      });
    });
  }
  walkSync(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    const results = [];
    if (!filter2 || filter2(entry)) {
      results.push(withFileTypes ? entry : entry.fullpath());
    }
    const dirs = /* @__PURE__ */ new Set([entry]);
    for (const dir of dirs) {
      const entries = dir.readdirSync();
      for (const e of entries) {
        if (!filter2 || filter2(e)) {
          results.push(withFileTypes ? e : e.fullpath());
        }
        let r = e;
        if (e.isSymbolicLink()) {
          if (!(follow && (r = e.realpathSync())))
            continue;
          if (r.isUnknown())
            r.lstatSync();
        }
        if (r.shouldWalk(dirs, walkFilter)) {
          dirs.add(r);
        }
      }
    }
    return results;
  }
  /**
   * Support for `for await`
   *
   * Alias for {@link PathScurryBase.iterate}
   *
   * Note: As of Node 19, this is very slow, compared to other methods of
   * walking.  Consider using {@link PathScurryBase.stream} if memory overhead
   * and backpressure are concerns, or {@link PathScurryBase.walk} if not.
   */
  [Symbol.asyncIterator]() {
    return this.iterate();
  }
  iterate(entry = this.cwd, options = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      options = entry;
      entry = this.cwd;
    }
    return this.stream(entry, options)[Symbol.asyncIterator]();
  }
  /**
   * Iterating over a PathScurry performs a synchronous walk.
   *
   * Alias for {@link PathScurryBase.iterateSync}
   */
  [Symbol.iterator]() {
    return this.iterateSync();
  }
  *iterateSync(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    if (!filter2 || filter2(entry)) {
      yield withFileTypes ? entry : entry.fullpath();
    }
    const dirs = /* @__PURE__ */ new Set([entry]);
    for (const dir of dirs) {
      const entries = dir.readdirSync();
      for (const e of entries) {
        if (!filter2 || filter2(e)) {
          yield withFileTypes ? e : e.fullpath();
        }
        let r = e;
        if (e.isSymbolicLink()) {
          if (!(follow && (r = e.realpathSync())))
            continue;
          if (r.isUnknown())
            r.lstatSync();
        }
        if (r.shouldWalk(dirs, walkFilter)) {
          dirs.add(r);
        }
      }
    }
  }
  stream(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    const results = new Minipass({ objectMode: true });
    if (!filter2 || filter2(entry)) {
      results.write(withFileTypes ? entry : entry.fullpath());
    }
    const dirs = /* @__PURE__ */ new Set();
    const queue = [entry];
    let processing = 0;
    const process2 = () => {
      let paused = false;
      while (!paused) {
        const dir = queue.shift();
        if (!dir) {
          if (processing === 0)
            results.end();
          return;
        }
        processing++;
        dirs.add(dir);
        const onReaddir = (er, entries, didRealpaths = false) => {
          if (er)
            return results.emit("error", er);
          if (follow && !didRealpaths) {
            const promises = [];
            for (const e of entries) {
              if (e.isSymbolicLink()) {
                promises.push(e.realpath().then((r) => (r == null ? void 0 : r.isUnknown()) ? r.lstat() : r));
              }
            }
            if (promises.length) {
              Promise.all(promises).then(() => onReaddir(null, entries, true));
              return;
            }
          }
          for (const e of entries) {
            if (e && (!filter2 || filter2(e))) {
              if (!results.write(withFileTypes ? e : e.fullpath())) {
                paused = true;
              }
            }
          }
          processing--;
          for (const e of entries) {
            const r = e.realpathCached() || e;
            if (r.shouldWalk(dirs, walkFilter)) {
              queue.push(r);
            }
          }
          if (paused && !results.flowing) {
            results.once("drain", process2);
          } else if (!sync2) {
            process2();
          }
        };
        let sync2 = true;
        dir.readdirCB(onReaddir, true);
        sync2 = false;
      }
    };
    process2();
    return results;
  }
  streamSync(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    const results = new Minipass({ objectMode: true });
    const dirs = /* @__PURE__ */ new Set();
    if (!filter2 || filter2(entry)) {
      results.write(withFileTypes ? entry : entry.fullpath());
    }
    const queue = [entry];
    let processing = 0;
    const process2 = () => {
      let paused = false;
      while (!paused) {
        const dir = queue.shift();
        if (!dir) {
          if (processing === 0)
            results.end();
          return;
        }
        processing++;
        dirs.add(dir);
        const entries = dir.readdirSync();
        for (const e of entries) {
          if (!filter2 || filter2(e)) {
            if (!results.write(withFileTypes ? e : e.fullpath())) {
              paused = true;
            }
          }
        }
        processing--;
        for (const e of entries) {
          let r = e;
          if (e.isSymbolicLink()) {
            if (!(follow && (r = e.realpathSync())))
              continue;
            if (r.isUnknown())
              r.lstatSync();
          }
          if (r.shouldWalk(dirs, walkFilter)) {
            queue.push(r);
          }
        }
      }
      if (paused && !results.flowing)
        results.once("drain", process2);
    };
    process2();
    return results;
  }
  chdir(path4 = this.cwd) {
    const oldCwd = this.cwd;
    this.cwd = typeof path4 === "string" ? this.cwd.resolve(path4) : path4;
    this.cwd[setAsCwd](oldCwd);
  }
};
_resolveCache = new WeakMap();
_resolvePosixCache = new WeakMap();
_children2 = new WeakMap();
_fs2 = new WeakMap();
var PathScurryWin32 = class extends PathScurryBase {
  /**
   * separator for generating path strings
   */
  sep = "\\";
  constructor(cwd = process.cwd(), opts = {}) {
    const { nocase = true } = opts;
    super(cwd, import_path.win32, "\\", { ...opts, nocase });
    this.nocase = nocase;
    for (let p = this.cwd; p; p = p.parent) {
      p.nocase = this.nocase;
    }
  }
  /**
   * @internal
   */
  parseRootPath(dir) {
    return import_path.win32.parse(dir).root.toUpperCase();
  }
  /**
   * @internal
   */
  newRoot(fs6) {
    return new PathWin32(this.rootPath, IFDIR, void 0, this.roots, this.nocase, this.childrenCache(), { fs: fs6 });
  }
  /**
   * Return true if the provided path string is an absolute path
   */
  isAbsolute(p) {
    return p.startsWith("/") || p.startsWith("\\") || /^[a-z]:(\/|\\)/i.test(p);
  }
};
var PathScurryPosix = class extends PathScurryBase {
  /**
   * separator for generating path strings
   */
  sep = "/";
  constructor(cwd = process.cwd(), opts = {}) {
    const { nocase = false } = opts;
    super(cwd, import_path.posix, "/", { ...opts, nocase });
    this.nocase = nocase;
  }
  /**
   * @internal
   */
  parseRootPath(_dir) {
    return "/";
  }
  /**
   * @internal
   */
  newRoot(fs6) {
    return new PathPosix(this.rootPath, IFDIR, void 0, this.roots, this.nocase, this.childrenCache(), { fs: fs6 });
  }
  /**
   * Return true if the provided path string is an absolute path
   */
  isAbsolute(p) {
    return p.startsWith("/");
  }
};
var PathScurryDarwin = class extends PathScurryPosix {
  constructor(cwd = process.cwd(), opts = {}) {
    const { nocase = true } = opts;
    super(cwd, { ...opts, nocase });
  }
};
var Path = process.platform === "win32" ? PathWin32 : PathPosix;
var PathScurry = process.platform === "win32" ? PathScurryWin32 : process.platform === "darwin" ? PathScurryDarwin : PathScurryPosix;

// node_modules/glob/dist/esm/glob.js
var import_url2 = require("url");

// node_modules/glob/dist/esm/pattern.js
var isPatternList = (pl) => pl.length >= 1;
var isGlobList = (gl) => gl.length >= 1;
var _patternList, _globList, _index, _platform, _rest, _globString, _isDrive, _isUNC, _isAbsolute, _followGlobstar;
var _Pattern = class _Pattern {
  constructor(patternList, globList, index, platform) {
    __privateAdd(this, _patternList, void 0);
    __privateAdd(this, _globList, void 0);
    __privateAdd(this, _index, void 0);
    __publicField(this, "length");
    __privateAdd(this, _platform, void 0);
    __privateAdd(this, _rest, void 0);
    __privateAdd(this, _globString, void 0);
    __privateAdd(this, _isDrive, void 0);
    __privateAdd(this, _isUNC, void 0);
    __privateAdd(this, _isAbsolute, void 0);
    __privateAdd(this, _followGlobstar, true);
    if (!isPatternList(patternList)) {
      throw new TypeError("empty pattern list");
    }
    if (!isGlobList(globList)) {
      throw new TypeError("empty glob list");
    }
    if (globList.length !== patternList.length) {
      throw new TypeError("mismatched pattern list and glob list lengths");
    }
    this.length = patternList.length;
    if (index < 0 || index >= this.length) {
      throw new TypeError("index out of range");
    }
    __privateSet(this, _patternList, patternList);
    __privateSet(this, _globList, globList);
    __privateSet(this, _index, index);
    __privateSet(this, _platform, platform);
    if (__privateGet(this, _index) === 0) {
      if (this.isUNC()) {
        const [p0, p1, p2, p3, ...prest] = __privateGet(this, _patternList);
        const [g0, g1, g2, g3, ...grest] = __privateGet(this, _globList);
        if (prest[0] === "") {
          prest.shift();
          grest.shift();
        }
        const p = [p0, p1, p2, p3, ""].join("/");
        const g = [g0, g1, g2, g3, ""].join("/");
        __privateSet(this, _patternList, [p, ...prest]);
        __privateSet(this, _globList, [g, ...grest]);
        this.length = __privateGet(this, _patternList).length;
      } else if (this.isDrive() || this.isAbsolute()) {
        const [p1, ...prest] = __privateGet(this, _patternList);
        const [g1, ...grest] = __privateGet(this, _globList);
        if (prest[0] === "") {
          prest.shift();
          grest.shift();
        }
        const p = p1 + "/";
        const g = g1 + "/";
        __privateSet(this, _patternList, [p, ...prest]);
        __privateSet(this, _globList, [g, ...grest]);
        this.length = __privateGet(this, _patternList).length;
      }
    }
  }
  /**
   * The first entry in the parsed list of patterns
   */
  pattern() {
    return __privateGet(this, _patternList)[__privateGet(this, _index)];
  }
  /**
   * true of if pattern() returns a string
   */
  isString() {
    return typeof __privateGet(this, _patternList)[__privateGet(this, _index)] === "string";
  }
  /**
   * true of if pattern() returns GLOBSTAR
   */
  isGlobstar() {
    return __privateGet(this, _patternList)[__privateGet(this, _index)] === GLOBSTAR;
  }
  /**
   * true if pattern() returns a regexp
   */
  isRegExp() {
    return __privateGet(this, _patternList)[__privateGet(this, _index)] instanceof RegExp;
  }
  /**
   * The /-joined set of glob parts that make up this pattern
   */
  globString() {
    return __privateSet(this, _globString, __privateGet(this, _globString) || (__privateGet(this, _index) === 0 ? this.isAbsolute() ? __privateGet(this, _globList)[0] + __privateGet(this, _globList).slice(1).join("/") : __privateGet(this, _globList).join("/") : __privateGet(this, _globList).slice(__privateGet(this, _index)).join("/")));
  }
  /**
   * true if there are more pattern parts after this one
   */
  hasMore() {
    return this.length > __privateGet(this, _index) + 1;
  }
  /**
   * The rest of the pattern after this part, or null if this is the end
   */
  rest() {
    if (__privateGet(this, _rest) !== void 0)
      return __privateGet(this, _rest);
    if (!this.hasMore())
      return __privateSet(this, _rest, null);
    __privateSet(this, _rest, new _Pattern(__privateGet(this, _patternList), __privateGet(this, _globList), __privateGet(this, _index) + 1, __privateGet(this, _platform)));
    __privateSet(__privateGet(this, _rest), _isAbsolute, __privateGet(this, _isAbsolute));
    __privateSet(__privateGet(this, _rest), _isUNC, __privateGet(this, _isUNC));
    __privateSet(__privateGet(this, _rest), _isDrive, __privateGet(this, _isDrive));
    return __privateGet(this, _rest);
  }
  /**
   * true if the pattern represents a //unc/path/ on windows
   */
  isUNC() {
    const pl = __privateGet(this, _patternList);
    return __privateGet(this, _isUNC) !== void 0 ? __privateGet(this, _isUNC) : __privateSet(this, _isUNC, __privateGet(this, _platform) === "win32" && __privateGet(this, _index) === 0 && pl[0] === "" && pl[1] === "" && typeof pl[2] === "string" && !!pl[2] && typeof pl[3] === "string" && !!pl[3]);
  }
  // pattern like C:/...
  // split = ['C:', ...]
  // XXX: would be nice to handle patterns like `c:*` to test the cwd
  // in c: for *, but I don't know of a way to even figure out what that
  // cwd is without actually chdir'ing into it?
  /**
   * True if the pattern starts with a drive letter on Windows
   */
  isDrive() {
    const pl = __privateGet(this, _patternList);
    return __privateGet(this, _isDrive) !== void 0 ? __privateGet(this, _isDrive) : __privateSet(this, _isDrive, __privateGet(this, _platform) === "win32" && __privateGet(this, _index) === 0 && this.length > 1 && typeof pl[0] === "string" && /^[a-z]:$/i.test(pl[0]));
  }
  // pattern = '/' or '/...' or '/x/...'
  // split = ['', ''] or ['', ...] or ['', 'x', ...]
  // Drive and UNC both considered absolute on windows
  /**
   * True if the pattern is rooted on an absolute path
   */
  isAbsolute() {
    const pl = __privateGet(this, _patternList);
    return __privateGet(this, _isAbsolute) !== void 0 ? __privateGet(this, _isAbsolute) : __privateSet(this, _isAbsolute, pl[0] === "" && pl.length > 1 || this.isDrive() || this.isUNC());
  }
  /**
   * consume the root of the pattern, and return it
   */
  root() {
    const p = __privateGet(this, _patternList)[0];
    return typeof p === "string" && this.isAbsolute() && __privateGet(this, _index) === 0 ? p : "";
  }
  /**
   * Check to see if the current globstar pattern is allowed to follow
   * a symbolic link.
   */
  checkFollowGlobstar() {
    return !(__privateGet(this, _index) === 0 || !this.isGlobstar() || !__privateGet(this, _followGlobstar));
  }
  /**
   * Mark that the current globstar pattern is following a symbolic link
   */
  markFollowGlobstar() {
    if (__privateGet(this, _index) === 0 || !this.isGlobstar() || !__privateGet(this, _followGlobstar))
      return false;
    __privateSet(this, _followGlobstar, false);
    return true;
  }
};
_patternList = new WeakMap();
_globList = new WeakMap();
_index = new WeakMap();
_platform = new WeakMap();
_rest = new WeakMap();
_globString = new WeakMap();
_isDrive = new WeakMap();
_isUNC = new WeakMap();
_isAbsolute = new WeakMap();
_followGlobstar = new WeakMap();
var Pattern = _Pattern;

// node_modules/glob/dist/esm/ignore.js
var defaultPlatform2 = typeof process === "object" && process && typeof process.platform === "string" ? process.platform : "linux";
var Ignore = class {
  relative;
  relativeChildren;
  absolute;
  absoluteChildren;
  constructor(ignored, { nobrace, nocase, noext, noglobstar, platform = defaultPlatform2 }) {
    this.relative = [];
    this.absolute = [];
    this.relativeChildren = [];
    this.absoluteChildren = [];
    const mmopts = {
      dot: true,
      nobrace,
      nocase,
      noext,
      noglobstar,
      optimizationLevel: 2,
      platform,
      nocomment: true,
      nonegate: true
    };
    for (const ign of ignored) {
      const mm = new Minimatch(ign, mmopts);
      for (let i = 0; i < mm.set.length; i++) {
        const parsed = mm.set[i];
        const globParts = mm.globParts[i];
        if (!parsed || !globParts) {
          throw new Error("invalid pattern object");
        }
        const p = new Pattern(parsed, globParts, 0, platform);
        const m = new Minimatch(p.globString(), mmopts);
        const children = globParts[globParts.length - 1] === "**";
        const absolute = p.isAbsolute();
        if (absolute)
          this.absolute.push(m);
        else
          this.relative.push(m);
        if (children) {
          if (absolute)
            this.absoluteChildren.push(m);
          else
            this.relativeChildren.push(m);
        }
      }
    }
  }
  ignored(p) {
    const fullpath = p.fullpath();
    const fullpaths = `${fullpath}/`;
    const relative = p.relative() || ".";
    const relatives = `${relative}/`;
    for (const m of this.relative) {
      if (m.match(relative) || m.match(relatives))
        return true;
    }
    for (const m of this.absolute) {
      if (m.match(fullpath) || m.match(fullpaths))
        return true;
    }
    return false;
  }
  childrenIgnored(p) {
    const fullpath = p.fullpath() + "/";
    const relative = (p.relative() || ".") + "/";
    for (const m of this.relativeChildren) {
      if (m.match(relative))
        return true;
    }
    for (const m of this.absoluteChildren) {
      if (m.match(fullpath))
        return true;
    }
    return false;
  }
};

// node_modules/glob/dist/esm/processor.js
var HasWalkedCache = class _HasWalkedCache {
  store;
  constructor(store = /* @__PURE__ */ new Map()) {
    this.store = store;
  }
  copy() {
    return new _HasWalkedCache(new Map(this.store));
  }
  hasWalked(target, pattern) {
    var _a2;
    return (_a2 = this.store.get(target.fullpath())) == null ? void 0 : _a2.has(pattern.globString());
  }
  storeWalked(target, pattern) {
    const fullpath = target.fullpath();
    const cached = this.store.get(fullpath);
    if (cached)
      cached.add(pattern.globString());
    else
      this.store.set(fullpath, /* @__PURE__ */ new Set([pattern.globString()]));
  }
};
var MatchRecord = class {
  store = /* @__PURE__ */ new Map();
  add(target, absolute, ifDir) {
    const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);
    const current = this.store.get(target);
    this.store.set(target, current === void 0 ? n : n & current);
  }
  // match, absolute, ifdir
  entries() {
    return [...this.store.entries()].map(([path4, n]) => [
      path4,
      !!(n & 2),
      !!(n & 1)
    ]);
  }
};
var SubWalks = class {
  store = /* @__PURE__ */ new Map();
  add(target, pattern) {
    if (!target.canReaddir()) {
      return;
    }
    const subs = this.store.get(target);
    if (subs) {
      if (!subs.find((p) => p.globString() === pattern.globString())) {
        subs.push(pattern);
      }
    } else
      this.store.set(target, [pattern]);
  }
  get(target) {
    const subs = this.store.get(target);
    if (!subs) {
      throw new Error("attempting to walk unknown path");
    }
    return subs;
  }
  entries() {
    return this.keys().map((k) => [k, this.store.get(k)]);
  }
  keys() {
    return [...this.store.keys()].filter((t) => t.canReaddir());
  }
};
var Processor = class _Processor {
  hasWalkedCache;
  matches = new MatchRecord();
  subwalks = new SubWalks();
  patterns;
  follow;
  dot;
  opts;
  constructor(opts, hasWalkedCache) {
    this.opts = opts;
    this.follow = !!opts.follow;
    this.dot = !!opts.dot;
    this.hasWalkedCache = hasWalkedCache ? hasWalkedCache.copy() : new HasWalkedCache();
  }
  processPatterns(target, patterns) {
    this.patterns = patterns;
    const processingSet = patterns.map((p) => [target, p]);
    for (let [t, pattern] of processingSet) {
      this.hasWalkedCache.storeWalked(t, pattern);
      const root = pattern.root();
      const absolute = pattern.isAbsolute() && this.opts.absolute !== false;
      if (root) {
        t = t.resolve(root === "/" && this.opts.root !== void 0 ? this.opts.root : root);
        const rest2 = pattern.rest();
        if (!rest2) {
          this.matches.add(t, true, false);
          continue;
        } else {
          pattern = rest2;
        }
      }
      if (t.isENOENT())
        continue;
      let p;
      let rest;
      let changed = false;
      while (typeof (p = pattern.pattern()) === "string" && (rest = pattern.rest())) {
        const c = t.resolve(p);
        t = c;
        pattern = rest;
        changed = true;
      }
      p = pattern.pattern();
      rest = pattern.rest();
      if (changed) {
        if (this.hasWalkedCache.hasWalked(t, pattern))
          continue;
        this.hasWalkedCache.storeWalked(t, pattern);
      }
      if (typeof p === "string") {
        const ifDir = p === ".." || p === "" || p === ".";
        this.matches.add(t.resolve(p), absolute, ifDir);
        continue;
      } else if (p === GLOBSTAR) {
        if (!t.isSymbolicLink() || this.follow || pattern.checkFollowGlobstar()) {
          this.subwalks.add(t, pattern);
        }
        const rp = rest == null ? void 0 : rest.pattern();
        const rrest = rest == null ? void 0 : rest.rest();
        if (!rest || (rp === "" || rp === ".") && !rrest) {
          this.matches.add(t, absolute, rp === "" || rp === ".");
        } else {
          if (rp === "..") {
            const tp = t.parent || t;
            if (!rrest)
              this.matches.add(tp, absolute, true);
            else if (!this.hasWalkedCache.hasWalked(tp, rrest)) {
              this.subwalks.add(tp, rrest);
            }
          }
        }
      } else if (p instanceof RegExp) {
        this.subwalks.add(t, pattern);
      }
    }
    return this;
  }
  subwalkTargets() {
    return this.subwalks.keys();
  }
  child() {
    return new _Processor(this.opts, this.hasWalkedCache);
  }
  // return a new Processor containing the subwalks for each
  // child entry, and a set of matches, and
  // a hasWalkedCache that's a copy of this one
  // then we're going to call
  filterEntries(parent, entries) {
    const patterns = this.subwalks.get(parent);
    const results = this.child();
    for (const e of entries) {
      for (const pattern of patterns) {
        const absolute = pattern.isAbsolute();
        const p = pattern.pattern();
        const rest = pattern.rest();
        if (p === GLOBSTAR) {
          results.testGlobstar(e, pattern, rest, absolute);
        } else if (p instanceof RegExp) {
          results.testRegExp(e, p, rest, absolute);
        } else {
          results.testString(e, p, rest, absolute);
        }
      }
    }
    return results;
  }
  testGlobstar(e, pattern, rest, absolute) {
    if (this.dot || !e.name.startsWith(".")) {
      if (!pattern.hasMore()) {
        this.matches.add(e, absolute, false);
      }
      if (e.canReaddir()) {
        if (this.follow || !e.isSymbolicLink()) {
          this.subwalks.add(e, pattern);
        } else if (e.isSymbolicLink()) {
          if (rest && pattern.checkFollowGlobstar()) {
            this.subwalks.add(e, rest);
          } else if (pattern.markFollowGlobstar()) {
            this.subwalks.add(e, pattern);
          }
        }
      }
    }
    if (rest) {
      const rp = rest.pattern();
      if (typeof rp === "string" && // dots and empty were handled already
      rp !== ".." && rp !== "" && rp !== ".") {
        this.testString(e, rp, rest.rest(), absolute);
      } else if (rp === "..") {
        const ep = e.parent || e;
        this.subwalks.add(ep, rest);
      } else if (rp instanceof RegExp) {
        this.testRegExp(e, rp, rest.rest(), absolute);
      }
    }
  }
  testRegExp(e, p, rest, absolute) {
    if (!p.test(e.name))
      return;
    if (!rest) {
      this.matches.add(e, absolute, false);
    } else {
      this.subwalks.add(e, rest);
    }
  }
  testString(e, p, rest, absolute) {
    if (!e.isNamed(p))
      return;
    if (!rest) {
      this.matches.add(e, absolute, false);
    } else {
      this.subwalks.add(e, rest);
    }
  }
};

// node_modules/glob/dist/esm/walker.js
var makeIgnore = (ignore, opts) => typeof ignore === "string" ? new Ignore([ignore], opts) : Array.isArray(ignore) ? new Ignore(ignore, opts) : ignore;
var _onResume, _ignore, _sep, _ignored, ignored_fn, _childrenIgnored, childrenIgnored_fn;
var GlobUtil = class {
  constructor(patterns, path4, opts) {
    __privateAdd(this, _ignored);
    __privateAdd(this, _childrenIgnored);
    __publicField(this, "path");
    __publicField(this, "patterns");
    __publicField(this, "opts");
    __publicField(this, "seen", /* @__PURE__ */ new Set());
    __publicField(this, "paused", false);
    __publicField(this, "aborted", false);
    __privateAdd(this, _onResume, []);
    __privateAdd(this, _ignore, void 0);
    __privateAdd(this, _sep, void 0);
    __publicField(this, "signal");
    __publicField(this, "maxDepth");
    this.patterns = patterns;
    this.path = path4;
    this.opts = opts;
    __privateSet(this, _sep, !opts.posix && opts.platform === "win32" ? "\\" : "/");
    if (opts.ignore) {
      __privateSet(this, _ignore, makeIgnore(opts.ignore, opts));
    }
    this.maxDepth = opts.maxDepth || Infinity;
    if (opts.signal) {
      this.signal = opts.signal;
      this.signal.addEventListener("abort", () => {
        __privateGet(this, _onResume).length = 0;
      });
    }
  }
  // backpressure mechanism
  pause() {
    this.paused = true;
  }
  resume() {
    var _a2;
    if ((_a2 = this.signal) == null ? void 0 : _a2.aborted)
      return;
    this.paused = false;
    let fn = void 0;
    while (!this.paused && (fn = __privateGet(this, _onResume).shift())) {
      fn();
    }
  }
  onResume(fn) {
    var _a2;
    if ((_a2 = this.signal) == null ? void 0 : _a2.aborted)
      return;
    if (!this.paused) {
      fn();
    } else {
      __privateGet(this, _onResume).push(fn);
    }
  }
  // do the requisite realpath/stat checking, and return the path
  // to add or undefined to filter it out.
  async matchCheck(e, ifDir) {
    if (ifDir && this.opts.nodir)
      return void 0;
    let rpc;
    if (this.opts.realpath) {
      rpc = e.realpathCached() || await e.realpath();
      if (!rpc)
        return void 0;
      e = rpc;
    }
    const needStat = e.isUnknown() || this.opts.stat;
    return this.matchCheckTest(needStat ? await e.lstat() : e, ifDir);
  }
  matchCheckTest(e, ifDir) {
    return e && (this.maxDepth === Infinity || e.depth() <= this.maxDepth) && (!ifDir || e.canReaddir()) && (!this.opts.nodir || !e.isDirectory()) && !__privateMethod(this, _ignored, ignored_fn).call(this, e) ? e : void 0;
  }
  matchCheckSync(e, ifDir) {
    if (ifDir && this.opts.nodir)
      return void 0;
    let rpc;
    if (this.opts.realpath) {
      rpc = e.realpathCached() || e.realpathSync();
      if (!rpc)
        return void 0;
      e = rpc;
    }
    const needStat = e.isUnknown() || this.opts.stat;
    return this.matchCheckTest(needStat ? e.lstatSync() : e, ifDir);
  }
  matchFinish(e, absolute) {
    if (__privateMethod(this, _ignored, ignored_fn).call(this, e))
      return;
    const abs = this.opts.absolute === void 0 ? absolute : this.opts.absolute;
    this.seen.add(e);
    const mark = this.opts.mark && e.isDirectory() ? __privateGet(this, _sep) : "";
    if (this.opts.withFileTypes) {
      this.matchEmit(e);
    } else if (abs) {
      const abs2 = this.opts.posix ? e.fullpathPosix() : e.fullpath();
      this.matchEmit(abs2 + mark);
    } else {
      const rel = this.opts.posix ? e.relativePosix() : e.relative();
      const pre = this.opts.dotRelative && !rel.startsWith(".." + __privateGet(this, _sep)) ? "." + __privateGet(this, _sep) : "";
      this.matchEmit(!rel ? "." + mark : pre + rel + mark);
    }
  }
  async match(e, absolute, ifDir) {
    const p = await this.matchCheck(e, ifDir);
    if (p)
      this.matchFinish(p, absolute);
  }
  matchSync(e, absolute, ifDir) {
    const p = this.matchCheckSync(e, ifDir);
    if (p)
      this.matchFinish(p, absolute);
  }
  walkCB(target, patterns, cb) {
    var _a2;
    if ((_a2 = this.signal) == null ? void 0 : _a2.aborted)
      cb();
    this.walkCB2(target, patterns, new Processor(this.opts), cb);
  }
  walkCB2(target, patterns, processor, cb) {
    var _a2;
    if (__privateMethod(this, _childrenIgnored, childrenIgnored_fn).call(this, target))
      return cb();
    if ((_a2 = this.signal) == null ? void 0 : _a2.aborted)
      cb();
    if (this.paused) {
      this.onResume(() => this.walkCB2(target, patterns, processor, cb));
      return;
    }
    processor.processPatterns(target, patterns);
    let tasks = 1;
    const next = () => {
      if (--tasks === 0)
        cb();
    };
    for (const [m, absolute, ifDir] of processor.matches.entries()) {
      if (__privateMethod(this, _ignored, ignored_fn).call(this, m))
        continue;
      tasks++;
      this.match(m, absolute, ifDir).then(() => next());
    }
    for (const t of processor.subwalkTargets()) {
      if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
        continue;
      }
      tasks++;
      const childrenCached = t.readdirCached();
      if (t.calledReaddir())
        this.walkCB3(t, childrenCached, processor, next);
      else {
        t.readdirCB((_, entries) => this.walkCB3(t, entries, processor, next), true);
      }
    }
    next();
  }
  walkCB3(target, entries, processor, cb) {
    processor = processor.filterEntries(target, entries);
    let tasks = 1;
    const next = () => {
      if (--tasks === 0)
        cb();
    };
    for (const [m, absolute, ifDir] of processor.matches.entries()) {
      if (__privateMethod(this, _ignored, ignored_fn).call(this, m))
        continue;
      tasks++;
      this.match(m, absolute, ifDir).then(() => next());
    }
    for (const [target2, patterns] of processor.subwalks.entries()) {
      tasks++;
      this.walkCB2(target2, patterns, processor.child(), next);
    }
    next();
  }
  walkCBSync(target, patterns, cb) {
    var _a2;
    if ((_a2 = this.signal) == null ? void 0 : _a2.aborted)
      cb();
    this.walkCB2Sync(target, patterns, new Processor(this.opts), cb);
  }
  walkCB2Sync(target, patterns, processor, cb) {
    var _a2;
    if (__privateMethod(this, _childrenIgnored, childrenIgnored_fn).call(this, target))
      return cb();
    if ((_a2 = this.signal) == null ? void 0 : _a2.aborted)
      cb();
    if (this.paused) {
      this.onResume(() => this.walkCB2Sync(target, patterns, processor, cb));
      return;
    }
    processor.processPatterns(target, patterns);
    let tasks = 1;
    const next = () => {
      if (--tasks === 0)
        cb();
    };
    for (const [m, absolute, ifDir] of processor.matches.entries()) {
      if (__privateMethod(this, _ignored, ignored_fn).call(this, m))
        continue;
      this.matchSync(m, absolute, ifDir);
    }
    for (const t of processor.subwalkTargets()) {
      if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
        continue;
      }
      tasks++;
      const children = t.readdirSync();
      this.walkCB3Sync(t, children, processor, next);
    }
    next();
  }
  walkCB3Sync(target, entries, processor, cb) {
    processor = processor.filterEntries(target, entries);
    let tasks = 1;
    const next = () => {
      if (--tasks === 0)
        cb();
    };
    for (const [m, absolute, ifDir] of processor.matches.entries()) {
      if (__privateMethod(this, _ignored, ignored_fn).call(this, m))
        continue;
      this.matchSync(m, absolute, ifDir);
    }
    for (const [target2, patterns] of processor.subwalks.entries()) {
      tasks++;
      this.walkCB2Sync(target2, patterns, processor.child(), next);
    }
    next();
  }
};
_onResume = new WeakMap();
_ignore = new WeakMap();
_sep = new WeakMap();
_ignored = new WeakSet();
ignored_fn = function(path4) {
  var _a2, _b;
  return this.seen.has(path4) || !!((_b = (_a2 = __privateGet(this, _ignore)) == null ? void 0 : _a2.ignored) == null ? void 0 : _b.call(_a2, path4));
};
_childrenIgnored = new WeakSet();
childrenIgnored_fn = function(path4) {
  var _a2, _b;
  return !!((_b = (_a2 = __privateGet(this, _ignore)) == null ? void 0 : _a2.childrenIgnored) == null ? void 0 : _b.call(_a2, path4));
};
var GlobWalker = class extends GlobUtil {
  matches;
  constructor(patterns, path4, opts) {
    super(patterns, path4, opts);
    this.matches = /* @__PURE__ */ new Set();
  }
  matchEmit(e) {
    this.matches.add(e);
  }
  async walk() {
    var _a2;
    if ((_a2 = this.signal) == null ? void 0 : _a2.aborted)
      throw this.signal.reason;
    if (this.path.isUnknown()) {
      await this.path.lstat();
    }
    await new Promise((res, rej) => {
      this.walkCB(this.path, this.patterns, () => {
        var _a3;
        if ((_a3 = this.signal) == null ? void 0 : _a3.aborted) {
          rej(this.signal.reason);
        } else {
          res(this.matches);
        }
      });
    });
    return this.matches;
  }
  walkSync() {
    var _a2;
    if ((_a2 = this.signal) == null ? void 0 : _a2.aborted)
      throw this.signal.reason;
    if (this.path.isUnknown()) {
      this.path.lstatSync();
    }
    this.walkCBSync(this.path, this.patterns, () => {
      var _a3;
      if ((_a3 = this.signal) == null ? void 0 : _a3.aborted)
        throw this.signal.reason;
    });
    return this.matches;
  }
};
var GlobStream = class extends GlobUtil {
  results;
  constructor(patterns, path4, opts) {
    super(patterns, path4, opts);
    this.results = new Minipass({
      signal: this.signal,
      objectMode: true
    });
    this.results.on("drain", () => this.resume());
    this.results.on("resume", () => this.resume());
  }
  matchEmit(e) {
    this.results.write(e);
    if (!this.results.flowing)
      this.pause();
  }
  stream() {
    const target = this.path;
    if (target.isUnknown()) {
      target.lstat().then(() => {
        this.walkCB(target, this.patterns, () => this.results.end());
      });
    } else {
      this.walkCB(target, this.patterns, () => this.results.end());
    }
    return this.results;
  }
  streamSync() {
    if (this.path.isUnknown()) {
      this.path.lstatSync();
    }
    this.walkCBSync(this.path, this.patterns, () => this.results.end());
    return this.results;
  }
};

// node_modules/glob/dist/esm/glob.js
var defaultPlatform3 = typeof process === "object" && process && typeof process.platform === "string" ? process.platform : "linux";
var Glob = class {
  absolute;
  cwd;
  root;
  dot;
  dotRelative;
  follow;
  ignore;
  magicalBraces;
  mark;
  matchBase;
  maxDepth;
  nobrace;
  nocase;
  nodir;
  noext;
  noglobstar;
  pattern;
  platform;
  realpath;
  scurry;
  stat;
  signal;
  windowsPathsNoEscape;
  withFileTypes;
  /**
   * The options provided to the constructor.
   */
  opts;
  /**
   * An array of parsed immutable {@link Pattern} objects.
   */
  patterns;
  /**
   * All options are stored as properties on the `Glob` object.
   *
   * See {@link GlobOptions} for full options descriptions.
   *
   * Note that a previous `Glob` object can be passed as the
   * `GlobOptions` to another `Glob` instantiation to re-use settings
   * and caches with a new pattern.
   *
   * Traversal functions can be called multiple times to run the walk
   * again.
   */
  constructor(pattern, opts) {
    if (!opts)
      throw new TypeError("glob options required");
    this.withFileTypes = !!opts.withFileTypes;
    this.signal = opts.signal;
    this.follow = !!opts.follow;
    this.dot = !!opts.dot;
    this.dotRelative = !!opts.dotRelative;
    this.nodir = !!opts.nodir;
    this.mark = !!opts.mark;
    if (!opts.cwd) {
      this.cwd = "";
    } else if (opts.cwd instanceof URL || opts.cwd.startsWith("file://")) {
      opts.cwd = (0, import_url2.fileURLToPath)(opts.cwd);
    }
    this.cwd = opts.cwd || "";
    this.root = opts.root;
    this.magicalBraces = !!opts.magicalBraces;
    this.nobrace = !!opts.nobrace;
    this.noext = !!opts.noext;
    this.realpath = !!opts.realpath;
    this.absolute = opts.absolute;
    this.noglobstar = !!opts.noglobstar;
    this.matchBase = !!opts.matchBase;
    this.maxDepth = typeof opts.maxDepth === "number" ? opts.maxDepth : Infinity;
    this.stat = !!opts.stat;
    this.ignore = opts.ignore;
    if (this.withFileTypes && this.absolute !== void 0) {
      throw new Error("cannot set absolute and withFileTypes:true");
    }
    if (typeof pattern === "string") {
      pattern = [pattern];
    }
    this.windowsPathsNoEscape = !!opts.windowsPathsNoEscape || opts.allowWindowsEscape === false;
    if (this.windowsPathsNoEscape) {
      pattern = pattern.map((p) => p.replace(/\\/g, "/"));
    }
    if (this.matchBase) {
      if (opts.noglobstar) {
        throw new TypeError("base matching requires globstar");
      }
      pattern = pattern.map((p) => p.includes("/") ? p : `./**/${p}`);
    }
    this.pattern = pattern;
    this.platform = opts.platform || defaultPlatform3;
    this.opts = { ...opts, platform: this.platform };
    if (opts.scurry) {
      this.scurry = opts.scurry;
      if (opts.nocase !== void 0 && opts.nocase !== opts.scurry.nocase) {
        throw new Error("nocase option contradicts provided scurry option");
      }
    } else {
      const Scurry = opts.platform === "win32" ? PathScurryWin32 : opts.platform === "darwin" ? PathScurryDarwin : opts.platform ? PathScurryPosix : PathScurry;
      this.scurry = new Scurry(this.cwd, {
        nocase: opts.nocase,
        fs: opts.fs
      });
    }
    this.nocase = this.scurry.nocase;
    const nocaseMagicOnly = this.platform === "darwin" || this.platform === "win32";
    const mmo = {
      // default nocase based on platform
      ...opts,
      dot: this.dot,
      matchBase: this.matchBase,
      nobrace: this.nobrace,
      nocase: this.nocase,
      nocaseMagicOnly,
      nocomment: true,
      noext: this.noext,
      nonegate: true,
      optimizationLevel: 2,
      platform: this.platform,
      windowsPathsNoEscape: this.windowsPathsNoEscape,
      debug: !!this.opts.debug
    };
    const mms = this.pattern.map((p) => new Minimatch(p, mmo));
    const [matchSet, globParts] = mms.reduce((set, m) => {
      set[0].push(...m.set);
      set[1].push(...m.globParts);
      return set;
    }, [[], []]);
    this.patterns = matchSet.map((set, i) => {
      const g = globParts[i];
      if (!g)
        throw new Error("invalid pattern object");
      return new Pattern(set, g, 0, this.platform);
    });
  }
  async walk() {
    return [
      ...await new GlobWalker(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
        platform: this.platform,
        nocase: this.nocase
      }).walk()
    ];
  }
  walkSync() {
    return [
      ...new GlobWalker(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
        platform: this.platform,
        nocase: this.nocase
      }).walkSync()
    ];
  }
  stream() {
    return new GlobStream(this.patterns, this.scurry.cwd, {
      ...this.opts,
      maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
      platform: this.platform,
      nocase: this.nocase
    }).stream();
  }
  streamSync() {
    return new GlobStream(this.patterns, this.scurry.cwd, {
      ...this.opts,
      maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
      platform: this.platform,
      nocase: this.nocase
    }).streamSync();
  }
  /**
   * Default sync iteration function. Returns a Generator that
   * iterates over the results.
   */
  iterateSync() {
    return this.streamSync()[Symbol.iterator]();
  }
  [Symbol.iterator]() {
    return this.iterateSync();
  }
  /**
   * Default async iteration function. Returns an AsyncGenerator that
   * iterates over the results.
   */
  iterate() {
    return this.stream()[Symbol.asyncIterator]();
  }
  [Symbol.asyncIterator]() {
    return this.iterate();
  }
};

// node_modules/glob/dist/esm/has-magic.js
var hasMagic = (pattern, options = {}) => {
  if (!Array.isArray(pattern)) {
    pattern = [pattern];
  }
  for (const p of pattern) {
    if (new Minimatch(p, options).hasMagic())
      return true;
  }
  return false;
};

// node_modules/glob/dist/esm/index.js
function globStreamSync(pattern, options = {}) {
  return new Glob(pattern, options).streamSync();
}
function globStream(pattern, options = {}) {
  return new Glob(pattern, options).stream();
}
function globSync(pattern, options = {}) {
  return new Glob(pattern, options).walkSync();
}
async function glob_(pattern, options = {}) {
  return new Glob(pattern, options).walk();
}
function globIterateSync(pattern, options = {}) {
  return new Glob(pattern, options).iterateSync();
}
function globIterate(pattern, options = {}) {
  return new Glob(pattern, options).iterate();
}
var streamSync = globStreamSync;
var stream = Object.assign(globStream, { sync: globStreamSync });
var iterateSync = globIterateSync;
var iterate = Object.assign(globIterate, {
  sync: globIterateSync
});
var sync = Object.assign(globSync, {
  stream: globStreamSync,
  iterate: globIterateSync
});
var glob = Object.assign(glob_, {
  glob: glob_,
  globSync,
  sync,
  globStream,
  stream,
  globStreamSync,
  streamSync,
  globIterate,
  iterate,
  globIterateSync,
  iterateSync,
  Glob,
  hasMagic,
  escape,
  unescape: unescape2
});
glob.glob = glob;

// src/UploadTestRunCommand.ts
var FormData2 = require_form_data();
var UploadTestRunCommand = class extends Command {
  constructor() {
    super(
      "upload_test_run <xmlfiles>",
      "JUnit/XUnit XML Upload",
      (args) => {
        return args.positional("xmlfiles", {
          describe: `glob JUnit/XUnit XML output file, example: upload_test_run '**/*.xml'`,
          type: "string"
        }).option("milestone_id", {
          alias: "mi",
          describe: "Milestone ID",
          type: "string"
        }).option("milestone_name", {
          alias: "mn",
          describe: "Milestone Name",
          type: "string"
        }).option("plan_id", {
          alias: "pi",
          describe: "Plan ID",
          type: "string"
        }).option("plan_name", {
          alias: "pn",
          describe: "Plan Name",
          type: "string"
        }).option("automation_id", {
          alias: "ai",
          describe: "Automation ID",
          type: "string"
        }).option("automation_name", {
          alias: "an",
          describe: "Automation Name",
          type: "string"
        }).option("run_name", {
          alias: "rn",
          describe: "Run name",
          type: "string"
        }).option("run_result_output_dir", {
          alias: "rr_output_dir",
          describe: "Run results output directory where potential attachments are located",
          type: "string"
        }).option("folder_id", {
          alias: "fi",
          describe: "Folder id",
          type: "string"
        }).option("version2", {
          alias: "v2",
          describe: "Version 2 of Upload",
          boolean: true,
          type: "boolean",
          default: false
        }).option("delimiter", {
          alias: "d",
          describe: "Delimiter",
          type: "string"
        });
      },
      async (args) => {
        try {
          const xmlFilesGlob = args.xmlfiles;
          const runResultOutputDir = args.run_result_output_dir;
          const outputIsDir = runResultOutputDir && fs2.lstatSync(path3.resolve(runResultOutputDir)).isDirectory();
          const runResultOutputDirGlob = outputIsDir ? path3.join(runResultOutputDir, "/**/*") : runResultOutputDir;
          if (!xmlFilesGlob)
            throw new Error("Must supply xmlfiles");
          const projectId = await this.getProjectId(args);
          const xmlFiles = await glob(xmlFilesGlob, { realpath: true });
          if (args.verbose) {
            console.log("XML Glob: ", xmlFilesGlob);
            console.log("Matching files: ", xmlFiles);
          }
          let attachments;
          if (runResultOutputDirGlob) {
            console.log("file glob: ", runResultOutputDirGlob);
            attachments = await glob(runResultOutputDirGlob, {
              nodir: true
            });
            console.log("Attachment files", attachments);
          }
          const response = await this.uploadTestResults(
            args,
            xmlFiles,
            attachments,
            projectId
          );
          console.log(response);
        } catch (error) {
          logError(error);
        }
      }
    );
  }
  async uploadTestResults(args, xmlFiles, attachments = [], projectId) {
    const data = new FormData2();
    if (projectId) {
      data.append("project_id", projectId);
    }
    if (args.plan_id) {
      data.append("plan_id", args.plan_id);
    } else if (args.plan_name) {
      data.append("plan_name", args.plan_name);
    } else if (args.automation_id) {
      data.append("automation_id", args.automation_id);
    } else if (args.automation_name) {
      data.append("automation_name", args.automation_name);
    }
    if (args.run_name) {
      data.append("run_name", args.run_name);
    }
    if (args.milestone_id) {
      data.append("milestone_id", args.milestone_id);
    } else if (args.milestone_name) {
      data.append("milestone_name", args.milestone_name);
    }
    if (args.folder_id) {
      data.append("suite_id", args.folder_id);
    }
    if (args.delimiter) {
      data.append("delimiter", args.delimiter);
    }
    const files = [...xmlFiles, ...attachments];
    if (files.length === 1) {
      data.append("file", fs2.createReadStream(files[0]));
    } else {
      files.forEach((file) => {
        data.append("files[]", fs2.createReadStream(file), path3.basename(file));
      });
      if (args.verbose) {
        console.log("Matching files: ", xmlFiles);
      }
    }
    if (args.verbose) {
      console.log("using new version of upload: ", args.version2);
    }
    const url = args.version2 ? "/import_xml" : "/junit_xml";
    return await (0, import_sdk5.getResponse)(this.client.api, {
      url,
      method: "POST",
      data,
      headers: data.getHeaders()
    });
  }
};

// src/UploadFeatureCommand.ts
var fs3 = __toESM(require("fs"));
var import_sdk6 = __toESM(require_dist());
var FormData3 = require_form_data();
var UploadFeatureCommand = class extends Command {
  constructor() {
    super(
      "upload_feature <files>",
      "Gherkin feature files Upload",
      (args) => {
        return args.positional("files", {
          describe: `glob Gherkin feature file, example: upload_feature '**/*.feature'`,
          type: "string"
        }).option("plan_id", {
          alias: "pi",
          describe: "Plan ID",
          type: "string"
        }).option("plan_name", {
          alias: "pn",
          describe: "Plan Name",
          type: "string"
        }).option("automation_id", {
          alias: "ai",
          describe: "Automation ID",
          type: "string"
        }).option("automation_name", {
          alias: "an",
          describe: "Automation Name",
          type: "string"
        }).option("folder_id", {
          alias: "fi",
          describe: "Folder id",
          type: "string"
        });
      },
      async (args) => {
        try {
          const projectId = await this.getProjectId(args);
          if (args.files) {
            const matches = await glob(args.files, {
              realpath: true
            });
            const response = await this.uploadFeatureFiles(
              args,
              matches,
              projectId
            );
            console.log(response);
          }
        } catch (error) {
          logError(error);
        }
      }
    );
  }
  async uploadFeatureFiles(args, matches, projectId) {
    const data = new FormData3();
    if (projectId) {
      data.append("project_id", projectId);
    }
    if (args.plan_id) {
      data.append("plan_id", args.plan_id);
    } else if (args.plan_name) {
      data.append("plan_name", args.plan_name);
    } else if (args.automation_id) {
      data.append("automation_id", args.automation_id);
    } else if (args.automation_name) {
      data.append("automation_name", args.automation_name);
    }
    if (args.folder_id) {
      data.append("suite_id", args.folder_id);
    }
    if (matches.length > 1) {
      data.append(
        "files[]",
        matches.map((f) => fs3.createReadStream(f))
      );
      if (args.verbose) {
        console.log("Matching files: ", matches);
        console.log("Form data to send: ", data);
      }
    } else if (matches.length === 1) {
      data.append("file", fs3.createReadStream(matches[0]));
    } else {
      throw Error("No matching files");
    }
    return await (0, import_sdk6.getResponse)(this.client.api, {
      url: `/import_feature`,
      method: "POST",
      data,
      headers: data.getHeaders()
    });
  }
};

// src/UploadFeatureResultsCommand.ts
var fs4 = __toESM(require("fs"));
var import_sdk7 = __toESM(require_dist());
var FormData4 = require_form_data();
var UploadFeatureResultsCommand = class extends Command {
  constructor() {
    super(
      "upload_feature_results <files>",
      "Gherkin Result files Upload",
      (args) => {
        return args.positional("files", {
          describe: `glob Gherkin result file, example: upload_feature_results '**/*.json`,
          type: "string"
        }).option("milestone_id", {
          alias: "mi",
          describe: "Milestone ID",
          type: "string"
        }).option("milestone_name", {
          alias: "mn",
          describe: "Milestone Name",
          type: "string"
        }).option("plan_id", {
          alias: "pi",
          describe: "Plan ID",
          type: "string"
        }).option("plan_name", {
          alias: "pn",
          describe: "Plan Name",
          type: "string"
        }).option("automation_id", {
          alias: "ai",
          describe: "Automation ID",
          type: "string"
        }).option("automation_name", {
          alias: "an",
          describe: "Automation Name",
          type: "string"
        }).option("run_name", {
          alias: "rn",
          describe: "Run name",
          type: "string"
        }).option("folder_id", {
          alias: "fi",
          describe: "Folder id",
          type: "string"
        });
      },
      async (args) => {
        try {
          const projectId = await this.getProjectId(args);
          if (args.files) {
            const matches = await glob(args.files, {
              realpath: true
            });
            const response = await this.uploadFeatureResultFiles(
              args,
              matches,
              projectId
            );
            console.log(response);
          }
        } catch (error) {
          logError(error);
        }
      }
    );
  }
  async uploadFeatureResultFiles(args, matches, projectId) {
    const data = new FormData4();
    if (projectId) {
      data.append("project_id", projectId);
    }
    if (args.plan_id) {
      data.append("plan_id", args.plan_id);
    } else if (args.plan_name) {
      data.append("plan_name", args.plan_name);
    } else if (args.automation_id) {
      data.append("automation_id", args.automation_id);
    } else if (args.automation_name) {
      data.append("automation_name", args.automation_name);
    }
    if (args.run_name) {
      data.append("run_name", args.run_name);
    }
    if (args.milestone_id) {
      data.append("milestone_id", args.milestone_id);
    } else if (args.milestone_name) {
      data.append("milestone_name", args.milestone_name);
    }
    if (args.folder_id) {
      data.append("suite_id", args.folder_id);
    }
    if (matches.length > 1) {
      data.append(
        "files[]",
        matches.map((f) => fs4.createReadStream(f))
      );
      if (args.verbose) {
        console.log("Matching files: ", matches);
        console.log("Form data to send: ", data);
      }
    } else if (matches.length === 1) {
      data.append("file", fs4.createReadStream(matches[0]));
    } else {
      throw Error("No matching files");
    }
    return await (0, import_sdk7.getResponse)(this.client.api, {
      url: `/import_feature_results`,
      method: "POST",
      data,
      headers: data.getHeaders()
    });
  }
};

// src/UploadCSVCommand.ts
var fs5 = __toESM(require("fs"));
var import_sdk8 = __toESM(require_dist());
var FormData5 = require_form_data();
var UploadCSVCommand = class extends Command {
  constructor() {
    super(
      "upload_csv <file>",
      "CSV file Upload",
      (args) => {
        return args.positional("file", {
          describe: `global CSV file, example: upload_csv 'test_results.csv'`,
          type: "string"
        }).option("config_file", {
          alias: "cf",
          describe: "CSV upload configuration file with data mapping information",
          type: "string"
        });
      },
      (args) => {
        this.reLogin(args).then(
          () => {
            if (args.file) {
              console.log(args.file);
              glob(args.file, { realpath: true }).then(
                (matches) => {
                  if (args.config_file) {
                    this.uploadCSVFile(
                      args,
                      matches,
                      args.config_file
                    ).then(
                      (response) => {
                        console.log(response);
                      },
                      (error) => {
                        logError(error);
                      }
                    );
                  } else {
                    logError("No config file was provided");
                  }
                },
                (err) => {
                  logError(err);
                }
              );
            }
          },
          (error) => {
            logError(error);
          }
        );
      }
    );
  }
  async uploadCSVFile(args, matches, config2) {
    const url = `/import_data`;
    const data = new FormData5();
    if (matches.length > 1) {
      data.append(
        "file",
        matches.map((f) => fs5.createReadStream(f))
      );
      if (args.verbose) {
        console.log("Matching files: ", matches);
        console.log("Form data to send: ", data);
      }
    } else if (matches.length === 1) {
      data.append("file", fs5.createReadStream(matches[0]));
    } else {
      throw Error("No matching files");
    }
    if (config2) {
      data.append(
        "config",
        JSON.stringify(JSON.parse(fs5.readFileSync(config2, "utf-8")))
      );
    } else {
      throw Error("Config file not found");
    }
    return await (0, import_sdk8.getResponse)(this.client.api, {
      method: "POST",
      url,
      data,
      headers: data.getHeaders()
    });
  }
};

// src/CreateManualRunCommand.ts
var import_sdk9 = __toESM(require_dist());
var CreateManualRunCommand = class extends Command {
  constructor() {
    super(
      "create_manual_run",
      "Create a Plan Test Run for manual execution without uploading test results",
      (args) => {
        return args.option("milestone_id", {
          alias: "mi",
          describe: "Milestone ID",
          type: "string"
        }).option("milestone_name", {
          alias: "mn",
          describe: "Milestone Name",
          type: "string"
        }).option("plan_id", {
          alias: "pi",
          describe: "Plan ID",
          type: "string"
        }).option("plan_name", {
          alias: "pn",
          describe: "Plan Name",
          type: "string"
        }).option("run_name", {
          alias: "rn",
          describe: `Test Run name, example: create_manual_run --run_name 'My_Manual_Run'`,
          type: "string"
        });
      },
      async (args) => {
        try {
          const projectId = await this.getProjectId(args);
          const planId = await this.getId(args, "plan", projectId, false);
          const milestoneId = await this.getId(
            args,
            "milestone",
            projectId,
            false
          );
          const response = await this.createManualRun(
            args,
            planId,
            milestoneId
          );
          console.log(response);
        } catch (error) {
          logError(error);
        }
      }
    );
  }
  async createManualRun(args, planId, milestoneId) {
    const formData = {
      is_complete: 0,
      is_running: 1,
      plan_id: planId,
      project_id: this.projectId,
      start_time: (/* @__PURE__ */ new Date()).toISOString(),
      name: args.run_name,
      milestone_id: milestoneId
    };
    return await (0, import_sdk9.runCreateOne)(formData);
  }
};

// src/RestoreCommand.ts
var import_sdk10 = __toESM(require_dist());
var RestoreCommand = class extends Command {
  constructor() {
    super(
      "restore",
      "Restore plan, suite or test.",
      (args) => {
        return args.option("test_id", {
          alias: "ti",
          describe: "Test ID",
          type: "string"
        }).option("suite_id", {
          alias: "si",
          describe: "Suite to restore test in, optional",
          type: "string"
        }).option("plan_id", {
          alias: "pi",
          describe: "Plan to restore",
          type: "string"
        });
      },
      (args) => {
        this.reLogin(args).then(
          () => {
            if (args.test_id) {
              const data = args.suite_id ? { suite_id: args.suite_id } : void 0;
              this.postRestore("test", args.test_id, data).then(
                (response) => {
                  console.log(response);
                },
                (error) => {
                  logError(error);
                }
              );
            } else if (args.suite_id) {
              const data = args.plan_id ? { plan_id: args.plan_id } : void 0;
              this.postRestore("suite", args.suite_id, data).then(
                (response) => {
                  console.log(response);
                },
                (error) => {
                  logError(error);
                }
              );
            } else if (args.plan_id) {
              this.postRestore("plan", args.plan_id).then(
                (response) => {
                  console.log(response);
                },
                (error) => {
                  logError(error);
                }
              );
            } else {
              logError(
                `plan or test is required. Try adding "--plan_id=<number>" or "--test_id=<number>`
              );
            }
          },
          (error) => {
            logError(error);
          }
        );
      }
    );
  }
  async postRestore(type, id, data) {
    const url = `/${type}/${id}/restore`;
    return await (0, import_sdk10.getResponse)(this.client.api, {
      method: "post",
      url,
      data
    });
  }
};

// src/CreatePlan.ts
var import_sdk11 = __toESM(require_dist());
var CreatePlan = class extends Command {
  constructor() {
    super(
      "create_plan <name>",
      "Create a Test Plan without uploading test results",
      (args) => {
        return args.positional("name", {
          describe: "Name of plan",
          type: "string"
        }).option("duplicates", {
          describe: `Number of items to create`,
          type: "number"
        });
      },
      async (args) => {
        try {
          const projectId = await this.getProjectId(args);
          if (!projectId) {
            logError(
              'Project is required. Try adding "--project_name=<name>" or "--project_id=<number>"'
            );
            return;
          }
          if (!args.name) {
            logError("Plan name is required.");
            return;
          }
          const formData = {
            project_id: projectId,
            name: args.name
          };
          if (args.duplicates) {
            const duplicates = args.duplicates;
            for (let idx = 0; idx < duplicates; idx += 1) {
              formData.name = args.name + " " + idx.toString(10);
              const plan = await (0, import_sdk11.planCreateOne)(formData);
              console.log(plan);
            }
          } else {
            const plan = await (0, import_sdk11.planCreateOne)(formData);
            console.log(plan);
          }
        } catch (error) {
          logError(error);
        }
      }
    );
  }
};

// src/SuiteCommand.ts
var import_sdk12 = __toESM(require_dist());
var SuiteCommand = class extends Command {
  constructor() {
    super(
      "suites",
      "List suites in project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("delete", {
          alias: "dl",
          describe: "delete a suite",
          type: "boolean",
          default: false,
          boolean: true
        }).option("suite_id", {
          alias: "si",
          describe: "Suite to delete",
          type: "string"
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        }).option("plan_id", {
          alias: "pi",
          describe: "Plan ID",
          type: "string"
        });
      },
      async (args) => {
        try {
          await this.reLogin(args);
          const params = this.getParams(args);
          if (args.revision_log) {
            params.revision_log = "true";
          }
          if (!args.delete) {
            const url = (args.plan_id ? `/plan/${args.plan_id}` : "") + `/suite`;
            console.log(url);
            const list = await (0, import_sdk12.suiteGetMany)({ url, params });
            if (args.revision_log) {
              console.log(list);
            } else {
              if (list.total > 0) {
                if (args.verbose) {
                  console.log(list.data);
                } else {
                  console.log(
                    list.data.map((p) => {
                      return { id: p.id, key: p.key, name: p.name };
                    })
                  );
                }
              } else {
                console.log("Result is empty");
              }
            }
          } else {
            const suiteId = args.suite_id ? parseInt(args.suite_id) : void 0;
            if (!suiteId) {
              logError(
                "Suite id is required to perform delete, try adding --suite_id=<number>"
              );
            } else {
              const url = (args.plan_id ? `/plan/${args.plan_id}` : "") + `/suite`;
              console.log(url);
              const result = await (0, import_sdk12.suiteDeleteOne)(suiteId, { url });
              console.log("Delete Success ", result);
            }
          }
        } catch (error) {
          logError(error);
        }
      }
    );
  }
};

// src/TestCommand.ts
var import_sdk13 = __toESM(require_dist());
var TestCommand = class extends Command {
  constructor() {
    super(
      "tests",
      "List tests in project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("delete", {
          alias: "dl",
          describe: "delete a test",
          type: "boolean",
          default: false,
          boolean: true
        }).option("suite_id", {
          alias: "si",
          describe: "Suite test belong to",
          type: "string"
        }).option("test_id", {
          alias: "tc",
          describe: "Test to delete",
          type: "string"
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        }).option("plan_id", {
          alias: "pi",
          describe: "Plan ID",
          type: "string"
        });
      },
      async (args) => {
        try {
          await this.reLogin(args);
          const params = this.getParams(args);
          if (args.revision_log) {
            params.revision_log = "true";
          }
          if (!args.delete) {
            const url = (args.plan_id ? `/plan/${args.plan_id}` : "") + (args.suite_id ? `/suite/${args.suite_id}` : "") + `/test`;
            console.log(url);
            const list = await (0, import_sdk13.testGetMany)({ url, params });
            if (args.revision_log) {
              console.log(list);
            } else {
              if (list.total > 0) {
                console.log(
                  list.data.map((p) => {
                    if (args.params || args.verbose) {
                      return p;
                    } else {
                      return { id: p.id, key: p.key, name: p.name };
                    }
                  })
                );
              } else {
                console.log("Result is empty");
              }
            }
          } else {
            const testId = args.test_id ? parseInt(args.test_id) : void 0;
            if (!testId) {
              logError(
                "Test id is required to perform delete, try adding --test_id=<number>"
              );
            } else {
              const url = (args.suite_id ? `/plan/${args.suite_id}` : "") + `/test`;
              console.log(url);
              const result = await (0, import_sdk13.testDeleteOne)(testId, { url });
              console.log("Delete Success ", result);
            }
          }
        } catch (error) {
          logError(error);
        }
      }
    );
  }
};

// src/RunCommand.ts
var import_sdk14 = __toESM(require_dist());
var RunCommand = class extends Command {
  constructor() {
    super(
      "runs",
      "List runs in project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        }).option("is_manual", {
          alias: "m",
          describe: "Only manual tests",
          type: "boolean",
          default: false,
          boolean: true
        });
      },
      (args) => {
        this.getProjectId(args).then(
          (projectId) => {
            const params = args.params || {};
            if (projectId) {
              params.project_id = projectId;
            }
            if (args.revision_log) {
              params.revision_log = true;
            }
            console.log(params);
            (0, import_sdk14.runGetMany)({ params }).then(
              (list) => {
                if (args.revision_log) {
                  console.log(list);
                } else {
                  if (list.total > 0) {
                    console.log(list.data);
                  } else {
                    console.log("Result is empty");
                  }
                }
              },
              (error) => {
                logError(error);
              }
            );
          },
          (error) => {
            logError(error);
          }
        );
      }
    );
  }
};

// src/DefectCommand.ts
var import_sdk15 = __toESM(require_dist());
var DefectCommand = class extends Command {
  constructor() {
    super(
      "defects",
      "List defects and related runs in a project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("external_reference_id", {
          alias: "ei",
          describe: "Remote defect key from integration",
          type: "string"
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        });
      },
      async (args) => {
        try {
          const projectId = await this.getProjectId(args);
          const params = this.getParams(args);
          if (projectId) {
            params.project_id = projectId;
          }
          if (args.revision_log) {
            params.revision_log = "true";
          }
          if (args.external_referece_id) {
            params.external_reference_id = args.external_reference_id;
          }
          const defects = await (0, import_sdk15.defectGetMany)({ params });
          if (args.revision_log) {
            console.log(defects);
            return;
          }
          if (defects.total === 0) {
            console.log("Result is empty");
            return;
          }
          if (args.verbose) {
            console.log(defects.data);
            return;
          }
          const data = await Promise.all(
            defects.data.map(async (d) => await this.getDefectDetails(d))
          );
          console.dir(data, { depth: 3 });
        } catch (err) {
          logError(err);
        }
      }
    );
  }
  async getDefectDetails(defect) {
    return await (0, import_sdk15.defectRunResultGetMany)({
      params: {
        defect_id: defect.id,
        _with: "runResult,runResult.run,runResult.test,runResult.status",
        per_page: -1
      }
    }).then((res) => {
      return res.data.map((drr) => {
        var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
        return {
          run_id: (_a2 = drr == null ? void 0 : drr.run_result) == null ? void 0 : _a2.run_id,
          run_name: (_c = (_b = drr == null ? void 0 : drr.run_result) == null ? void 0 : _b.run) == null ? void 0 : _c.name,
          test_id: (_d = drr == null ? void 0 : drr.run_result) == null ? void 0 : _d.test_id,
          test_key: (_f = (_e = drr == null ? void 0 : drr.run_result) == null ? void 0 : _e.test) == null ? void 0 : _f.key,
          test_name: (_h = (_g = drr == null ? void 0 : drr.run_result) == null ? void 0 : _g.test) == null ? void 0 : _h.name,
          status_id: (_i = drr == null ? void 0 : drr.run_result) == null ? void 0 : _i.status_id,
          status_name: (_k = (_j = drr == null ? void 0 : drr.run_result) == null ? void 0 : _j.status) == null ? void 0 : _k.name
        };
      });
    }).then((runResults) => ({
      id: defect.id,
      external_reference_id: defect.external_reference_id,
      integration_project_id: defect.integration_project_id,
      payload: defect.payload,
      defect_status_id: defect.defect_status_id,
      defect_res_id: defect.defect_res_id,
      key: defect.key,
      project_id: defect.project_id,
      run_results: runResults
    }));
  }
};

// src/RequirementCommand.ts
var import_sdk16 = __toESM(require_dist());
var RequirementCommand = class extends Command {
  constructor() {
    super(
      "requirements",
      "List requirements and related tests in a project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("external_reference_id", {
          alias: "ei",
          describe: "Remote requirement key from integration",
          type: "string"
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        });
      },
      async (args) => {
        try {
          const projectId = await this.getProjectId(args);
          const params = this.getParams(args);
          if (projectId) {
            params.project_id = projectId;
          }
          if (args.revision_log) {
            params.revision_log = "true";
          }
          if (args.external_referece_id) {
            params.external_reference_id = args.external_reference_id;
          }
          const requirements = await (0, import_sdk16.requirementGetMany)({
            params
          });
          if (args.revision_log) {
            console.log(requirements);
          } else {
            if (requirements.total > 0) {
              if (args.verbose) {
                console.log(requirements.data);
              } else {
                try {
                  const data = await Promise.all(
                    requirements.data.map(async (r) => {
                      return await this.getRequirementDetails(r);
                    })
                  );
                  console.log(data);
                } catch (error) {
                  logError(error);
                }
              }
            } else {
              console.log("Result is empty");
            }
          }
        } catch (err) {
          logError(err);
        }
      }
    );
  }
  async getRequirementDetails(requirement) {
    const testId = requirement.related_id;
    return await (0, import_sdk16.testGetOne)(testId, {
      params: { _with: "suite,RunResult,RunResult.run,RunResult.status" }
    }).then((test) => {
      var _a2;
      const runResults = (_a2 = test.run_result) == null ? void 0 : _a2.map((runResult) => {
        var _a3, _b;
        return {
          run_id: runResult.run_id,
          run_name: (_a3 = runResult.run) == null ? void 0 : _a3.name,
          status_id: runResult.status_id,
          status_name: (_b = runResult.status) == null ? void 0 : _b.name
        };
      });
      return {
        id: requirement.id,
        external_reference_id: requirement.external_reference_id,
        test_id: test.id,
        test_key: test.key,
        test_name: test.name,
        run_results: JSON.stringify(runResults),
        integration_project_id: requirement.integration_project_id,
        payload: requirement.payload,
        key: requirement.key,
        project_id: requirement.project_id
      };
    });
  }
};

// src/PlanSuiteCommand.ts
var import_sdk17 = __toESM(require_dist());
var PlanSuiteCommand = class extends Command {
  constructor() {
    super(
      "plan_suite",
      "List plan suite relationships in project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        });
      },
      (args) => {
        this.reLogin(args).then(
          () => {
            const params = this.getParams(args);
            if (args.revision_log) {
              params.revision_log = "true";
            }
            (0, import_sdk17.planSuiteGetMany)({
              params
            }).then(
              (planList) => {
                if (args.revision_log) {
                  console.log(planList);
                } else {
                  if (planList.total > 0) {
                    if (args.verbose) {
                      console.log(planList.data);
                    } else {
                      console.log(
                        planList.data.map((p) => {
                          return {
                            id: p.id,
                            plan_id: p.plan_id,
                            suite_id: p.suite_id,
                            sequence_plan: p.sequence_plan,
                            suite_offset: p.suite_offset,
                            parent_id: p.parent_id,
                            hierarchy_level: p.hierarchy_level
                          };
                        })
                      );
                    }
                  } else {
                    console.log("Result is empty");
                  }
                }
              },
              (error) => {
                logError(error);
              }
            );
          },
          (error) => {
            logError(error);
          }
        );
      }
    );
  }
};

// src/SuiteTestCommand.ts
var import_sdk18 = __toESM(require_dist());
var SuiteTestCommand = class extends Command {
  constructor() {
    super(
      "suite_test",
      "List suite test relationships in project.",
      (args) => {
        return args.option("revision_log", {
          alias: "rl",
          describe: "Get history",
          type: "boolean",
          default: false,
          boolean: true
        }).option("params", {
          alias: "p",
          describe: "Add Properties",
          type: "array"
        });
      },
      (args) => {
        this.reLogin(args).then(
          () => {
            const params = this.getParams(args);
            if (args.revision_log) {
              params.revision_log = "true";
            }
            (0, import_sdk18.suiteTestGetMany)({
              params
            }).then(
              (suiteTest) => {
                if (args.revision_log) {
                  console.log(suiteTest);
                } else {
                  if (suiteTest.total > 0) {
                    if (args.verbose) {
                      console.log(suiteTest.data);
                    } else {
                      console.log(
                        suiteTest.data.map((p) => {
                          return {
                            id: p.id,
                            suite_id: p.suite_id,
                            test_id: p.test_id,
                            sequence_suite: p.sequence_suite
                          };
                        })
                      );
                    }
                  } else {
                    console.log("Result is empty");
                  }
                }
              },
              (error) => {
                logError(error);
              }
            );
          },
          (error) => {
            logError(error);
          }
        );
      }
    );
  }
};

// src/PlanDeleteCommand.ts
var import_sdk19 = __toESM(require_dist());
var PlanDelete = class extends Command {
  constructor() {
    super(
      "plan_delete <id>",
      "Delete a Cycle/Plan",
      (args) => {
        return args.positional("id", {
          describe: "Id of plan",
          type: "string"
        });
      },
      async (args) => {
        try {
          if (!args.id) {
            logError("Plan id is required.");
            return;
          }
          const id = parseInt(args.id, 10);
          console.log("id", id);
          await (0, import_sdk19.planDeleteOne)(id);
          console.log("Plan Deleted");
        } catch (error) {
          logError(error);
        }
      }
    );
  }
};

// src/index.ts
var argv = yargs.command(new CreateManualRunCommand()).command(new CreatePlan()).command(new DefectCommand()).command(new LoginCommand()).command(new MilestoneCommand()).command(new ProjectCommand()).command(new PlanCommand()).command(new PlanDelete()).command(new PlanSuiteCommand()).command(new RestoreCommand()).command(new RequirementCommand()).command(new RunCommand()).command(new SuiteCommand()).command(new SuiteTestCommand()).command(new TestCommand()).command(new UploadTestRunCommand()).command(new UploadFeatureCommand()).command(new UploadFeatureResultsCommand()).command(new UploadCSVCommand()).option("verbose", {
  alias: "v",
  boolean: true,
  type: "boolean",
  default: false
}).option("save", {
  alias: "s",
  describe: "Save tokens for future use",
  boolean: true,
  type: "boolean",
  default: false
}).option("username", {
  alias: "u",
  describe: "User name you login as",
  type: "string"
}).option("access_token", {
  alias: "t",
  describe: "Access Token",
  type: "string"
}).option("expires_at", {
  alias: "ea",
  describe: "Access Token Expires at Unix Epoch",
  type: "string"
}).option("refresh_token", {
  alias: "rt",
  describe: "Refresh Token",
  type: "string"
}).option("project_id", {
  alias: "i",
  describe: "Project Id",
  type: "string"
}).option("project_name", {
  alias: "n",
  describe: "Project Name",
  type: "string"
}).demandCommand().recommendCommands().strict().scriptName("testquality").argv;
if (!argv) {
  console.log("Arguments are undefined!");
}
/*! Bundled license information:

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
